[
    {
        "sumber": "pythonmasters.com",
        "penulis": "Dian Kurniawan",
        "tanggal": "2024-12-12",
        "judul": "Metaprogramming dengan Decorators dan Metaclasses di Python",
        "tingkat_kesulitan": "Lanjut",
        "tag": ["python", "metaprogramming", "decorators", "metaclasses", "lanjut"],
        "konten": "Artikel ini membahas teknik metaprogramming di Python dengan menggunakan decorators dan metaclasses untuk memodifikasi perilaku class dan fungsi secara dinamis.",
        "pertanyaan": [
            {
                "question": "Saya baru saja mendengar tentang metaprogramming di Python, dan sejujurnya saya agak bingung dengan konsepnya. Bisa tolong jelaskan secara sederhana apa itu metaprogramming dan bagaimana decorators serta metaclasses bisa digunakan untuk memodifikasi perilaku class dan fungsi? Mungkin contoh kode sederhana akan sangat membantu.",
                "answer": "Metaprogramming adalah teknik pemrograman yang memungkinkan program untuk memodifikasi atau menghasilkan kode program lain selama waktu eksekusi. Decorators digunakan untuk memodifikasi fungsi, sedangkan metaclasses digunakan untuk memodifikasi class. Berikut contoh sederhana dari kedua konsep tersebut:",
                "question_code": "def simple_decorator(func):\n    def wrapper(*args, **kwargs):\n        print('Function is being called')\n        return func(*args, **kwargs)\n    return wrapper\n\n@simple_decorator\ndef say_hello(name):\n    return f'Hello, {name}'\n\nprint(say_hello('Alice'))\n\nclass Meta(type):\n    def __new__(cls, name, bases, dct):\n        dct['greeting'] = 'Hello, World!'\n        return super().__new__(cls, name, bases, dct)\n\nclass Greet(metaclass=Meta):\n    pass\n\nprint(Greet.greeting)",
                "answer_code": "def simple_decorator(func):\n    def wrapper(*args, **kwargs):\n        print('Function is being called')\n        return func(*args, **kwargs)\n    return wrapper\n\n@simple_decorator\ndef say_hello(name):\n    return f'Hello, {name}'\n\nprint(say_hello('Alice'))\n\nclass Meta(type):\n    def __new__(cls, name, bases, dct):\n        dct['greeting'] = 'Hello, World!'\n        return super().__new__(cls, name, bases, dct)\n\nclass Greet(metaclass=Meta):\n    pass\n\nprint(Greet.greeting)"
            },
            {
                "question": "Saya ingin membuat decorator yang bisa menambah atribut tertentu ke fungsi. Bisakah Anda memberikan contoh bagaimana membuat decorator yang menambah atribut ke fungsi di Python? Saya ingin memahami bagaimana cara kerjanya secara rinci.",
                "answer": "Anda bisa membuat decorator yang menambah atribut ke fungsi dengan menggunakan `setattr` di dalam decorator. Berikut adalah contoh bagaimana melakukannya:",
                "question_code": "def add_attribute(attr_name, value):\n    def decorator(func):\n        setattr(func, attr_name, value)\n        return func\n    return decorator\n\n@add_attribute('category', 'utility')\ndef multiply(a, b):\n    return a * b\n\nprint(multiply.category)",
                "answer_code": "def add_attribute(attr_name, value):\n    def decorator(func):\n        setattr(func, attr_name, value)\n        return func\n    return decorator\n\n@add_attribute('category', 'utility')\ndef multiply(a, b):\n    return a * b\n\nprint(multiply.category)"
            },
            {
                "question": "Bagaimana cara menggunakan metaclass untuk memodifikasi atribut class di Python? Saya ingin memahami bagaimana cara memodifikasi atribut class secara dinamis menggunakan metaclass. Tolong beri contoh yang mudah dipahami.",
                "answer": "Anda bisa menggunakan metaclass untuk memodifikasi atribut class dengan menambahkan atau mengubah atribut dalam metode `__new__`. Berikut adalah contoh sederhana:",
                "question_code": "class CustomMeta(type):\n    def __new__(cls, name, bases, dct):\n        dct['category'] = 'Custom Class'\n        return super().__new__(cls, name, bases, dct)\n\nclass Example(metaclass=CustomMeta):\n    pass\n\nprint(Example.category)",
                "answer_code": "class CustomMeta(type):\n    def __new__(cls, name, bases, dct):\n        dct['category'] = 'Custom Class'\n        return super().__new__(cls, name, bases, dct)\n\nclass Example(metaclass=CustomMeta):\n    pass\n\nprint(Example.category)"
            },
            {
                "question": "Saya ingin tahu bagaimana cara membuat metaclass yang mengontrol pembuatan instance di Python. Bagaimana cara membuat metaclass yang memastikan hanya satu instance dari sebuah class yang dapat dibuat (singleton pattern)?",
                "answer": "Anda bisa membuat metaclass yang mengontrol pembuatan instance dengan mengoverride metode `__call__` untuk menerapkan pola desain singleton. Berikut adalah contoh bagaimana melakukannya:",
                "question_code": "class SingletonMeta(type):\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            instance = super().__call__(*args, **kwargs)\n            cls._instances[cls] = instance\n        return cls._instances[cls]\n\nclass SingletonExample(metaclass=SingletonMeta):\n    pass\n\ninstance1 = SingletonExample()\ninstance2 = SingletonExample()\nprint(instance1 is instance2)",
                "answer_code": "class SingletonMeta(type):\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            instance = super().__call__(*args, **kwargs)\n            cls._instances[cls] = instance\n        return cls._instances[cls]\n\nclass SingletonExample(metaclass=SingletonMeta):\n    pass\n\ninstance1 = SingletonExample()\ninstance2 = SingletonExample()\nprint(instance1 is instance2)"
            },
            {
                "question": "Saya ingin membuat metaclass yang memeriksa apakah sebuah class memiliki atribut wajib tertentu. Bagaimana cara membuat metaclass yang memeriksa keberadaan atribut wajib saat class didefinisikan? Tolong beri contoh yang jelas.",
                "answer": "Anda bisa membuat metaclass yang memeriksa atribut wajib dengan mengoverride metode `__init__` dan memeriksa atribut dalam class yang dibuat. Berikut adalah contoh bagaimana melakukannya:",
                "question_code": "class AttributeCheckerMeta(type):\n    def __init__(cls, name, bases, dct):\n        super().__init__(name, bases, dct)\n        if not hasattr(cls, 'required_attribute'):\n            raise TypeError(f'{name} is missing required attribute')\n\nclass ValidClass(metaclass=AttributeCheckerMeta):\n    required_attribute = 'This is required'\n\n# This will raise a TypeError\nclass InvalidClass(metaclass=AttributeCheckerMeta):\n    pass",
                "answer_code": "class AttributeCheckerMeta(type):\n    def __init__(cls, name, bases, dct):\n        super().__init__(name, bases, dct)\n        if not hasattr(cls, 'required_attribute'):\n            raise TypeError(f'{name} is missing required attribute')\n\nclass ValidClass(metaclass=AttributeCheckerMeta):\n    required_attribute = 'This is required'\n\n# This will raise a TypeError\nclass InvalidClass(metaclass=AttributeCheckerMeta):\n    pass"
            },
            {
                "question": "Bagaimana cara menggunakan decorator untuk mengatur logging pada fungsi di Python? Saya ingin tahu cara membuat decorator yang bisa mencatat sebelum dan sesudah fungsi dipanggil. Contoh kode yang jelas akan sangat membantu.",
                "answer": "Anda bisa menggunakan decorator untuk mengatur logging pada fungsi dengan menambahkan logging sebelum dan sesudah pemanggilan fungsi dalam fungsi pembungkus. Berikut adalah contoh bagaimana melakukannya:",
                "question_code": "import logging\n\nlogging.basicConfig(level=logging.INFO)\n\ndef log_decorator(func):\n    def wrapper(*args, **kwargs):\n        logging.info(f'Calling {func.__name__}')\n        result = func(*args, **kwargs)\n        logging.info(f'{func.__name__} returned {result}')\n        return result\n    return wrapper\n\n@log_decorator\ndef multiply(a, b):\n    return a * b\n\nmultiply(2, 3)",
                "answer_code": "import logging\n\nlogging.basicConfig(level=logging.INFO)\n\ndef log_decorator(func):\n    def wrapper(*args, **kwargs):\n        logging.info(f'Calling {func.__name__}')\n        result = func(*args, **kwargs)\n        logging.info(f'{func.__name__} returned {result}')\n        return result\n    return wrapper\n\n@log_decorator\ndef multiply(a, b):\n    return a * b\n\nmultiply(2, 3)"
            },
            {
                "question": "Bagaimana cara membuat decorator yang menambahkan cache ke fungsi di Python? Saya ingin mengerti cara membuat decorator yang menyimpan hasil fungsi untuk panggilan selanjutnya. Tolong beri contoh.",
                "answer": "Anda bisa membuat decorator yang menambahkan cache ke fungsi dengan menggunakan dictionary untuk menyimpan hasil panggilan fungsi berdasarkan argumen. Berikut adalah contoh bagaimana melakukannya:",
                "question_code": "def cache_decorator(func):\n    cache = {}\n    def wrapper(*args):\n        if args in cache:\n            return cache[args]\n        result = func(*args)\n        cache[args] = result\n        return result\n    return wrapper\n\n@cache_decorator\ndef multiply(a, b):\n    return a * b\n\nprint(multiply(2, 3))\nprint(multiply(2, 3))",
                "answer_code": "def cache_decorator(func):\n    cache = {}\n    def wrapper(*args):\n        if args in cache:\n            return cache[args]\n        result = func(*args)\n        cache[args] = result\n        return result\n    return wrapper\n\n@cache_decorator\ndef multiply(a, b):\n    return a * b\n\nprint(multiply(2, 3))\nprint(multiply(2, 3))"
            }
        ]
    },
    {
        "sumber": "pythonprotips.com",
        "penulis": "Bayu Santoso",
        "tanggal": "2024-12-18",
        "judul": "Pemrograman Asinkron dengan Awaitable Objects dan Custom Event Loop di Python",
        "tingkat_kesulitan": "Lanjut",
        "tag": ["python", "asyncio", "awaitable", "event loop", "lanjut"],
        "konten": "Artikel ini menjelaskan cara membuat awaitable objects dan custom event loop di Python untuk pemrograman asinkron yang lebih kompleks.",
        "pertanyaan": [
            {
                "question": "Saya pernah mendengar tentang awaitable objects di Python, tetapi saya masih belum paham sepenuhnya. Bisakah Anda menjelaskan apa itu awaitable object dan bagaimana cara membuatnya? Contoh kode yang jelas akan sangat membantu.",
                "answer": "Awaitable object adalah objek yang bisa digunakan dengan kata kunci `await` dalam coroutine. Contohnya adalah coroutine dan objek yang mengimplementasikan metode `__await__`. Berikut adalah contoh cara membuat custom awaitable object:",
                "question_code": "class CustomAwaitable:\n    def __init__(self, value):\n        self.value = value\n    def __await__(self):\n        yield\n        return self.value\n\nasync def main():\n    result = await CustomAwaitable(42)\n    print(result)\n\nimport asyncio\nasyncio.run(main())",
                "answer_code": "class CustomAwaitable:\n    def __init__(self, value):\n        self.value = value\n    def __await__(self):\n        yield\n        return self.value\n\nasync def main():\n    result = await CustomAwaitable(42)\n    print(result)\n\nimport asyncio\nasyncio.run(main())"
            },
            {
                "question": "Bagaimana cara membuat custom event loop di Python? Saya ingin memahami bagaimana cara membuat event loop kustom untuk menangani tugas-tugas asinkron. Tolong beri contoh.",
                "answer": "Anda bisa membuat custom event loop dengan mengimplementasikan class yang mewarisi `asyncio.AbstractEventLoop` dan mengoverride metode-metode yang diperlukan seperti `run_forever`, `run_until_complete`, dan `stop`. Berikut adalah contoh sederhana:",
                "question_code": "import asyncio\n\nclass MyCustomEventLoop(asyncio.AbstractEventLoop):\n    def run_forever(self):\n        pass  # Implementasi logika event loop kustom\n    def run_until_complete(self, future):\n        pass  # Implementasi logika event loop kustom\n    def stop(self):\n        pass  # Implementasi logika event loop kustom\n\nloop = MyCustomEventLoop()\nasyncio.set_event_loop(loop)\n\n# Implementasi event loop lengkap diperlukan untuk penggunaan nyata",
                "answer_code": "import asyncio\n\nclass MyCustomEventLoop(asyncio.AbstractEventLoop):\n    def run_forever(self):\n        pass  # Implementasi logika event loop kustom\n    def run_until_complete(self, future):\n        pass  # Implementasi logika event loop kustom\n    def stop(self):\n        pass  # Implementasi logika event loop kustom\n\nloop = MyCustomEventLoop()\nasyncio.set_event_loop(loop)\n\n# Implementasi event loop lengkap diperlukan untuk penggunaan nyata"
            },
            {
                "question": "Saya ingin tahu bagaimana cara mengintegrasikan custom event loop dengan asyncio di Python. Bagaimana cara menggunakannya dengan coroutine yang ada? Contoh kode akan sangat membantu pemahaman saya.",
                "answer": "Anda bisa mengintegrasikan custom event loop dengan asyncio dengan menggunakan `asyncio.set_event_loop` untuk menetapkan loop kustom sebagai event loop saat ini dan menjalankan coroutine dengan `run_until_complete`. Berikut adalah contohnya:",
                "question_code": "import asyncio\n\nclass MyCustomEventLoop(asyncio.AbstractEventLoop):\n    def run_forever(self):\n        pass  # Implementasi logika event loop kustom\n    def run_until_complete(self, future):\n        pass  # Implementasi logika event loop kustom\n    def stop(self):\n        pass  # Implementasi logika event loop kustom\n\nasync def main():\n    print('Hello, Asyncio!')\n\nloop = MyCustomEventLoop()\nasyncio.set_event_loop(loop)\nloop.run_until_complete(main())",
                "answer_code": "import asyncio\n\nclass MyCustomEventLoop(asyncio.AbstractEventLoop):\n    def run_forever(self):\n        pass  # Implementasi logika event loop kustom\n    def run_until_complete(self, future):\n        pass  # Implementasi logika event loop kustom\n    def stop(self):\n        pass  # Implementasi logika event loop kustom\n\nasync def main():\n    print('Hello, Asyncio!')\n\nloop = MyCustomEventLoop()\nasyncio.set_event_loop(loop)\nloop.run_until_complete(main())"
            },
            {
                "question": "Bagaimana cara menangani pengecualian dalam custom event loop di Python? Saya ingin tahu bagaimana caranya agar event loop saya bisa menangani pengecualian yang terjadi selama eksekusi tugas. Contoh kode yang jelas akan sangat membantu.",
                "answer": "Anda bisa menangani pengecualian dalam custom event loop dengan mengimplementasikan metode `handle_exception` dan memanggilnya dalam blok try-except di metode `run_forever`. Berikut adalah contoh bagaimana melakukannya:",
                "question_code": "import asyncio\n\nclass MyCustomEventLoop(asyncio.AbstractEventLoop):\n    def run_forever(self):\n        try:\n            while True:\n                # Logika event loop di sini\n                pass\n        except Exception as e:\n            self.handle_exception(e)\n    def handle_exception(self, e):\n        print(f'Exception caught: {e}')\n    def run_until_complete(self, future):\n        pass  # Implementasi logika event loop kustom\n    def stop(self):\n        pass  # Implementasi logika event loop kustom\n\nloop = MyCustomEventLoop()\nasyncio.set_event_loop(loop)\n\n# Implementasi event loop lengkap diperlukan untuk penggunaan nyata",
                "answer_code": "import asyncio\n\nclass MyCustomEventLoop(asyncio.AbstractEventLoop):\n    def run_forever(self):\n        try:\n            while True:\n                # Logika event loop di sini\n                pass\n        except Exception as e:\n            self.handle_exception(e)\n    def handle_exception(self, e):\n        print(f'Exception caught: {e}')\n    def run_until_complete(self, future):\n        pass  # Implementasi logika event loop kustom\n    def stop(self):\n        pass  # Implementasi logika event loop kustom\n\nloop = MyCustomEventLoop()\nasyncio.set_event_loop(loop)\n\n# Implementasi event loop lengkap diperlukan untuk penggunaan nyata"
            },
            {
                "question": "Bagaimana cara membuat event loop yang mendukung multiple threads di Python? Saya ingin memahami bagaimana membuat event loop yang dapat menangani beberapa thread sekaligus. Contoh kode akan sangat membantu.",
                "answer": "Anda bisa membuat event loop yang mendukung multiple threads dengan menggunakan `asyncio.run_coroutine_threadsafe` dan mengelola thread secara manual. Berikut adalah contoh bagaimana melakukannya:",
                "question_code": "import asyncio\nimport threading\n\nclass ThreadedEventLoop(asyncio.AbstractEventLoop):\n    def __init__(self):\n        self._loop = asyncio.new_event_loop()\n        self._thread = threading.Thread(target=self._loop.run_forever)\n    def start(self):\n        self._thread.start()\n    def run_until_complete(self, future):\n        return asyncio.run_coroutine_threadsafe(future, self._loop).result()\n    def stop(self):\n        self._loop.call_soon_threadsafe(self._loop.stop)\n        self._thread.join()\n\nloop = ThreadedEventLoop()\nasyncio.set_event_loop(loop)\nloop.start()\n\nasync def main():\n    print('Running in a threaded event loop')\n\nloop.run_until_complete(main())",
                "answer_code": "import asyncio\nimport threading\n\nclass ThreadedEventLoop(asyncio.AbstractEventLoop):\n    def __init__(self):\n        self._loop = asyncio.new_event_loop()\n        self._thread = threading.Thread(target=self._loop.run_forever)\n    def start(self):\n        self._thread.start()\n    def run_until_complete(self, future):\n        return asyncio.run_coroutine_threadsafe(future, self._loop).result()\n    def stop(self):\n        self._loop.call_soon_threadsafe(self._loop.stop)\n        self._thread.join()\n\nloop = ThreadedEventLoop()\nasyncio.set_event_loop(loop)\nloop.start()\n\nasync def main():\n    print('Running in a threaded event loop')\n\nloop.run_until_complete(main())"
            }
        ]
    }
]
