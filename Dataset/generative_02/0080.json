[
    {
        "sumber": "belajarpython.id",
        "penulis": "Fajar Hadi",
        "tanggal": "2023-09-25",
        "judul": "Fungsi Built-in Python untuk Pemula",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "fungsi built-in", "pemula"],
        "konten": "Artikel ini memperkenalkan fungsi built-in dasar di Python seperti `len()`, `type()`, `input()`, `print()`, dan `range()`. Fungsi-fungsi ini sering digunakan dalam pemrograman sehari-hari.",
        "pertanyaan": [
            {
                "question": "Apa yang dilakukan fungsi `len()` dalam Python dan berikan contoh penggunaannya.",
                "answer": "Fungsi `len()` menghitung jumlah elemen dalam objek seperti list atau string. Misalnya, `len('Hello')` mengembalikan 5."
            },
            {
                "question": "Bagaimana cara menggunakan `type()` untuk mengetahui tipe data dari variabel?",
                "answer": "Fungsi `type()` digunakan untuk memeriksa tipe data dari suatu variabel. Contoh: `type([1, 2, 3])` mengembalikan `<class 'list'>`."
            },
            {
                "question": "Jelaskan cara kerja fungsi `input()` dalam menerima input dari pengguna.",
                "answer": "Fungsi `input()` menerima data dari pengguna melalui keyboard. Contoh: `name = input('Enter your name: ')` menyimpan input pengguna ke dalam variabel `name`."
            },
            {
                "question": "Tunjukkan cara menggunakan `print()` untuk menampilkan string ke layar.",
                "question_code": "print('Hello, World!')",
                "answer": "Fungsi `print()` digunakan untuk mencetak string atau nilai lainnya ke layar. Contoh: `print('Hello, World!')` akan menampilkan 'Hello, World!' di layar.",
                "answer_code": "print('Hello, World!')"
            },
            {
                "question": "Bagaimana `range()` digunakan dalam loop untuk menghasilkan rentang angka?",
                "question_code": "for i in range(4):\n    print(i)",
                "answer": "Fungsi `range()` menghasilkan urutan angka yang digunakan dalam loop. Contoh: `for i in range(4): print(i)` akan mencetak angka dari 0 hingga 3.",
                "answer_code": "for i in range(4):\n    print(i)"
            },
            {
                "question": "Apa tujuan dari fungsi `abs()` dan berikan contohnya.",
                "question_code": "abs(-10)",
                "answer": "Fungsi `abs()` mengembalikan nilai absolut dari angka. Contoh: `abs(-10)` mengembalikan 10.",
                "answer_code": "abs(-10)"
            },
            {
                "question": "Bagaimana menggunakan fungsi `max()` untuk menemukan nilai terbesar dalam list?",
                "question_code": "max([2, 4, 6])",
                "answer": "Fungsi `max()` mengembalikan nilai tertinggi dari iterable. Contoh: `max([2, 4, 6])` mengembalikan 6.",
                "answer_code": "max([2, 4, 6])"
            },
            {
                "question": "Jelaskan penggunaan fungsi `min()` untuk mendapatkan nilai terkecil.",
                "question_code": "min([5, 3, 9])",
                "answer": "Fungsi `min()` digunakan untuk menemukan nilai terkecil dalam iterable. Contoh: `min([5, 3, 9])` mengembalikan 3.",
                "answer_code": "min([5, 3, 9])"
            },
            {
                "question": "Apa cara menggunakan `sum()` untuk menjumlahkan elemen dalam sebuah list?",
                "question_code": "sum([1, 3, 5])",
                "answer": "Fungsi `sum()` menjumlahkan semua elemen dalam iterable. Contoh: `sum([1, 3, 5])` mengembalikan 9.",
                "answer_code": "sum([1, 3, 5])"
            }
        ]
    },
    {
        "sumber": "codingpythonpemula.com",
        "penulis": "Dewi Kartika",
        "tanggal": "2024-03-14",
        "judul": "Struktur Kondisional dan Logika di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "kondisional", "logika"],
        "konten": "Artikel ini membahas bagaimana menggunakan pernyataan kondisional dan operator logika dalam Python untuk mengontrol alur program.",
        "pertanyaan": [
            {
                "question": "Bagaimana cara kerja pernyataan `if` dalam Python dengan contoh?",
                "answer": "Pernyataan `if` digunakan untuk mengeksekusi kode jika kondisi yang ditentukan benar. Contoh: `if temperature > 30: print('Cuaca panas')`."
            },
            {
                "question": "Apa fungsi dari pernyataan `else` dalam struktur kondisional?",
                "answer": "Pernyataan `else` menangani kondisi yang tidak terpenuhi oleh `if`. Contoh: `else: print('Cuaca sejuk')`."
            },
            {
                "question": "Jelaskan penggunaan `elif` untuk menambahkan kondisi tambahan.",
                "answer": "Pernyataan `elif` memungkinkan pemeriksaan kondisi tambahan setelah `if`. Contoh: `elif temperature == 30: print('Cuaca hangat')`."
            },
            {
                "question": "Bagaimana cara menggunakan operator `and` dalam kondisi ganda?",
                "question_code": "if age >= 18 and age <= 65:\n    print('Usia dewasa')",
                "answer": "Operator `and` memeriksa apakah kedua kondisi benar. Contoh: `if age >= 18 and age <= 65:` memeriksa apakah `age` antara 18 dan 65.",
                "answer_code": "if age >= 18 and age <= 65:\n    print('Usia dewasa')"
            },
            {
                "question": "Apa fungsi dari operator `or` dalam pernyataan kondisional?",
                "question_code": "if temperature < 0 or temperature > 35:\n    print('Suhu ekstrem')",
                "answer": "Operator `or` memeriksa apakah salah satu dari kondisi benar. Contoh: `if temperature < 0 or temperature > 35:` memeriksa apakah suhu ekstrem.",
                "answer_code": "if temperature < 0 or temperature > 35:\n    print('Suhu ekstrem')"
            },
            {
                "question": "Bagaimana operator `not` digunakan untuk membalikkan nilai boolean?",
                "question_code": "if not is_raining:\n    print('Cuaca cerah')",
                "answer": "Operator `not` membalikkan nilai boolean dari kondisi. Contoh: `if not is_raining:` memeriksa apakah `is_raining` False.",
                "answer_code": "if not is_raining:\n    print('Cuaca cerah')"
            },
            {
                "question": "Bagaimana cara membuat kondisional bersarang dengan contoh yang tepat?",
                "question_code": "if score > 60:\n    if score > 80:\n        print('Lulus dengan nilai tinggi')",
                "answer": "Kondisional bersarang melibatkan penggunaan `if` di dalam `if`. Contoh: `if score > 60: if score > 80:` memeriksa jika `score` lebih dari 80.",
                "answer_code": "if score > 60:\n    if score > 80:\n        print('Lulus dengan nilai tinggi')"
            },
            {
                "question": "Jelaskan penggunaan operator perbandingan `==` dengan contoh.",
                "question_code": "if a == b:\n    print('a sama dengan b')",
                "answer": "Operator `==` memeriksa kesamaan dua nilai. Contoh: `if a == b:` memeriksa apakah `a` sama dengan `b`.",
                "answer_code": "if a == b:\n    print('a sama dengan b')"
            },
            {
                "question": "Apa kegunaan operator perbandingan `!=` dalam logika kondisional?",
                "question_code": "if a != b:\n    print('a tidak sama dengan b')",
                "answer": "Operator `!=` memeriksa ketidaksamaan antara dua nilai. Contoh: `if a != b:` memeriksa apakah `a` tidak sama dengan `b`.",
                "answer_code": "if a != b:\n    print('a tidak sama dengan b')"
            }
        ]
    }
]
