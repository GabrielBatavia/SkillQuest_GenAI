[
    {
        "sumber": "pythonpraktis.com",
        "penulis": "Rizal Fadli",
        "tanggal": "2024-06-25",
        "judul": "Penggunaan Fungsi Map, Filter, dan Reduce di Python dengan Contoh Praktis",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "map", "filter", "reduce", "menengah"],
        "konten": "Artikel ini memberikan panduan tentang cara menggunakan fungsi map, filter, dan reduce di Python melalui contoh-contoh praktis.",
        "pertanyaan": [
            {
                "question": "Apa yang dilakukan oleh fungsi map di Python?",
                "answer": "Fungsi map menerapkan sebuah fungsi ke setiap elemen dalam iterable dan mengembalikan sebuah map object yang berisi hasilnya."
            },
            {
                "question": "Bagaimana cara menggunakan fungsi map dengan contoh yang sederhana?",
                "question_code": "numbers = [2, 4, 6, 8]\ntripled = list(map(lambda x: x * 3, numbers))",
                "answer": "Anda bisa menggunakan fungsi map untuk melipatgandakan setiap elemen dalam daftar. Contoh: map(lambda x: x * 3, numbers).",
                "answer_code": "numbers = [2, 4, 6, 8]\ntripled = list(map(lambda x: x * 3, numbers))"
            },
            {
                "question": "Apa fungsi dari filter di Python?",
                "answer": "Fungsi filter digunakan untuk menyaring elemen dalam iterable berdasarkan fungsi yang mengembalikan nilai boolean."
            },
            {
                "question": "Bagaimana cara menggunakan fungsi filter dengan contoh yang mudah dipahami?",
                "question_code": "numbers = [5, 10, 15, 20]\ngreater_than_ten = list(filter(lambda x: x > 10, numbers))",
                "answer": "Anda bisa menggunakan fungsi filter untuk menyaring elemen yang lebih besar dari sepuluh dalam daftar. Contoh: filter(lambda x: x > 10, numbers).",
                "answer_code": "numbers = [5, 10, 15, 20]\ngreater_than_ten = list(filter(lambda x: x > 10, numbers))"
            },
            {
                "question": "Bisakah Anda jelaskan apa kegunaan fungsi reduce di Python?",
                "answer": "Fungsi reduce menerapkan fungsi tertentu ke elemen-elemen dalam iterable secara berurutan dan mengembalikan satu hasil akhir."
            },
            {
                "question": "Bagaimana cara menggunakan reduce dengan contoh yang mudah dimengerti?",
                "question_code": "from functools import reduce\nnumbers = [2, 3, 4]\nproduct = reduce(lambda x, y: x * y, numbers)",
                "answer": "Anda bisa menggunakan fungsi reduce untuk mengalikan semua elemen dalam daftar. Contoh: reduce(lambda x, y: x * y, numbers).",
                "answer_code": "from functools import reduce\nnumbers = [2, 3, 4]\nproduct = reduce(lambda x, y: x * y, numbers)"
            },
            {
                "question": "Bagaimana cara menggabungkan penggunaan map dan filter di Python?",
                "question_code": "numbers = [1, 2, 3, 4, 5]\nfiltered_and_mapped = list(map(lambda x: x**2, filter(lambda x: x % 2 != 0, numbers)))",
                "answer": "Anda bisa menggabungkan filter dan map dengan menyaring elemen ganjil terlebih dahulu, lalu menerapkan fungsi map untuk mengkuadratkan elemen tersebut. Contoh: map(lambda x: x**2, filter(lambda x: x % 2 != 0, numbers)).",
                "answer_code": "numbers = [1, 2, 3, 4, 5]\nfiltered_and_mapped = list(map(lambda x: x**2, filter(lambda x: x % 2 != 0, numbers)))"
            },
            {
                "question": "Bagaimana cara menggunakan map dengan beberapa iterable di Python?",
                "question_code": "list1 = [1, 3, 5]\nlist2 = [2, 4, 6]\ncombined = list(map(lambda x, y: x + y, list1, list2))",
                "answer": "Anda bisa menggunakan fungsi map dengan beberapa iterable untuk menambahkan elemen-elemen yang berkorespondensi. Contoh: map(lambda x, y: x + y, list1, list2).",
                "answer_code": "list1 = [1, 3, 5]\nlist2 = [2, 4, 6]\ncombined = list(map(lambda x, y: x + y, list1, list2))"
            },
            {
                "question": "Bagaimana cara menggunakan filter untuk menyaring string yang mengandung karakter tertentu di Python?",
                "question_code": "words = ['apple', 'banana', 'cherry']\nfiltered_words = list(filter(lambda x: 'p' in x, words))",
                "answer": "Anda bisa menggunakan filter untuk menyaring string yang mengandung karakter tertentu. Contoh: filter(lambda x: 'p' in x, words).",
                "answer_code": "words = ['apple', 'banana', 'cherry']\nfiltered_words = list(filter(lambda x: 'p' in x, words))"
            }
        ]
    },
    {
        "sumber": "pythonhandling.com",
        "penulis": "Siti Nurhasanah",
        "tanggal": "2024-07-15",
        "judul": "Memahami Exception Handling di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "exception handling", "menengah"],
        "konten": "Artikel ini memberikan panduan tentang exception handling di Python, yang memungkinkan program untuk menangani error agar tetap berjalan meskipun terjadi kesalahan.",
        "pertanyaan": [
            {
                "question": "Apa itu exception handling di Python dan mengapa kita membutuhkannya?",
                "answer": "Exception handling adalah cara untuk menangani error atau pengecualian yang terjadi selama eksekusi program sehingga program dapat terus berjalan. Ini penting untuk mencegah program berhenti tiba-tiba."
            },
            {
                "question": "Bagaimana cara kerja blok try-except di Python dengan contoh sederhana?",
                "question_code": "try:\n    result = 10 / 'a'\nexcept TypeError:\n    print('Error: Tidak bisa membagi angka dengan string')",
                "answer": "Blok try-except digunakan untuk menangani error dengan menempatkan kode yang mungkin menghasilkan error di dalam blok try dan menangani error di dalam blok except. Contoh: try: result = 10 / 'a' except TypeError: print('Error: Tidak bisa membagi angka dengan string').",
                "answer_code": "try:\n    result = 10 / 'a'\nexcept TypeError:\n    print('Error: Tidak bisa membagi angka dengan string')"
            },
            {
                "question": "Bagaimana cara menangani berbagai jenis pengecualian di Python?",
                "question_code": "try:\n    num = int('xyz')\nexcept ValueError:\n    print('Kesalahan nilai')\nexcept TypeError:\n    print('Kesalahan tipe data')",
                "answer": "Anda bisa menangani berbagai pengecualian dengan menggunakan beberapa blok except untuk setiap jenis pengecualian. Contoh: try: num = int('xyz') except ValueError: print('Kesalahan nilai') except TypeError: print('Kesalahan tipe data').",
                "answer_code": "try:\n    num = int('xyz')\nexcept ValueError:\n    print('Kesalahan nilai')\nexcept TypeError:\n    print('Kesalahan tipe data')"
            },
            {
                "question": "Bagaimana cara menggunakan blok finally di Python dengan contoh yang mudah dipahami?",
                "question_code": "try:\n    print('Mulai')\nfinally:\n    print('Selesai')",
                "answer": "Blok finally digunakan untuk mengeksekusi kode yang harus dijalankan terlepas dari apakah terjadi pengecualian atau tidak. Contoh: try: print('Mulai') finally: print('Selesai').",
                "answer_code": "try:\n    print('Mulai')\nfinally:\n    print('Selesai')"
            },
            {
                "question": "Bagaimana cara membuat pengecualian khusus di Python?",
                "question_code": "class NegativeValueError(Exception):\n    pass\n\ntry:\n    value = -10\n    if value < 0:\n        raise NegativeValueError('Nilai tidak boleh negatif')\nexcept NegativeValueError as e:\n    print(e)",
                "answer": "Anda bisa membuat pengecualian khusus dengan mendefinisikan kelas pengecualian yang mewarisi dari kelas Exception. Contoh: class NegativeValueError(Exception): pass.",
                "answer_code": "class NegativeValueError(Exception):\n    pass\n\ntry:\n    value = -10\n    if value < 0:\n        raise NegativeValueError('Nilai tidak boleh negatif')\nexcept NegativeValueError as e:\n    print(e)"
            },
            {
                "question": "Bagaimana cara menggunakan klausa else dengan try-except di Python?",
                "question_code": "try:\n    number = 100 / 2\nexcept ZeroDivisionError:\n    print('Tidak bisa membagi dengan nol')\nelse:\n    print('Hasilnya adalah:', number)",
                "answer": "Klausa else digunakan untuk mengeksekusi kode jika tidak ada pengecualian yang terjadi di dalam blok try. Contoh: try: number = 100 / 2 except ZeroDivisionError: print('Tidak bisa membagi dengan nol') else: print('Hasilnya adalah:', number).",
                "answer_code": "try:\n    number = 100 / 2\nexcept ZeroDivisionError:\n    print('Tidak bisa membagi dengan nol')\nelse:\n    print('Hasilnya adalah:', number)"
            },
            {
                "question": "Bagaimana cara menangkap semua jenis pengecualian di Python?",
                "question_code": "try:\n    open('non_existent_file.txt')\nexcept Exception as e:\n    print('Kesalahan yang terjadi:', e)",
                "answer": "Anda bisa menangkap semua jenis pengecualian dengan menggunakan kelas dasar Exception. Contoh: try: open('non_existent_file.txt') except Exception as e: print('Kesalahan yang terjadi:', e).",
                "answer_code": "try:\n    open('non_existent_file.txt')\nexcept Exception as e:\n    print('Kesalahan yang terjadi:', e)"
            },
            {
                "question": "Bagaimana cara menggunakan klausa raise di Python?",
                "question_code": "def check_positive(num):\n    if num < 0:\n        raise ValueError('Angka harus positif')\n\ntry:\n    check_positive(-5)\nexcept ValueError as e:\n    print(e)",
                "answer": "Klausa raise digunakan untuk memunculkan pengecualian secara manual. Contoh: raise ValueError('Angka harus positif').",
                "answer_code": "def check_positive(num):\n    if num < 0:\n        raise ValueError('Angka harus positif')\n\ntry:\n    check_positive(-5)\nexcept ValueError as e:\n    print(e)"
            },
            {
                "question": "Bagaimana cara menggunakan klausa assert di Python?",
                "question_code": "age = 18\nassert age >= 18, 'Usia harus 18 atau lebih'",
                "answer": "Klausa assert digunakan untuk melakukan pemeriksaan logika selama eksekusi program. Jika kondisi assert False, AssertionError akan dipicu. Contoh: assert age >= 18, 'Usia harus 18 atau lebih'.",
                "answer_code": "age = 18\nassert age >= 18, 'Usia harus 18 atau lebih'"
            }
        ]
    }
]
