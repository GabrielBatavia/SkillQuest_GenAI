[
    {
        "sumber": "pemrogramanpython.com",
        "penulis": "Siti Rahmawati",
        "tanggal": "2023-11-05",
        "judul": "Penggunaan Fungsi di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "fungsi", "dasar"],
        "konten": "Artikel ini mengulas cara mendefinisikan dan menggunakan fungsi di Python, mencakup parameter, pengembalian nilai, dan penggunaan fungsi bawaan.",
        "pertanyaan": [
            {
                "question": "Bagaimana cara membuat fungsi di Python?",
                "answer": "Anda bisa membuat fungsi dengan menggunakan kata kunci `def` diikuti dengan nama fungsi dan tanda kurung. Misalnya: `def my_function():`."
            },
            {
                "question": "Bagaimana cara memanggil fungsi di Python?",
                "answer": "Anda bisa memanggil fungsi dengan menulis nama fungsi diikuti dengan tanda kurung. Contohnya: `my_function()`."
            },
            {
                "question": "Bagaimana cara mendefinisikan fungsi dengan parameter di Python?",
                "answer": "Anda bisa mendefinisikan fungsi dengan parameter dengan menambahkan parameter di dalam tanda kurung setelah nama fungsi. Misalnya: `def my_function(param1, param2):`."
            },
            {
                "question": "Bagaimana cara mengembalikan nilai dari fungsi di Python?",
                "question_code": "def my_function():\n    return 42",
                "answer": "Anda bisa mengembalikan nilai dari fungsi dengan menggunakan kata kunci `return`. Contohnya: `return 42`.",
                "answer_code": "def my_function():\n    return 42"
            },
            {
                "question": "Bagaimana cara menggunakan fungsi bawaan `len()` di Python?",
                "question_code": "my_list = [1, 2, 3, 4]\nlength = len(my_list)",
                "answer": "Anda bisa menggunakan fungsi bawaan `len()` untuk mendapatkan panjang dari objek seperti list atau string. Contohnya: `len(my_list)`.",
                "answer_code": "length = len(my_list)"
            },
            {
                "question": "Bagaimana cara mendefinisikan fungsi dengan parameter default di Python?",
                "question_code": "def my_function(x, y=10):\n    return x + y",
                "answer": "Anda bisa mendefinisikan fungsi dengan parameter default dengan memberikan nilai default pada parameter. Contohnya: `def my_function(x, y=10):`.",
                "answer_code": "def my_function(x, y=10):\n    return x + y"
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `print()` di Python?",
                "question_code": "print('Hello, World!')",
                "answer": "Anda bisa menggunakan fungsi `print()` untuk mencetak teks atau nilai ke layar. Misalnya: `print('Hello, World!')`.",
                "answer_code": "print('Hello, World!')"
            },
            {
                "question": "Bagaimana cara mendefinisikan fungsi yang menerima banyak argumen di Python?",
                "question_code": "def my_function(*args):\n    for arg in args:\n        print(arg)",
                "answer": "Anda bisa mendefinisikan fungsi yang menerima banyak argumen dengan menggunakan tanda bintang `*` sebelum nama parameter. Contohnya: `def my_function(*args):`.",
                "answer_code": "def my_function(*args):\n    for arg in args:\n        print(arg)"
            },
            {
                "question": "Bagaimana cara mendefinisikan fungsi yang menerima banyak pasangan kunci-nilai di Python?",
                "question_code": "def my_function(**kwargs):\n    for key, value in kwargs.items():\n        print(key, value)",
                "answer": "Anda bisa mendefinisikan fungsi yang menerima banyak pasangan kunci-nilai dengan menggunakan dua tanda bintang `**` sebelum nama parameter. Contohnya: `def my_function(**kwargs):`.",
                "answer_code": "def my_function(**kwargs):\n    for key, value in kwargs.items():\n        print(key, value)"
            }
        ]
    },
    {
        "sumber": "pythontutorial.org",
        "penulis": "Ali Wijaya",
        "tanggal": "2024-02-15",
        "judul": "Struktur Kontrol Dasar di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "struktur kontrol", "dasar"],
        "konten": "Artikel ini menjelaskan tentang struktur kontrol dasar di Python, seperti if, else, elif, for loop, dan while loop.",
        "pertanyaan": [
            {
                "question": "Apa itu struktur kontrol if di Python?",
                "answer": "Struktur kontrol `if` digunakan untuk membuat keputusan berdasarkan kondisi tertentu. Jika kondisi benar, blok kode di dalam `if` akan dijalankan."
            },
            {
                "question": "Bagaimana cara menggunakan struktur kontrol if di Python?",
                "answer": "Anda bisa menggunakan struktur kontrol `if` dengan menuliskan `if` diikuti dengan kondisi dan blok kode. Contohnya: `if x > 0: print('x positif')`."
            },
            {
                "question": "Apa itu struktur kontrol else di Python?",
                "answer": "Struktur kontrol `else` digunakan untuk mengeksekusi blok kode jika kondisi `if` sebelumnya salah."
            },
            {
                "question": "Bagaimana cara menggunakan struktur kontrol else di Python?",
                "question_code": "if x > 0:\n    print('x positif')\nelse:\n    print('x tidak positif')",
                "answer": "Anda bisa menggunakan struktur kontrol `else` dengan menuliskan `else` diikuti dengan blok kode. Contohnya: `else: print('x tidak positif')`.",
                "answer_code": "if x > 0:\n    print('x positif')\nelse:\n    print('x tidak positif')"
            },
            {
                "question": "Apa itu struktur kontrol elif di Python?",
                "question_code": "if x > 0:\n    print('x positif')\nelif x == 0:\n    print('x nol')\nelse:\n    print('x negatif')",
                "answer": "Struktur kontrol `elif` digunakan untuk memeriksa kondisi lain jika kondisi `if` sebelumnya salah.",
                "answer_code": "elif x == 0:\n    print('x nol')"
            },
            {
                "question": "Bagaimana cara menggunakan for loop di Python?",
                "question_code": "for i in range(5):\n    print(i)",
                "answer": "Anda bisa menggunakan `for loop` untuk mengulang blok kode sejumlah item dalam urutan. Contohnya: `for i in range(5): print(i)`.",
                "answer_code": "for i in range(5):\n    print(i)"
            },
            {
                "question": "Bagaimana cara menggunakan while loop di Python?",
                "question_code": "while x < 5:\n    print(x)\n    x += 1",
                "answer": "Anda bisa menggunakan `while loop` untuk mengulang blok kode selama kondisi tertentu terpenuhi. Contohnya: `while x < 5: print(x)`.",
                "answer_code": "while x < 5:\n    print(x)\n    x += 1"
            },
            {
                "question": "Bagaimana cara menggunakan pernyataan break di dalam loop?",
                "question_code": "for i in range(10):\n    if i == 5:\n        break\n    print(i)",
                "answer": "Anda bisa menggunakan pernyataan `break` untuk menghentikan loop sebelum semua iterasi selesai. Contohnya: `if i == 5: break`.",
                "answer_code": "for i in range(10):\n    if i == 5:\n        break\n    print(i)"
            },
            {
                "question": "Bagaimana cara menggunakan pernyataan continue di dalam loop?",
                "question_code": "for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)",
                "answer": "Anda bisa menggunakan pernyataan `continue` untuk melewati iterasi saat ini dan melanjutkan ke iterasi berikutnya. Contohnya: `if i % 2 == 0: continue`.",
                "answer_code": "for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)"
            }
        ]
    }
]
