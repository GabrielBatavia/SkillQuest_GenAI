[
    {
        "sumber": "Python Basics",
        "penulis": "Jane Doe",
        "tanggal": "2024-07-26",
        "judul": "Memahami Fungsi len() pada List",
        "tingkat_kesulitan": "Pemula",
        "tag": ["Python", "Lists", "Error Handling"],
        "konten": "Panduan ini menjelaskan penggunaan fungsi len() dan menganalisis kesalahan umum yang mungkin terjadi saat menghitung panjang list.",
        "pertanyaan": [
            {
                "question": "Mengapa kode ini menghasilkan error?\n```python\nmy_list = [1, 2, 3]\nprint(len(my_list) + ' items')\n```",
                "question_code": "my_list = [1, 2, 3]\nprint(len(my_list) + ' items')",
                "answer": "Kode ini menghasilkan error karena Anda mencoba menambahkan integer hasil dari len() ke string. Anda perlu mengkonversi integer ke string sebelum melakukan penambahan.",
                "answer_code": "my_list = [1, 2, 3]\nprint(str(len(my_list)) + ' items')"
            },
            {
                "question": "Mengapa kode ini tidak memberikan hasil yang diharapkan?\n```python\nnested_list = [[1, 2], [3, 4, 5]]\nfor sub_list in nested_list:\n    print(len(sub_list) + 1)\n```",
                "question_code": "nested_list = [[1, 2], [3, 4, 5]]\nfor sub_list in nested_list:\n    print(len(sub_list) + 1)",
                "answer": "Kode ini tidak memberikan hasil yang diharapkan jika tujuan Anda adalah menghitung panjang total dari semua sub-list. Anda hanya menambahkan 1 pada setiap panjang sub-list, bukan menghitung total panjang.",
                "answer_code": "nested_list = [[1, 2], [3, 4, 5]]\ntotal_count = sum(len(sub_list) for sub_list in nested_list)\nprint(total_count)"
            },
            {
                "question": "Mengapa kode ini tidak berfungsi?\n```python\ndef get_list_length(lst):\n    return len(lst)\n\nprint(get_list_length())\n```",
                "question_code": "def get_list_length(lst):\n    return len(lst)\n\nprint(get_list_length())",
                "answer": "Kode ini tidak berfungsi karena fungsi `get_list_length` membutuhkan argumen tetapi tidak ada argumen yang diberikan saat memanggil fungsi. Anda perlu menyediakan argumen saat memanggil fungsi.",
                "answer_code": "def get_list_length(lst):\n    return len(lst)\n\nprint(get_list_length([1, 2, 3]))"
            },
            {
                "question": "Mengapa kode ini menampilkan hasil yang tidak sesuai?\n```python\nlist_with_none = [1, None, 2, None]\nprint(len(list_with_none) - list_with_none.count(None))\n```",
                "question_code": "list_with_none = [1, None, 2, None]\nprint(len(list_with_none) - list_with_none.count(None))",
                "answer": "Kode ini menampilkan hasil yang tidak sesuai jika Anda ingin menghitung panjang list termasuk elemen None. `len()` sudah menghitung semua elemen, termasuk None, jadi tidak perlu mengurangi jumlah elemen None.",
                "answer_code": "list_with_none = [1, None, 2, None]\nprint(len(list_with_none))"
            },
            {
                "question": "Mengapa kode ini tidak menghasilkan output yang diinginkan?\n```python\nsample_list = ['a', 'b', 'c']\nprint(len(sample_list) * 2)\n```",
                "question_code": "sample_list = ['a', 'b', 'c']\nprint(len(sample_list) * 2)",
                "answer": "Kode ini menghasilkan output yang benar, tetapi jika tujuan Anda adalah hanya menampilkan panjang list, Anda tidak perlu mengalikan dengan 2. Hasil len() sudah cukup untuk menghitung jumlah elemen.",
                "answer_code": "sample_list = ['a', 'b', 'c']\nprint(len(sample_list))"
            },
            {
                "question": "Mengapa kode ini tidak memberikan hasil yang sesuai?\n```python\nlist_elements = [10, 20, 30]\nprint('Total:', len(list_elements) / 2)\n```",
                "question_code": "list_elements = [10, 20, 30]\nprint('Total:', len(list_elements) / 2)",
                "answer": "Kode ini tidak memberikan hasil yang sesuai jika Anda ingin menampilkan jumlah elemen secara keseluruhan. Pembagian oleh 2 tidak diperlukan untuk mendapatkan panjang list.",
                "answer_code": "list_elements = [10, 20, 30]\nprint('Total:', len(list_elements))"
            },
            {
                "question": "Mengapa kode ini tidak memberikan hasil yang tepat?\n```python\nlist_check = ['one', 'two', 'three']\nif len(list_check) = 3:\n    print('List contains three elements')\n```",
                "question_code": "list_check = ['one', 'two', 'three']\nif len(list_check) = 3:\n    print('List contains three elements')",
                "answer": "Kode ini menghasilkan error karena menggunakan operator assignment `=` alih-alih operator perbandingan `==`. Anda perlu menggunakan `==` untuk memeriksa kesamaan.",
                "answer_code": "list_check = ['one', 'two', 'three']\nif len(list_check) == 3:\n    print('List contains three elements')"
            }
        ]
    },
    {
        "sumber": "Python for Beginners",
        "penulis": "Michael Green",
        "tanggal": "2024-07-27",
        "judul": "Dasar-Dasar Penggunaan len() pada List",
        "tingkat_kesulitan": "Pemula",
        "tag": ["Python", "Lists", "Error Handling"],
        "konten": "Buku ini membahas kesalahan umum dalam penggunaan fungsi len() dan cara memperbaikinya dengan memberikan berbagai contoh.",
        "pertanyaan": [
            {
                "question": "Mengapa kode ini memberikan hasil yang tidak diharapkan?\n```python\ndef count_elements(data_list):\n    return len(data_list) - 1\n\nprint(count_elements([1, 2, 3, 4]))\n```",
                "question_code": "def count_elements(data_list):\n    return len(data_list) - 1\n\nprint(count_elements([1, 2, 3, 4]))",
                "answer": "Kode ini memberikan hasil yang tidak diharapkan karena Anda mengurangi 1 dari hasil len(). Anda hanya perlu mengembalikan hasil dari len() tanpa modifikasi.",
                "answer_code": "def count_elements(data_list):\n    return len(data_list)\n\nprint(count_elements([1, 2, 3, 4]))"
            },
            {
                "question": "Mengapa kode ini tidak berjalan dengan benar?\n```python\nlist_of_strings = ['hello', 'world']\nprint(len(list_of_strings[1]))\n```",
                "question_code": "list_of_strings = ['hello', 'world']\nprint(len(list_of_strings[1]))",
                "answer": "Kode ini mencoba menghitung panjang dari elemen kedua list (yang merupakan string), yang benar. Jika Anda mendapatkan hasil yang tidak diharapkan, pastikan elemen yang dipilih adalah string.",
                "answer_code": "list_of_strings = ['hello', 'world']\nprint(len(list_of_strings[1]))  # Hasilnya adalah 5"
            },
            {
                "question": "Mengapa kode ini tidak mengembalikan hasil yang benar?\n```python\nempty_list = []\nprint(len(empty_list) + 1)\n```",
                "question_code": "empty_list = []\nprint(len(empty_list) + 1)",
                "answer": "Kode ini menambah 1 pada hasil len(). Jika Anda hanya ingin mengetahui panjang list, hasil dari len() sudah memadai.",
                "answer_code": "empty_list = []\nprint(len(empty_list))"
            },
            {
                "question": "Mengapa kode ini menampilkan hasil yang salah?\n```python\nlist_with_sublist = [[], [1, 2, 3]]\nfor sub_list in list_with_sublist:\n    print(len(sub_list) + 1)\n```",
                "question_code": "list_with_sublist = [[], [1, 2, 3]]\nfor sub_list in list_with_sublist:\n    print(len(sub_list) + 1)",
                "answer": "Kode ini menampilkan panjang setiap sub-list dengan tambahan 1, bukan total panjang dari semua sub-list. Anda perlu menjumlahkan panjang dari semua sub-list.",
                "answer_code": "list_with_sublist = [[], [1, 2, 3]]\ntotal_length = sum(len(sub_list) for sub_list in list_with_sublist)\nprint(total_length)"
            },
            {
                "question": "Mengapa kode ini tidak memberikan hasil yang diinginkan?\n```python\nnum_list = [5, 10, 15]\nprint(len(num_list) / 2)\n```",
                "question_code": "num_list = [5, 10, 15]\nprint(len(num_list) / 2)",
                "answer": "Kode ini membagi panjang list dengan 2, yang tidak diperlukan jika Anda hanya ingin menghitung panjang list. Gunakan `len()` langsung.",
                "answer_code": "num_list = [5, 10, 15]\nprint(len(num_list))"
            },
            {
                "question": "Mengapa kode ini menghasilkan error?\n```python\nlist_elements = [1, 2, 3, 4]\nif len(list_elements) == '4':\n    print('List has four elements')\n```",
                "question_code": "list_elements = [1, 2, 3, 4]\nif len(list_elements) == '4':\n    print('List has four elements')",
                "answer": "Kode ini menghasilkan error karena membandingkan integer hasil dari len() dengan string '4'. Anda harus membandingkan dengan integer.",
                "answer_code": "list_elements = [1, 2, 3, 4]\nif len(list_elements) == 4:\n    print('List has four elements')"
            }
        ]
    }
]
