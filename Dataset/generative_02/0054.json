[
    {
        "sumber": "pythonworld.com",
        "penulis": "Budi Santoso",
        "tanggal": "2023-06-22",
        "judul": "Memahami Konsep Loop dalam Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "loop", "fundamental"],
        "konten": "Artikel ini menguraikan cara kerja loop dalam Python, termasuk loop `for` dan `while`, serta bagaimana cara menghentikan loop menggunakan `break` dan melanjutkan iterasi dengan `continue`.",
        "pertanyaan": [
            {
                "question": "Apa yang dimaksud dengan loop `for` dalam Python?",
                "answer": "Loop `for` digunakan untuk melakukan iterasi atau perulangan pada elemen dalam sebuah koleksi, seperti list, tuple, atau string."
            },
            {
                "question": "Bagaimana cara membuat loop `for` di Python?",
                "answer": "Untuk membuat loop `for`, gunakan sintaks `for item in iterable:` yang diikuti dengan blok kode yang akan dieksekusi pada setiap iterasi. Contoh: `for i in range(5): print(i)`."
            },
            {
                "question": "Apa itu loop `while` dalam Python?",
                "answer": "Loop `while` akan terus menjalankan blok kode selama kondisi yang ditentukan bernilai benar."
            },
            {
                "question": "Bagaimana cara menulis loop `while` di Python?",
                "question_code": "while condition:\n    # kode yang akan diulang",
                "answer": "Loop `while` ditulis dengan sintaks `while condition:` diikuti dengan blok kode yang diulang selama kondisi bernilai benar. Contoh: `while x < 5: print(x)`.",
                "answer_code": "while condition:\n    # kode yang akan diulang"
            },
            {
                "question": "Bagaimana cara menghentikan loop lebih awal di Python?",
                "question_code": "for i in range(10):\n    if i == 5:\n        break\n    print(i)",
                "answer": "Untuk menghentikan loop lebih awal, gunakan pernyataan `break`. Contoh: `if i == 5: break`.",
                "answer_code": "for i in range(10):\n    if i == 5:\n        break\n    print(i)"
            },
            {
                "question": "Bagaimana cara melewati iterasi tertentu dalam loop?",
                "question_code": "for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)",
                "answer": "Gunakan pernyataan `continue` untuk melewati iterasi saat ini dan melanjutkan ke iterasi berikutnya. Contoh: `if i % 2 == 0: continue`.",
                "answer_code": "for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)"
            },
            {
                "question": "Bagaimana menggunakan loop bersarang dalam Python?",
                "question_code": "for i in range(3):\n    for j in range(3):\n        print(i, j)",
                "answer": "Loop bersarang melibatkan menempatkan satu loop di dalam loop lainnya. Contoh: `for i in range(3): for j in range(3):`.",
                "answer_code": "for i in range(3):\n    for j in range(3):\n        print(i, j)"
            },
            {
                "question": "Bagaimana cara mendapatkan indeks dari elemen dalam loop `for`?",
                "question_code": "for index, item in enumerate(iterable):\n    print(index, item)",
                "answer": "Gunakan fungsi `enumerate()` untuk mendapatkan indeks elemen dalam loop `for`. Contoh: `for index, item in enumerate(iterable):`.",
                "answer_code": "for index, item in enumerate(iterable):\n    print(index, item)"
            },
            {
                "question": "Bagaimana cara menggunakan pernyataan `else` dengan loop?",
                "question_code": "for item in iterable:\n    if condition:\n        break\nelse:\n    # kode yang dijalankan jika loop tidak terhenti oleh break",
                "answer": "Pernyataan `else` dalam loop digunakan untuk mengeksekusi blok kode jika loop selesai tanpa terhenti oleh `break`.",
                "answer_code": "for item in iterable:\n    if condition:\n        break\nelse:\n    # kode yang dijalankan jika loop tidak terhenti oleh break"
            }
        ]
    },
    {
        "sumber": "pythonbeginner.com",
        "penulis": "Rina Sari",
        "tanggal": "2023-11-15",
        "judul": "Mengenal Tuple dan Set dalam Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "tuple", "set"],
        "konten": "Artikel ini menjelaskan tentang penggunaan tuple dan set di Python, termasuk cara pembuatan, akses, dan manipulasi kedua struktur data tersebut.",
        "pertanyaan": [
            {
                "question": "Apa itu tuple dalam Python?",
                "answer": "Tuple adalah struktur data di Python yang mirip dengan list, tetapi bersifat immutable, artinya elemen di dalamnya tidak dapat diubah setelah tuple dibuat."
            },
            {
                "question": "Bagaimana cara membuat tuple di Python?",
                "answer": "Tuple dibuat dengan menggunakan tanda kurung `()` dan memisahkan elemen dengan koma. Contoh: `my_tuple = (1, 2, 3)`."
            },
            {
                "question": "Bagaimana cara mengakses elemen di dalam tuple?",
                "answer": "Untuk mengakses elemen dalam tuple, gunakan indeks. Contoh: `my_tuple[0]`."
            },
            {
                "question": "Bagaimana cara membuat tuple yang hanya memiliki satu elemen?",
                "question_code": "my_tuple = (1,)",
                "answer": "Untuk membuat tuple dengan satu elemen, tambahkan koma setelah elemen. Contoh: `my_tuple = (1,)`.",
                "answer_code": "my_tuple = (1,)"
            },
            {
                "question": "Apa itu set di Python?",
                "question_code": "my_set = {1, 2, 3}",
                "answer": "Set adalah struktur data yang menyimpan elemen unik dan tidak memiliki urutan tertentu. Contoh: `my_set = {1, 2, 3}`.",
                "answer_code": "my_set = {1, 2, 3}"
            },
            {
                "question": "Bagaimana cara menambahkan elemen ke set?",
                "question_code": "my_set.add(4)",
                "answer": "Untuk menambahkan elemen ke dalam set, gunakan metode `add()`. Contoh: `my_set.add(4)`.",
                "answer_code": "my_set.add(4)"
            },
            {
                "question": "Bagaimana cara menghapus elemen dari set?",
                "question_code": "my_set.remove(2)",
                "answer": "Gunakan metode `remove()` untuk menghapus elemen dari set. Contoh: `my_set.remove(2)`.",
                "answer_code": "my_set.remove(2)"
            },
            {
                "question": "Bagaimana melakukan operasi union pada dua set?",
                "question_code": "set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nunion_set = set1.union(set2)",
                "answer": "Untuk melakukan union pada dua set, gunakan metode `union()`. Contoh: `set1.union(set2)`.",
                "answer_code": "union_set = set1.union(set2)"
            },
            {
                "question": "Bagaimana cara mendapatkan irisan antara dua set?",
                "question_code": "set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nintersection_set = set1.intersection(set2)",
                "answer": "Gunakan metode `intersection()` untuk mendapatkan elemen yang terdapat pada kedua set. Contohnya: `set1.intersection(set2)`.",
                "answer_code": "intersection_set = set1.intersection(set2)"
            }
        ]
    }
]
