[
    {
        "sumber": "Python Data Structures",
        "penulis": "Rachel Green",
        "tanggal": "2024-08-05",
        "judul": "Menggunakan Berbagai Tipe Data dalam List Python",
        "tingkat_kesulitan": "Intermediate",
        "tag": ["Python", "Lists", "Data Types"],
        "konten": "Artikel ini membahas bagaimana cara menggunakan berbagai tipe data sebagai elemen dalam list di Python. Tipe data yang dapat digunakan mencakup integer, string, list lain, tuple, set, dan dictionary.",
        "pertanyaan": [
            {
                "question": "Bagaimana cara mendeklarasikan list yang berisi berbagai tipe data di Python?",
                "answer": "Anda dapat mendeklarasikan list dengan berbagai tipe data dengan menggunakan tanda kurung siku dan memisahkan setiap elemen dengan koma. Contoh: my_list = [1, 'hello', [2, 3], (4, 5), {6, 7}, {'key': 'value'}]"
            },
            {
                "question": "Mengapa penting untuk mengetahui bahwa list di Python dapat berisi berbagai tipe data?",
                "answer": "Mengetahui bahwa list di Python dapat berisi berbagai tipe data penting karena memberikan fleksibilitas dalam menyimpan dan memanipulasi data kompleks dalam satu struktur data tunggal."
            },
            {
                "question": "Bagaimana cara mengakses elemen tertentu dalam list yang berisi berbagai tipe data?",
                "answer": "Anda bisa mengakses elemen dalam list menggunakan indeks. Contoh: my_list[2] akan mengakses elemen ketiga dari my_list, yaitu [2, 3]."
            },
            {
                "question": "Kenapa terjadi error 'TypeError: unhashable type: 'list'', saya tidak paham?",
                "question_code": "my_list = [1, 'hello', [2, 3]]\nmy_set = {my_list}",
                "answer": "Kamu bisa mengatasi error ini dengan memastikan bahwa semua elemen dalam set adalah hashable. List tidak bisa menjadi elemen dari set karena tidak hashable.",
                "answer_code": "my_list = [1, 'hello', (2, 3)]\nmy_set = {1, 'hello', (2, 3)}"
            },
            {
                "question": "Kenapa terjadi error 'ValueError: dictionary update sequence element #0 has length 1; 2 is required', saya tidak paham?",
                "question_code": "my_dict = dict([1, 'one'])",
                "answer": "Kamu bisa mengatasi error ini dengan memastikan bahwa setiap elemen yang digunakan untuk menginisialisasi dictionary adalah pasangan kunci-nilai. Gunakan tuple untuk setiap pasangan.",
                "answer_code": "my_dict = dict([(1, 'one')])"
            },
            {
                "question": "Kenapa terjadi error 'TypeError: 'tuple' object does not support item assignment', saya tidak paham?",
                "question_code": "my_tuple = (1, 2, 3)\nmy_tuple[0] = 4",
                "answer": "Kamu bisa mengatasi error ini dengan tidak mencoba mengubah elemen dalam tuple karena tuple bersifat immutable. Gunakan list jika elemen perlu diubah.",
                "answer_code": "my_list = [1, 2, 3]\nmy_list[0] = 4"
            },
            {
                "question": "Kenapa terjadi error 'KeyError: 'key'', saya tidak paham?",
                "question_code": "my_dict = {'key1': 'value1'}\nprint(my_dict['key2'])",
                "answer": "Kamu bisa mengatasi error ini dengan memastikan kunci yang diakses ada dalam dictionary. Gunakan metode get() untuk menghindari error jika kunci tidak ada.",
                "answer_code": "my_dict = {'key1': 'value1'}\nprint(my_dict.get('key2', 'default_value'))"
            },
            {
                "question": "Kenapa terjadi error 'IndexError: list index out of range', saya tidak paham?",
                "question_code": "my_list = [1, 'hello', (2, 3)]\nprint(my_list[3])",
                "answer": "Kamu bisa mengatasi error ini dengan memastikan indeks yang diakses berada dalam rentang list. Indeks dimulai dari 0, jadi indeks maksimum untuk list ini adalah 2.",
                "answer_code": "my_list = [1, 'hello', (2, 3)]\nprint(my_list[2])"
            },
            {
                "question": "Kenapa terjadi error 'TypeError: 'int' object is not iterable', saya tidak paham?",
                "question_code": "my_list = [1, 'hello', (2, 3)]\nfor i in 1:\n    print(i)",
                "answer": "Kamu bisa mengatasi error ini dengan memastikan bahwa objek yang diiterasi adalah list atau objek iterable lainnya, bukan integer.",
                "answer_code": "my_list = [1, 'hello', (2, 3)]\nfor i in my_list:\n    print(i)"
            }
        ]
    },
    {
        "sumber": "Advanced Python Programming",
        "penulis": "Tom Hanks",
        "tanggal": "2024-08-06",
        "judul": "Menggunakan Berbagai Tipe Data sebagai Elemen dalam List Python",
        "tingkat_kesulitan": "Advanced",
        "tag": ["Python", "Lists", "Data Types"],
        "konten": "Panduan ini memberikan penjelasan mendalam tentang penggunaan berbagai tipe data sebagai elemen dalam list di Python, termasuk integer, string, list lain, tuple, set, dan dictionary.",
        "pertanyaan": [
            {
                "question": "Bagaimana cara membuat list dengan elemen dari berbagai tipe data di Python?",
                "answer": "Anda dapat membuat list dengan elemen dari berbagai tipe data menggunakan tanda kurung siku. Contoh: mixed_list = [100, 'Python', [10, 20], (30, 40), {50, 60}, {'name': 'Alice'}]"
            },
            {
                "question": "Apa keuntungan menggunakan list yang berisi berbagai tipe data di Python?",
                "answer": "Menggunakan list yang berisi berbagai tipe data memberikan fleksibilitas dalam menyimpan dan memanipulasi data yang kompleks dan heterogen dalam satu struktur data tunggal."
            },
            {
                "question": "Bagaimana cara mengakses dan memanipulasi elemen dalam list yang berisi berbagai tipe data?",
                "answer": "Anda bisa mengakses elemen dalam list menggunakan indeks. Contoh: mixed_list[3] akan mengakses elemen tuple (30, 40). Untuk memanipulasi elemen, pastikan tipe data mendukung operasi yang diinginkan."
            },
            {
                "question": "Kenapa terjadi error 'TypeError: unhashable type: 'list'', saya tidak paham?",
                "question_code": "mixed_list = [1, 'hello', [2, 3]]\nmy_set = {mixed_list}",
                "answer": "Kamu bisa mengatasi error ini dengan memastikan bahwa semua elemen dalam set adalah hashable. List tidak bisa menjadi elemen dari set karena tidak hashable.",
                "answer_code": "mixed_list = [1, 'hello', (2, 3)]\nmy_set = {1, 'hello', (2, 3)}"
            },
            {
                "question": "Kenapa terjadi error 'ValueError: dictionary update sequence element #0 has length 1; 2 is required', saya tidak paham?",
                "question_code": "my_dict = dict([1, 'one'])",
                "answer": "Kamu bisa mengatasi error ini dengan memastikan bahwa setiap elemen yang digunakan untuk menginisialisasi dictionary adalah pasangan kunci-nilai. Gunakan tuple untuk setiap pasangan.",
                "answer_code": "my_dict = dict([(1, 'one')])"
            },
            {
                "question": "Kenapa terjadi error 'TypeError: 'tuple' object does not support item assignment', saya tidak paham?",
                "question_code": "my_tuple = (10, 20, 30)\nmy_tuple[1] = 40",
                "answer": "Kamu bisa mengatasi error ini dengan tidak mencoba mengubah elemen dalam tuple karena tuple bersifat immutable. Gunakan list jika elemen perlu diubah.",
                "answer_code": "my_list = [10, 20, 30]\nmy_list[1] = 40"
            },
            {
                "question": "Kenapa terjadi error 'KeyError: 'key'', saya tidak paham?",
                "question_code": "my_dict = {'key1': 'value1'}\nprint(my_dict['key2'])",
                "answer": "Kamu bisa mengatasi error ini dengan memastikan kunci yang diakses ada dalam dictionary. Gunakan metode get() untuk menghindari error jika kunci tidak ada.",
                "answer_code": "my_dict = {'key1': 'value1'}\nprint(my_dict.get('key2', 'default_value'))"
            },
            {
                "question": "Kenapa terjadi error 'IndexError: list index out of range', saya tidak paham?",
                "question_code": "mixed_list = [100, 'Python', (30, 40)]\nprint(mixed_list[5])",
                "answer": "Kamu bisa mengatasi error ini dengan memastikan indeks yang diakses berada dalam rentang list. Indeks dimulai dari 0, jadi indeks maksimum untuk list ini adalah 2.",
                "answer_code": "mixed_list = [100, 'Python', (30, 40)]\nprint(mixed_list[2])"
            },
            {
                "question": "Kenapa terjadi error 'TypeError: 'int' object is not iterable', saya tidak paham?",
                "question_code": "mixed_list = [100, 'Python', (30, 40)]\nfor i in 100:\n    print(i)",
                "answer": "Kamu bisa mengatasi error ini dengan memastikan bahwa objek yang diiterasi adalah list atau objek iterable lainnya, bukan integer.",
                "answer_code": "mixed_list = [100, 'Python', (30, 40)]\nfor i in mixed_list:\n    print(i)"
            }
        ]
    }
]
