[
    {
        "sumber": "advancedpythonpro.com",
        "penulis": "Ahmad Fauzi",
        "tanggal": "2024-12-15",
        "judul": "Metaprogramming dengan Metaclasses di Python",
        "tingkat_kesulitan": "Lanjut",
        "tag": ["python", "metaclasses", "metaprogramming", "lanjut"],
        "konten": "Artikel ini menjelaskan cara menggunakan metaclasses di Python untuk metaprogramming dan bagaimana mereka memungkinkan Anda untuk memodifikasi perilaku class secara dinamis.",
        "pertanyaan": [
            {
                "question": "Saya benar-benar bingung tentang apa itu metaclass di Python. Bisakah Anda menjelaskan dengan cara yang sangat sederhana apa itu metaclass dan bagaimana saya bisa mendefinisikannya untuk memodifikasi class secara dinamis? Mungkin Anda bisa memberikan contoh yang sangat mudah dipahami?",
                "answer": "Metaclass adalah class dari class yang mendefinisikan bagaimana class lain berperilaku. Anda bisa menggunakan metaclass untuk memodifikasi pembuatan class secara dinamis. Berikut contoh mendefinisikan metaclass yang menambahkan atribut baru ke class:",
                "question_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        dct['new_attr'] = 'Added by Meta'\n        return super().__new__(cls, name, bases, dct)\n\nclass ExampleClass(metaclass=Meta):\n    pass",
                "answer_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        dct['new_attr'] = 'Added by Meta'\n        return super().__new__(cls, name, bases, dct)\n\nclass ExampleClass(metaclass=Meta):\n    pass\n\nprint(ExampleClass.new_attr)"
            },
            {
                "question": "Saya mencoba memahami bagaimana metaclasses bisa memodifikasi perilaku class di Python. Bisakah Anda memberikan contoh tentang bagaimana menambahkan metode baru ke class menggunakan metaclass? Saya ingin benar-benar memahami bagaimana cara kerjanya.",
                "answer": "Untuk menambahkan metode baru ke class menggunakan metaclass, Anda bisa mendefinisikan metaclass yang menambahkan metode ke dictionary atribut dalam metode `__new__`. Contoh berikut menunjukkan bagaimana menambahkan metode baru:",
                "question_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        def new_method(self):\n            return 'Metaclass added this method'\n        dct['new_method'] = new_method\n        return super().__new__(cls, name, bases, dct)\n\nclass AnotherExample(metaclass=Meta):\n    pass\n\nobj = AnotherExample()\nprint(obj.new_method())",
                "answer_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        def new_method(self):\n            return 'Metaclass added this method'\n        dct['new_method'] = new_method\n        return super().__new__(cls, name, bases, dct)\n\nclass AnotherExample(metaclass=Meta):\n    pass\n\nobj = AnotherExample()\nprint(obj.new_method())"
            }
        ]
    },
    {
        "sumber": "pythonadvancedtopics.com",
        "penulis": "Lina Wibowo",
        "tanggal": "2024-12-20",
        "judul": "Pemrograman Asinkron dengan Asyncio di Python",
        "tingkat_kesulitan": "Lanjut",
        "tag": ["python", "asyncio", "asynchronous", "lanjut"],
        "konten": "Artikel ini menjelaskan cara menggunakan modul asyncio di Python untuk pemrograman asinkron dan bagaimana memanfaatkan coroutine, tasks, dan event loop.",
        "pertanyaan": [
            {
                "question": "Saya baru saja mulai belajar tentang asyncio di Python dan saya merasa sangat bingung tentang bagaimana cara kerjanya. Bisakah Anda menjelaskan dengan sederhana apa itu asyncio dan bagaimana saya bisa mendefinisikan coroutine menggunakan async/await? Contoh yang sangat mudah dipahami akan sangat membantu.",
                "answer": "Asyncio adalah modul standar Python yang menyediakan infrastruktur untuk penulisan kode asinkron menggunakan sintaks async/await. Anda bisa mendefinisikan coroutine dengan kata kunci `async` sebelum definisi fungsi dan `await` untuk panggilan fungsi asinkron. Berikut adalah contoh dasar:",
                "question_code": "import asyncio\n\nasync def my_coroutine():\n    await asyncio.sleep(1)\n    print('Coroutine executed')\n\nasyncio.run(my_coroutine())",
                "answer_code": "import asyncio\n\nasync def my_coroutine():\n    await asyncio.sleep(1)\n    print('Coroutine executed')\n\nasyncio.run(my_coroutine())"
            },
            {
                "question": "Saya masih mencoba memahami cara menjalankan coroutine dengan event loop di Python. Bisa Anda jelaskan langkah-langkahnya dan mungkin memberikan contoh sederhana? Saya ingin memastikan saya benar-benar mengerti dasar-dasar ini.",
                "answer": "Anda bisa menjalankan coroutine dengan event loop menggunakan fungsi `asyncio.run`. Event loop mengatur eksekusi coroutine dan I/O secara asinkron. Berikut adalah contoh sederhana bagaimana menjalankan coroutine dengan event loop:",
                "question_code": "import asyncio\n\nasync def greet():\n    await asyncio.sleep(1)\n    print('Hello, World!')\n\nasyncio.run(greet())",
                "answer_code": "import asyncio\n\nasync def greet():\n    await asyncio.sleep(1)\n    print('Hello, World!')\n\nasyncio.run(greet())"
            },
            {
                "question": "Saya penasaran bagaimana cara membuat dan menjalankan beberapa tasks sekaligus dengan asyncio di Python. Bisa Anda menunjukkan bagaimana caranya dengan contoh yang mudah dipahami? Saya ingin mencoba menjalankan beberapa tugas secara bersamaan.",
                "answer": "Untuk membuat dan menjalankan beberapa tasks sekaligus dengan asyncio, Anda bisa menggunakan `asyncio.create_task` dan `asyncio.gather`. Berikut adalah contoh bagaimana melakukannya:",
                "question_code": "import asyncio\n\nasync def print_number(number):\n    await asyncio.sleep(1)\n    print(f'Number: {number}')\n\nasync def main():\n    tasks = [asyncio.create_task(print_number(i)) for i in range(3)]\n    await asyncio.gather(*tasks)\n\nasyncio.run(main())",
                "answer_code": "import asyncio\n\nasync def print_number(number):\n    await asyncio.sleep(1)\n    print(f'Number: {number}')\n\nasync def main():\n    tasks = [asyncio.create_task(print_number(i)) for i in range(3)]\n    await asyncio.gather(*tasks)\n\nasyncio.run(main())"
            },
            {
                "question": "Saya ingin tahu bagaimana cara menggunakan asyncio.Queue untuk komunikasi antar coroutines di Python. Bagaimana cara mengimplementasikan producer dan consumer menggunakan asyncio.Queue? Tolong beri contoh yang jelas agar saya bisa memahaminya.",
                "answer": "Anda bisa menggunakan `asyncio.Queue` untuk komunikasi antar coroutines dengan metode `put` dan `get`. Berikut adalah contoh implementasi producer dan consumer menggunakan `asyncio.Queue`:",
                "question_code": "import asyncio\n\nasync def producer(queue):\n    for i in range(5):\n        await asyncio.sleep(1)\n        await queue.put(i)\n        print(f'Produced {i}')\n\nasync def consumer(queue):\n    while True:\n        item = await queue.get()\n        if item is None:\n            break\n        print(f'Consumed {item}')\n\nasync def main():\n    queue = asyncio.Queue()\n    producer_task = asyncio.create_task(producer(queue))\n    consumer_task = asyncio.create_task(consumer(queue))\n    await producer_task\n    await queue.put(None)\n    await consumer_task\n\nasyncio.run(main())",
                "answer_code": "import asyncio\n\nasync def producer(queue):\n    for i in range(5):\n        await asyncio.sleep(1)\n        await queue.put(i)\n        print(f'Produced {i}')\n\nasync def consumer(queue):\n    while True:\n        item = await queue.get()\n        if item is None:\n            break\n        print(f'Consumed {item}')\n\nasync def main():\n    queue = asyncio.Queue()\n    producer_task = asyncio.create_task(producer(queue))\n    consumer_task = asyncio.create_task(consumer(queue))\n    await producer_task\n    await queue.put(None)\n    await consumer_task\n\nasyncio.run(main())"
            },
            {
                "question": "Saya sedang belajar tentang asyncio di Python dan ingin tahu bagaimana cara menangani timeout dalam coroutine. Bagaimana cara menetapkan batas waktu untuk eksekusi coroutine dan menangani timeout jika coroutine tersebut berjalan terlalu lama? Tolong beri contoh yang mudah dipahami.",
                "answer": "Anda bisa menangani timeout dalam coroutine menggunakan fungsi `asyncio.wait_for` dan menentukan batas waktu untuk eksekusi coroutine. Berikut adalah contoh cara menetapkan timeout dan menangani timeout error:",
                "question_code": "import asyncio\n\nasync def long_running_task():\n    await asyncio.sleep(10)\n\nasync def main():\n    try:\n        await asyncio.wait_for(long_running_task(), timeout=3)\n    except asyncio.TimeoutError:\n        print('The task timed out')\n\nasyncio.run(main())",
                "answer_code": "import asyncio\n\nasync def long_running_task():\n    await asyncio.sleep(10)\n\nasync def main():\n    try:\n        await asyncio.wait_for(long_running_task(), timeout=3)\n    except asyncio.TimeoutError:\n        print('The task timed out')\n\nasyncio.run(main())"
            }
        ]
    }
]
