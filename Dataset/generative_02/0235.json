[
    {
        "sumber": "Blog Python Pemula",
        "penulis": "Dewi Lestari",
        "tanggal": "2023-05-12",
        "judul": "Memulai dengan Python: Panduan Dasar",
        "tingkat_kesulitan": "Pemula",
        "tag": ["pemula", "dasar", "python"],
        "konten": "Artikel ini menjelaskan langkah-langkah dasar untuk memulai belajar Python, termasuk instalasi dan menulis skrip sederhana.",
        "pertanyaan": [
            {
                "question": "Bagaimana cara mencetak teks ke layar di Python?",
                "answer": "Anda bisa menggunakan fungsi `print()` untuk mencetak teks ke layar. Contohnya: `print('Hello, World!')`."
            },
            {
                "question": "Bagaimana cara menginstal Python?",
                "answer": "Anda bisa mengunduh Python dari situs resmi python.org dan mengikuti petunjuk instalasi sesuai sistem operasi Anda."
            },
            {
                "question": "Apa itu SyntaxError?",
                "answer": "SyntaxError terjadi ketika ada kesalahan dalam penulisan kode Python. Pastikan semua tanda kutip dan kurung ditutup dengan benar."
            },
            {
                "question": "Bagaimana cara menulis skrip Python pertama?",
                "question_code": "print('Hello, World!')",
                "answer": "Anda bisa menulis skrip Python pertama dengan menggunakan fungsi `print()`. Contohnya: `print('Hello, World!')`."
            },
            {
                "question": "Bagaimana cara menangani SyntaxError?",
                "question_code": "print('Hello World!)",
                "answer": "Pastikan semua tanda kutip dan kurung ditutup dengan benar. Contohnya: `print('Hello, World!')`."
            },
            {
                "question": "Apa itu komentar dalam Python?",
                "question_code": "# Ini adalah komentar",
                "answer": "Komentar digunakan untuk menambahkan catatan atau deskripsi dalam kode. Diawali dengan tanda `#`."
            },
            {
                "question": "Bagaimana cara menambahkan komentar di Python?",
                "question_code": "# Ini adalah komentar\nprint('Hello, World!')",
                "answer": "Anda bisa menambahkan komentar dengan menggunakan tanda `#` di awal baris. Contohnya: `# Ini adalah komentar`.",
                "answer_code": "# Ini adalah komentar\nprint('Hello, World!')"
            },
            {
                "question": "Bagaimana cara membuat variabel di Python?",
                "question_code": "x = 5\ny = 10\nprint(x + y)",
                "answer": "Anda bisa membuat variabel dengan memberi nilai langsung. Contohnya: `x = 5`.",
                "answer_code": "x = 5\ny = 10\nprint(x + y)"
            },
            {
                "question": "Bagaimana cara mengubah tipe data di Python?",
                "question_code": "a = 5\nb = str(a)\nprint(b)",
                "answer": "Anda bisa mengubah tipe data dengan menggunakan fungsi bawaan seperti `str()`, `int()`, dan `float()`. Contohnya: `b = str(a)`.",
                "answer_code": "a = 5\nb = str(a)\nprint(b)"
            }
        ]
    },
    {
        "sumber": "BelajarPython.com",
        "penulis": "Ahmad Fauzi",
        "tanggal": "2022-11-20",
        "judul": "Pemrograman Berorientasi Objek dengan Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["OOP", "kelas", "python"],
        "konten": "Artikel ini membahas konsep dasar pemrograman berorientasi objek (OOP) dan bagaimana menerapkannya dalam Python.",
        "pertanyaan": [
            {
                "question": "Apa itu kelas dalam Python?",
                "answer": "Kelas adalah blueprint untuk membuat objek. Kelas mendefinisikan atribut dan metode yang dimiliki oleh objek."
            },
            {
                "question": "Bagaimana cara mendefinisikan kelas di Python?",
                "answer": "Anda bisa mendefinisikan kelas dengan menggunakan kata kunci `class`. Contohnya: `class Hewan:`."
            },
            {
                "question": "Apa itu objek dalam Python?",
                "answer": "Objek adalah instance dari kelas. Contohnya: `kucing = Hewan('Kucing')`."
            },
            {
                "question": "Bagaimana cara membuat objek dari kelas di Python?",
                "question_code": "class Hewan:\n    def __init__(self, nama):\n        self.nama = nama\n\nkucing = Hewan('Kucing')\nprint(kucing.nama)",
                "answer": "Anda bisa membuat objek dengan memanggil kelas seperti fungsi. Contohnya: `kucing = Hewan('Kucing')`."
            },
            {
                "question": "Apa itu AttributeError?",
                "question_code": "print(kucing.umur)",
                "answer": "AttributeError terjadi ketika mencoba mengakses atribut yang tidak ada. Pastikan atribut yang diakses sudah didefinisikan dalam kelas."
            },
            {
                "question": "Bagaimana cara mendefinisikan metode di kelas Python?",
                "question_code": "class Hewan:\n    def __init__(self, nama):\n        self.nama = nama\n\n    def suara(self):\n        return 'Suara hewan'",
                "answer": "Anda bisa mendefinisikan metode dalam kelas dengan menggunakan kata kunci `def`. Contohnya: `def suara(self):`."
            },
            {
                "question": "Bagaimana cara mengakses metode objek di Python?",
                "question_code": "kucing.suara()",
                "answer": "Anda bisa mengakses metode objek dengan menggunakan notasi titik. Contohnya: `kucing.suara()`.",
                "answer_code": "class Hewan:\n    def __init__(self, nama):\n        self.nama = nama\n\n    def suara(self):\n        return 'Suara hewan'\n\nkucing = Hewan('Kucing')\nprint(kucing.suara())"
            },
            {
                "question": "Bagaimana cara menggunakan pewarisan di Python?",
                "question_code": "class Kucing(Hewan):\n    def __init__(self, nama, warna):\n        super().__init__(nama)\n        self.warna = warna",
                "answer": "Pewarisan memungkinkan kelas anak mewarisi atribut dan metode dari kelas induk. Contohnya: `class Kucing(Hewan):`.",
                "answer_code": "class Hewan:\n    def __init__(self, nama):\n        self.nama = nama\n\nclass Kucing(Hewan):\n    def __init__(self, nama, warna):\n        super().__init__(nama)\n        self.warna = warna\n\nkucing = Kucing('Kitty', 'Putih')\nprint(kucing.nama, kucing.warna)"
            },
            {
                "question": "Bagaimana cara mengakses atribut dari kelas induk di Python?",
                "question_code": "class Kucing(Hewan):\n    def __init__(self, nama, warna):\n        super().__init__(nama)\n        self.warna = warna",
                "answer": "Anda bisa mengakses atribut dari kelas induk dengan menggunakan `super()`. Contohnya: `super().__init__(nama)`.",
                "answer_code": "class Hewan:\n    def __init__(self, nama):\n        self.nama = nama\n\nclass Kucing(Hewan):\n    def __init__(self, nama, warna):\n        super().__init__(nama)\n        self.warna = warna\n\nkucing = Kucing('Kitty', 'Putih')\nprint(kucing.nama, kucing.warna)"
            }
        ]
    }
]