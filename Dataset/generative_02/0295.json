[
    {
        "sumber": "pythontips.com",
        "penulis": "Ari Wijaya",
        "tanggal": "2024-12-20",
        "judul": "Penggunaan Fungsi Sorted dan Lambda di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "sorted", "lambda", "menengah"],
        "konten": "Artikel ini menjelaskan cara menggunakan fungsi `sorted` bersama dengan fungsi lambda di Python untuk mengurutkan list dan iterable lainnya.",
        "pertanyaan": [
            {
                "question": "Saya baru belajar Python dan mendengar ada fungsi `sorted`. Apa sebenarnya fungsi ini dan bagaimana cara kerjanya?",
                "answer": "Fungsi `sorted` digunakan untuk mengurutkan elemen-elemen dari iterable seperti list dan mengembalikan list baru yang sudah diurutkan."
            },
            {
                "question": "Bisa berikan contoh sederhana bagaimana cara menggunakan fungsi `sorted` untuk mengurutkan list? Saya ingin melihat bagaimana ini bekerja.",
                "question_code": "numbers = [8, 2, 5, 3]\nsorted_numbers = sorted(numbers)",
                "answer": "Tentu, Anda bisa menggunakan fungsi `sorted` dengan memberikan list sebagai argumen. Contohnya: `sorted(numbers)` akan mengurutkan list `numbers` dalam urutan menaik.",
                "answer_code": "numbers = [8, 2, 5, 3]\nsorted_numbers = sorted(numbers)"
            },
            {
                "question": "Bagaimana jika saya ingin mengurutkan list secara terbalik menggunakan fungsi `sorted`? Bisa dijelaskan caranya?",
                "question_code": "data = [3, 1, 4, 1, 5]\nreverse_sorted_data = sorted(data, reverse=True)",
                "answer": "Anda bisa menggunakan parameter `reverse=True` dengan fungsi `sorted` untuk mengurutkan elemen-elemen dalam urutan menurun. Contohnya: `sorted(data, reverse=True)`.",
                "answer_code": "data = [3, 1, 4, 1, 5]\nreverse_sorted_data = sorted(data, reverse=True)"
            },
            {
                "question": "Saya dengar kita bisa menggunakan fungsi lambda dengan `sorted` untuk mengurutkan berdasarkan panjang string. Bagaimana caranya?",
                "question_code": "strings = ['short', 'tiny', 'lengthier', 'longest']\nsorted_strings = sorted(strings, key=lambda s: len(s))",
                "answer": "Benar, Anda bisa menggunakan fungsi `sorted` dengan parameter `key` yang diisi dengan fungsi lambda untuk menentukan kunci pengurutan. Contohnya: `sorted(strings, key=lambda s: len(s))`.",
                "answer_code": "strings = ['short', 'tiny', 'lengthier', 'longest']\nsorted_strings = sorted(strings, key=lambda s: len(s))"
            },
            {
                "question": "Bisakah Anda jelaskan bagaimana cara menggunakan fungsi `sorted` untuk mengurutkan dictionary berdasarkan nilai di Python? Saya belum memahami konsepnya.",
                "question_code": "grades = {'Alice': 88, 'Bob': 95, 'Charlie': 70}\nsorted_grades = sorted(grades.items(), key=lambda item: item[1])",
                "answer": "Anda bisa menggunakan fungsi `sorted` dengan `items()` dan lambda untuk mengurutkan dictionary berdasarkan nilai. Contohnya: `sorted(grades.items(), key=lambda item: item[1])`.",
                "answer_code": "grades = {'Alice': 88, 'Bob': 95, 'Charlie': 70}\nsorted_grades = sorted(grades.items(), key=lambda item: item[1])"
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `sorted` untuk mengurutkan list of dictionaries di Python? Bisa berikan penjelasan dan contohnya?",
                "question_code": "people = [{'name': 'Anna', 'age': 28}, {'name': 'Brian', 'age': 32}, {'name': 'Cathy', 'age': 25}]\nsorted_people = sorted(people, key=lambda person: person['age'])",
                "answer": "Anda bisa menggunakan fungsi `sorted` dengan lambda untuk mengurutkan list of dictionaries berdasarkan nilai tertentu. Contohnya: `sorted(people, key=lambda person: person['age'])`.",
                "answer_code": "people = [{'name': 'Anna', 'age': 28}, {'name': 'Brian', 'age': 32}, {'name': 'Cathy', 'age': 25}]\nsorted_people = sorted(people, key=lambda person: person['age'])"
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `sorted` dengan multiple keys di Python? Bisa diberikan contoh yang mudah dimengerti?",
                "question_code": "students = [{'name': 'David', 'score': 75}, {'name': 'Ella', 'score': 75}, {'name': 'Frank', 'score': 90}]\nsorted_students = sorted(students, key=lambda student: (student['score'], student['name']))",
                "answer": "Anda bisa menggunakan fungsi `sorted` dengan multiple keys dengan menggunakan tuple di dalam lambda. Contohnya: `sorted(students, key=lambda student: (student['score'], student['name']))` akan mengurutkan list `students` berdasarkan `score` dan kemudian `name`.",
                "answer_code": "students = [{'name': 'David', 'score': 75}, {'name': 'Ella', 'score': 75}, {'name': 'Frank', 'score': 90}]\nsorted_students = sorted(students, key=lambda student: (student['score'], student['name']))"
            }
        ]
    },
    {
        "sumber": "pythonadvancedguide.com",
        "penulis": "Sari Indah",
        "tanggal": "2024-12-22",
        "judul": "Penggunaan Fungsi Enumerate di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "enumerate", "menengah"],
        "konten": "Artikel ini menjelaskan cara menggunakan fungsi `enumerate` di Python untuk iterasi yang lebih efisien dan efektif dengan menambahkan penghitung ke dalam iterable.",
        "pertanyaan": [
            {
                "question": "Saya baru belajar pemrograman dan tidak mengerti tentang fungsi `enumerate` di Python. Bisa dijelaskan apa itu dan bagaimana cara kerjanya?",
                "answer": "Fungsi `enumerate` digunakan untuk menambahkan penghitung ke iterable seperti list dan mengembalikan objek enumerate yang menghasilkan tuple berisi indeks dan elemen dari iterable tersebut."
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `enumerate` di Python? Bisa berikan contoh sederhana?",
                "question_code": "items = ['apple', 'banana', 'cherry']\nfor index, item in enumerate(items):\n    print(index, item)",
                "answer": "Anda bisa menggunakan fungsi `enumerate` dengan memanggilnya pada iterable dan menggunakannya dalam loop. Contohnya: `for index, item in enumerate(items): print(index, item)`.",
                "answer_code": "items = ['apple', 'banana', 'cherry']\nfor index, item in enumerate(items):\n    print(index, item)"
            },
            {
                "question": "Bagaimana cara memulai penghitung dari angka tertentu menggunakan fungsi `enumerate` di Python? Tolong beri contoh.",
                "question_code": "fruits = ['mango', 'orange', 'grape']\nfor idx, fruit in enumerate(fruits, start=10):\n    print(idx, fruit)",
                "answer": "Anda bisa menggunakan parameter `start` dengan fungsi `enumerate` untuk menentukan nilai awal penghitung. Contohnya: `for idx, fruit in enumerate(fruits, start=10): print(idx, fruit)` akan memulai penghitung dari 10.",
                "answer_code": "fruits = ['mango', 'orange', 'grape']\nfor idx, fruit in enumerate(fruits, start=10):\n    print(idx, fruit)"
            },
            {
                "question": "Bisakah Anda menjelaskan bagaimana menggunakan fungsi `enumerate` dengan list comprehension untuk membuat list of tuples dengan indeks dan nilai?",
                "question_code": "languages = ['Python', 'Java', 'C++']\nindexed_languages = [(i, lang) for i, lang in enumerate(languages)]",
                "answer": "Anda bisa menggunakan fungsi `enumerate` dengan list comprehension untuk membuat list of tuples yang berisi indeks dan nilai. Contohnya: `[(i, lang) for i, lang in enumerate(languages)]`.",
                "answer_code": "languages = ['Python', 'Java', 'C++']\nindexed_languages = [(i, lang) for i, lang in enumerate(languages)]"
            },
            {
                "question": "Bagaimana caranya menggunakan fungsi `enumerate` dengan dictionary di Python untuk membuat dictionary baru dengan indeks sebagai key? Tolong beri contoh.",
                "question_code": "items = {'milk': 2, 'bread': 1, 'butter': 5}\nindexed_items = {i: key for i, key in enumerate(items.keys())}",
                "answer": "Anda bisa menggunakan fungsi `enumerate` dengan dictionary untuk membuat dictionary baru yang berisi indeks sebagai key dan nilai dictionary asli sebagai value. Contohnya: `{i: key for i, key in enumerate(items.keys())}`.",
                "answer_code": "items = {'milk': 2, 'bread': 1, 'butter': 5}\nindexed_items = {i: key for i, key in enumerate(items.keys())}"
            },
            {
                "question": "Apakah mungkin menggunakan fungsi `enumerate` dengan string di Python? Jika ya, bagaimana caranya?",
                "question_code": "greeting = 'hello'\nenum_greeting = [(i, char) for i, char in enumerate(greeting)]",
                "answer": "Ya, Anda bisa menggunakan fungsi `enumerate` dengan string untuk membuat list of tuples yang berisi indeks dan karakter. Contohnya: `[(i, char) for i, char in enumerate(greeting)]`.",
                "answer_code": "greeting = 'hello'\nenum_greeting = [(i, char) for i, char in enumerate(greeting)]"
            },
            {
                "question": "Bagaimana caranya menggunakan fungsi `enumerate` untuk mengakses indeks dan nilai secara bersamaan dalam loop di Python? Bisa beri contoh?",
                "question_code": "vegetables = ['carrot', 'broccoli', 'lettuce']\nfor idx, vegetable in enumerate(vegetables):\n    print(f'{idx}: {vegetable}')",
                "answer": "Anda bisa menggunakan fungsi `enumerate` untuk mengakses indeks dan nilai secara bersamaan dalam loop. Contohnya: `for idx, vegetable in enumerate(vegetables): print(f'{idx}: {vegetable}')`.",
                "answer_code": "vegetables = ['carrot', 'broccoli', 'lettuce']\nfor idx, vegetable in enumerate(vegetables):\n    print(f'{idx}: {vegetable}')"
            }
        ]
    }
]
