[
    {
        "sumber": "advancedpythonpro.com",
        "penulis": "Ahmad Fauzi",
        "tanggal": "2024-12-15",
        "judul": "Metaprogramming dengan Metaclasses di Python",
        "tingkat_kesulitan": "Lanjut",
        "tag": ["python", "metaclasses", "metaprogramming", "lanjut"],
        "konten": "Artikel ini menjelaskan cara menggunakan metaclasses di Python untuk metaprogramming dan bagaimana mereka memungkinkan Anda untuk memodifikasi perilaku class secara dinamis.",
        "pertanyaan": [
            {
                "question": "Apa itu metaclass di Python?",
                "answer": "Metaclass adalah class dari class yang mendefinisikan bagaimana class lain berperilaku. Metaclass dapat digunakan untuk memodifikasi pembuatan class secara dinamis."
            },
            {
                "question": "Bagaimana cara mendefinisikan metaclass di Python?",
                "question_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        x = super().__new__(cls, name, bases, dct)\n        x.attr = 100\n        return x\n\nclass MyClass(metaclass=Meta):\n    pass",
                "answer": "Anda bisa mendefinisikan metaclass dengan membuat class yang mewarisi dari `type` dan mengoverride metode `__new__`. Contohnya: `class Meta(type): ...`.",
                "answer_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        x = super().__new__(cls, name, bases, dct)\n        x.attr = 100\n        return x\n\nclass MyClass(metaclass=Meta):\n    pass"
            },
            {
                "question": "Bagaimana cara menggunakan metaclass di Python?",
                "question_code": "class Meta(type):\n    def __init__(cls, name, bases, dct):\n        super().__init__(name, bases, dct)\n        cls.attr = 100\n\nclass MyClass(metaclass=Meta):\n    pass\n\nprint(MyClass.attr)",
                "answer": "Anda bisa menggunakan metaclass dengan menambahkan `metaclass` pada definisi class. Contohnya: `class MyClass(metaclass=Meta): ...`.",
                "answer_code": "class Meta(type):\n    def __init__(cls, name, bases, dct):\n        super().__init__(name, bases, dct)\n        cls.attr = 100\n\nclass MyClass(metaclass=Meta):\n    pass\n\nprint(MyClass.attr)"
            },
            {
                "question": "Bagaimana cara memodifikasi atribut class menggunakan metaclass di Python?",
                "question_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        dct['new_attr'] = 'added by metaclass'\n        return super().__new__(cls, name, bases, dct)\n\nclass MyClass(metaclass=Meta):\n    pass\n\nprint(MyClass.new_attr)",
                "answer": "Anda bisa memodifikasi atribut class menggunakan metaclass dengan mengubah dictionary atribut dalam metode `__new__`. Contohnya: `dct['new_attr'] = 'added by metaclass'`.",
                "answer_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        dct['new_attr'] = 'added by metaclass'\n        return super().__new__(cls, name, bases, dct)\n\nclass MyClass(metaclass=Meta):\n    pass\n\nprint(MyClass.new_attr)"
            },
            {
                "question": "Bagaimana cara menambahkan metode ke class menggunakan metaclass di Python?",
                "question_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        def new_method(self):\n            return 'method added by metaclass'\n        dct['new_method'] = new_method\n        return super().__new__(cls, name, bases, dct)\n\nclass MyClass(metaclass=Meta):\n    pass\n\nobj = MyClass()\nprint(obj.new_method())",
                "answer": "Anda bisa menambahkan metode ke class menggunakan metaclass dengan menambahkan metode ke dictionary atribut dalam metode `__new__`. Contohnya: `dct['new_method'] = new_method`.",
                "answer_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        def new_method(self):\n            return 'method added by metaclass'\n        dct['new_method'] = new_method\n        return super().__new__(cls, name, bases, dct)\n\nclass MyClass(metaclass=Meta):\n    pass\n\nobj = MyClass()\nprint(obj.new_method())"
            }
        ]
    },
    {
        "sumber": "pythonadvancedtopics.com",
        "penulis": "Lina Wibowo",
        "tanggal": "2024-12-20",
        "judul": "Pemrograman Asinkron dengan Asyncio di Python",
        "tingkat_kesulitan": "Lanjut",
        "tag": ["python", "asyncio", "asynchronous", "lanjut"],
        "konten": "Artikel ini menjelaskan cara menggunakan modul asyncio di Python untuk pemrograman asinkron dan bagaimana memanfaatkan coroutine, tasks, dan event loop.",
        "pertanyaan": [
            {
                "question": "Apa itu modul asyncio di Python?",
                "answer": "Modul asyncio adalah modul standar Python yang menyediakan infrastruktur untuk penulisan kode asinkron menggunakan async/await syntax."
            },
            {
                "question": "Bagaimana cara mendefinisikan coroutine menggunakan async/await di Python?",
                "question_code": "import asyncio\n\nasync def my_coroutine():\n    await asyncio.sleep(1)\n    print('Coroutine executed')",
                "answer": "Anda bisa mendefinisikan coroutine dengan menggunakan kata kunci `async` sebelum definisi fungsi dan `await` untuk panggilan fungsi asinkron. Contohnya: `async def my_coroutine(): ... await asyncio.sleep(1)`.",
                "answer_code": "import asyncio\n\nasync def my_coroutine():\n    await asyncio.sleep(1)\n    print('Coroutine executed')"
            },
            {
                "question": "Bagaimana cara menjalankan coroutine dengan event loop di Python?",
                "question_code": "import asyncio\n\nasync def my_coroutine():\n    await asyncio.sleep(1)\n    print('Coroutine executed')\n\nasyncio.run(my_coroutine())",
                "answer": "Anda bisa menjalankan coroutine dengan event loop menggunakan fungsi `asyncio.run`. Contohnya: `asyncio.run(my_coroutine())`.",
                "answer_code": "import asyncio\n\nasync def my_coroutine():\n    await asyncio.sleep(1)\n    print('Coroutine executed')\n\nasyncio.run(my_coroutine())"
            },
            {
                "question": "Bagaimana cara membuat beberapa tasks menggunakan asyncio di Python?",
                "question_code": "import asyncio\n\nasync def my_coroutine(number):\n    await asyncio.sleep(1)\n    print(f'Coroutine {number} executed')\n\nasync def main():\n    tasks = [asyncio.create_task(my_coroutine(i)) for i in range(5)]\n    await asyncio.gather(*tasks)\n\nasyncio.run(main())",
                "answer": "Anda bisa membuat beberapa tasks menggunakan `asyncio.create_task` dan menjalankannya secara bersamaan dengan `asyncio.gather`. Contohnya: `tasks = [asyncio.create_task(my_coroutine(i)) for i in range(5)]`.",
                "answer_code": "import asyncio\n\nasync def my_coroutine(number):\n    await asyncio.sleep(1)\n    print(f'Coroutine {number} executed')\n\nasync def main():\n    tasks = [asyncio.create_task(my_coroutine(i)) for i in range(5)]\n    await asyncio.gather(*tasks)\n\nasyncio.run(main())"
            },
            {
                "question": "Bagaimana cara menggunakan `asyncio.Queue` untuk komunikasi antar coroutines di Python?",
                "question_code": "import asyncio\n\nasync def producer(queue):\n    for i in range(5):\n        await asyncio.sleep(1)\n        await queue.put(i)\n        print(f'Produced {i}')\n\nasync def consumer(queue):\n    while True:\n        item = await queue.get()\n        if item is None:\n            break\n        print(f'Consumed {item}')\n\nasync def main():\n    queue = asyncio.Queue()\n    producer_task = asyncio.create_task(producer(queue))\n    consumer_task = asyncio.create_task(consumer(queue))\n    await producer_task\n    await queue.put(None)\n    await consumer_task\n\nasyncio.run(main())",
                "answer": "Anda bisa menggunakan `asyncio.Queue` untuk komunikasi antar coroutines dengan metode `put` dan `get` untuk menambahkan dan mengambil item dari queue. Contohnya: `await queue.put(i)` dan `item = await queue.get()`.",
                "answer_code": "import asyncio\n\nasync def producer(queue):\n    for i in range(5):\n        await asyncio.sleep(1)\n        await queue.put(i)\n        print(f'Produced {i}')\n\nasync def consumer(queue):\n    while True:\n        item = await queue.get()\n        if item is None:\n            break\n        print(f'Consumed {item}')\n\nasync def main():\n    queue = asyncio.Queue()\n    producer_task = asyncio.create_task(producer(queue))\n    consumer_task = asyncio.create_task(consumer(queue))\n    await producer_task\n    await queue.put(None)\n    await consumer_task\n\nasyncio.run(main())"
            },
            {
                "question": "Bagaimana cara menangani timeout dengan asyncio di Python?",
                "question_code": "import asyncio\n\nasync def my_coroutine():\n    await asyncio.sleep(2)\n\nasync def main():\n    try:\n        await asyncio.wait_for(my_coroutine(), timeout=1.0)\n    except asyncio.TimeoutError:\n        print('The coroutine timed out')\n\nasyncio.run(main())",
                "answer": "Anda bisa menangani timeout dengan asyncio menggunakan fungsi `asyncio.wait_for` dan menentukan batas waktu untuk eksekusi coroutine. Contohnya: `await asyncio.wait_for(my_coroutine(), timeout=1.0)`.",
                "answer_code": "import asyncio\n\nasync def my_coroutine():\n    await asyncio.sleep(2)\n\nasync def main():\n    try:\n        await asyncio.wait_for(my_coroutine(), timeout=1.0)\n    except asyncio.TimeoutError:\n        print('The coroutine timed out')\n\nasyncio.run(main())"
            }
        ]
    }
]
