[
    {
        "sumber": "panduancodingpython.com",
        "penulis": "Dina Puspita",
        "tanggal": "2023-05-30",
        "judul": "Penggunaan Dictionary di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "dictionary", "dasar"],
        "konten": "Artikel ini menjelaskan dasar-dasar penggunaan dictionary dalam Python, termasuk cara membuat, mengakses, dan memodifikasi data.",
        "pertanyaan": [
            {
                "question": "Apa yang dimaksud dengan dictionary dalam Python?",
                "answer": "Dictionary adalah struktur data yang menyimpan informasi dalam bentuk pasangan kunci-nilai, seperti kamus yang menyimpan kata dan definisinya."
            },
            {
                "question": "Bagaimana caranya membuat dictionary baru?",
                "answer": "Untuk membuat dictionary, gunakan kurung kurawal `{}` dan pisahkan kunci dan nilai dengan tanda titik dua. Contoh: `data = {'nama': 'Budi', 'usia': 30}`."
            },
            {
                "question": "Bagaimana cara mengambil nilai dari dictionary menggunakan kunci?",
                "question_code": "data = {'nama': 'Budi'}\nnilai = data['nama']",
                "answer": "Anda bisa mengambil nilai dari dictionary dengan mengaksesnya menggunakan kunci dalam kurung kotak. Misalnya: `nilai = data['nama']`.",
                "answer_code": "data = {'nama': 'Budi'}\nnilai = data['nama']"
            },
            {
                "question": "Apa langkah-langkah untuk menambahkan item baru ke dictionary?",
                "question_code": "data['alamat'] = 'Bandung'",
                "answer": "Menambahkan item baru bisa dilakukan dengan menetapkan nilai baru ke kunci baru. Contoh: `data['alamat'] = 'Bandung'`.",
                "answer_code": "data['alamat'] = 'Bandung'"
            },
            {
                "question": "Bagaimana menghapus item dari dictionary?",
                "question_code": "del data['usia']",
                "answer": "Untuk menghapus item, gunakan perintah `del` diikuti dengan kunci item yang ingin dihapus. Contoh: `del data['usia']`.",
                "answer_code": "del data['usia']"
            },
            {
                "question": "Bagaimana memeriksa apakah sebuah kunci ada di dalam dictionary?",
                "question_code": "'nama' in data",
                "answer": "Gunakan operator `in` untuk memeriksa keberadaan kunci. Contoh: `'nama' in data` mengembalikan True jika kunci 'nama' ada dalam dictionary.",
                "answer_code": "'nama' in data"
            },
            {
                "question": "Bagaimana mendapatkan daftar semua kunci dalam dictionary?",
                "question_code": "data.keys()",
                "answer": "Untuk mendapatkan semua kunci, gunakan metode `keys()`. Contoh: `data.keys()` akan menampilkan semua kunci yang ada dalam dictionary.",
                "answer_code": "data.keys()"
            },
            {
                "question": "Bagaimana melihat semua nilai dalam dictionary?",
                "question_code": "data.values()",
                "answer": "Gunakan metode `values()` untuk mendapatkan semua nilai dalam dictionary. Contoh: `data.values()` akan menampilkan semua nilai.",
                "answer_code": "data.values()"
            },
            {
                "question": "Bagaimana cara memperbarui nilai yang sudah ada di dictionary?",
                "question_code": "data['nama'] = 'Rina'",
                "answer": "Untuk memperbarui nilai, tetapkan nilai baru pada kunci yang sudah ada. Contoh: `data['nama'] = 'Rina'`.",
                "answer_code": "data['nama'] = 'Rina'"
            }
        ]
    },
    {
        "sumber": "belajarpemrogramanpython.net",
        "penulis": "Eko Prasetyo",
        "tanggal": "2023-11-21",
        "judul": "Penggunaan List Comprehensions di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "list comprehensions", "dasar"],
        "konten": "Artikel ini menguraikan bagaimana cara menggunakan list comprehensions untuk membuat dan memodifikasi list dengan cara yang lebih efisien dan ringkas.",
        "pertanyaan": [
            {
                "question": "Apa itu list comprehensions di Python?",
                "answer": "List comprehensions adalah cara efisien untuk membuat list baru dengan sintaks yang singkat, sering kali dalam satu baris kode."
            },
            {
                "question": "Bagaimana membuat list comprehension untuk angka 0 sampai 4?",
                "question_code": "[i for i in range(5)]",
                "answer": "Anda bisa menggunakan list comprehension dengan sintaks `[i for i in range(5)]` untuk membuat list yang berisi angka dari 0 hingga 4.",
                "answer_code": "[i for i in range(5)]"
            },
            {
                "question": "Bagaimana menambahkan syarat dalam list comprehension?",
                "question_code": "[i for i in range(10) if i % 2 != 0]",
                "answer": "Untuk menambahkan kondisi, gunakan sintaks `[item for item in iterable if condition]`. Contohnya: `[i for i in range(10) if i % 2 != 0]` untuk mendapatkan angka ganjil.",
                "answer_code": "[i for i in range(10) if i % 2 != 0]"
            },
            {
                "question": "Bagaimana menggunakan fungsi dalam list comprehension?",
                "question_code": "[i*3 for i in range(5)]",
                "answer": "Anda bisa memasukkan fungsi atau operasi dalam list comprehension. Misalnya: `[i*3 for i in range(5)]` akan mengalikan setiap angka dari 0 hingga 4 dengan 3.",
                "answer_code": "[i*3 for i in range(5)]"
            },
            {
                "question": "Bagaimana cara membuat list comprehension dari list yang sudah ada?",
                "question_code": "angka = [1, 2, 3, 4]\nkuadrat = [x**2 for x in angka]",
                "answer": "Jika Anda sudah memiliki list, Anda bisa menggunakan list comprehension untuk memodifikasinya. Contoh: `kuadrat = [x**2 for x in angka]` untuk mendapatkan kuadrat dari setiap elemen.",
                "answer_code": "angka = [1, 2, 3, 4]\nkuadrat = [x**2 for x in angka]"
            },
            {
                "question": "Bagaimana membuat list comprehension dengan nested loops?",
                "question_code": "[[i, j] for i in range(2) for j in range(3)]",
                "answer": "Anda dapat membuat nested list comprehensions dengan menambahkan beberapa loop for. Contoh: `[[i, j] for i in range(2) for j in range(3)]` akan menghasilkan pasangan kombinasi dari i dan j.",
                "answer_code": "[[i, j] for i in range(2) for j in range(3)]"
            },
            {
                "question": "Bagaimana memanipulasi string menggunakan list comprehension?",
                "question_code": "[char + '!' for char in 'hello']",
                "answer": "Untuk memanipulasi string, Anda bisa menggunakan list comprehension untuk mengubah setiap karakter. Contoh: `[char + '!' for char in 'hello']` menambahkan tanda seru ke setiap karakter.",
                "answer_code": "[char + '!' for char in 'hello']"
            },
            {
                "question": "Bagaimana membuat dictionary comprehension?",
                "question_code": "{k: v**2 for k, v in {'a': 1, 'b': 2}.items()}",
                "answer": "Untuk membuat dictionary comprehension, gunakan sintaks `{k: v for k, v in dict.items()}`. Contoh: `{k: v**2 for k, v in {'a': 1, 'b': 2}.items()}` akan mengkuadratkan nilai dari setiap kunci.",
                "answer_code": "{k: v**2 for k, v in {'a': 1, 'b': 2}.items()}"
            },
            {
                "question": "Bagaimana membuat set comprehension?",
                "question_code": "{i*3 for i in range(4)}",
                "answer": "Untuk membuat set comprehension, gunakan tanda kurung kurawal `{}`. Contoh: `{i*3 for i in range(4)}` menghasilkan set dari angka 0 hingga 9 dengan kelipatan tiga.",
                "answer_code": "{i*3 for i in range(4)}"
            }
        ]
    }
]
