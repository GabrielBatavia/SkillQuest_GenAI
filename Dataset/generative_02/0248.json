[
    {
        "sumber": "pythonadvance.com",
        "penulis": "Rizal Fadli",
        "tanggal": "2024-06-20",
        "judul": "Memahami Fungsi Map, Filter, dan Reduce di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "map", "filter", "reduce", "menengah"],
        "konten": "Artikel ini menguraikan penggunaan fungsi built-in map, filter, dan reduce di Python untuk memproses data dengan cara yang efisien.",
        "pertanyaan": [
            {
                "question": "Apa fungsi dari map di Python?",
                "answer": "Fungsi map menerapkan sebuah fungsi ke setiap elemen dalam iterable dan mengembalikan sebuah map object yang berisi hasilnya."
            },
            {
                "question": "Bagaimana cara menggunakan fungsi map dengan contoh yang mudah?",
                "question_code": "numbers = [1, 3, 5, 7]\nsquares = list(map(lambda x: x**2, numbers))",
                "answer": "Anda bisa menggunakan fungsi map untuk mengkuadratkan setiap elemen dalam daftar. Contoh: map(lambda x: x**2, numbers).",
                "answer_code": "numbers = [1, 3, 5, 7]\nsquares = list(map(lambda x: x**2, numbers))"
            },
            {
                "question": "Bisakah Anda jelaskan fungsi filter di Python?",
                "answer": "Fungsi filter menyaring elemen dalam iterable berdasarkan fungsi yang mengembalikan nilai boolean."
            },
            {
                "question": "Bagaimana cara menggunakan fungsi filter dengan contoh yang sederhana?",
                "question_code": "numbers = [1, 4, 6, 8]\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))",
                "answer": "Anda bisa menggunakan fungsi filter untuk menyaring elemen genap dalam daftar. Contoh: filter(lambda x: x % 2 == 0, numbers).",
                "answer_code": "numbers = [1, 4, 6, 8]\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))"
            },
            {
                "question": "Apa kegunaan fungsi reduce di Python?",
                "answer": "Fungsi reduce menerapkan fungsi tertentu ke elemen-elemen dalam iterable secara berurutan dan mengembalikan satu hasil akhir."
            },
            {
                "question": "Bisakah Anda berikan contoh penggunaan reduce di Python?",
                "question_code": "from functools import reduce\nnumbers = [1, 2, 3, 4]\nproduct = reduce(lambda x, y: x * y, numbers)",
                "answer": "Anda bisa menggunakan fungsi reduce untuk mengalikan semua elemen dalam daftar. Contoh: reduce(lambda x, y: x * y, numbers).",
                "answer_code": "from functools import reduce\nnumbers = [1, 2, 3, 4]\nproduct = reduce(lambda x, y: x * y, numbers)"
            },
            {
                "question": "Bagaimana cara menggabungkan penggunaan map dan filter di Python?",
                "question_code": "numbers = [2, 5, 8, 10]\nfiltered_and_mapped = list(map(lambda x: x**3, filter(lambda x: x > 5, numbers)))",
                "answer": "Anda bisa menggabungkan map dan filter dengan menyaring elemen terlebih dahulu, lalu menerapkan map. Contoh: map(lambda x: x**3, filter(lambda x: x > 5, numbers)).",
                "answer_code": "numbers = [2, 5, 8, 10]\nfiltered_and_mapped = list(map(lambda x: x**3, filter(lambda x: x > 5, numbers)))"
            },
            {
                "question": "Bagaimana cara menggunakan map dengan beberapa daftar di Python?",
                "question_code": "list1 = [1, 2, 3]\nlist2 = [10, 20, 30]\nsums = list(map(lambda x, y: x + y, list1, list2))",
                "answer": "Anda bisa menggunakan map dengan beberapa daftar untuk menambahkan elemen-elemen yang berkorespondensi. Contoh: map(lambda x, y: x + y, list1, list2).",
                "answer_code": "list1 = [1, 2, 3]\nlist2 = [10, 20, 30]\nsums = list(map(lambda x, y: x + y, list1, list2))"
            },
            {
                "question": "Bagaimana cara menggunakan filter untuk menyaring string yang mengandung huruf tertentu di Python?",
                "question_code": "words = ['apple', 'orange', 'grape']\nfiltered_words = list(filter(lambda x: 'e' in x, words))",
                "answer": "Anda bisa menggunakan filter untuk menyaring string yang mengandung huruf tertentu. Contoh: filter(lambda x: 'e' in x, words).",
                "answer_code": "words = ['apple', 'orange', 'grape']\nfiltered_words = list(filter(lambda x: 'e' in x, words))"
            }
        ]
    },
    {
        "sumber": "pythonskill.com",
        "penulis": "Siti Nurhasanah",
        "tanggal": "2024-07-10",
        "judul": "Menguasai Exception Handling di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "exception handling", "menengah"],
        "konten": "Artikel ini menjelaskan exception handling di Python, yang memungkinkan penanganan error agar program tetap berjalan meskipun terjadi kesalahan.",
        "pertanyaan": [
            {
                "question": "Apa itu exception handling di Python dan mengapa penting?",
                "answer": "Exception handling adalah mekanisme untuk menangani error atau pengecualian yang terjadi selama eksekusi program sehingga program dapat terus berjalan. Ini penting untuk memastikan program tidak berhenti tiba-tiba."
            },
            {
                "question": "Bagaimana cara kerja try-except di Python dengan contoh yang mudah?",
                "question_code": "try:\n    number = int('abc123')\nexcept ValueError:\n    print('Error: Tidak bisa mengubah string menjadi integer')",
                "answer": "Blok try-except digunakan untuk menangani error dengan menempatkan kode yang mungkin menghasilkan error di dalam blok try dan menangani error di dalam blok except. Contoh: try: number = int('abc123') except ValueError: print('Error: Tidak bisa mengubah string menjadi integer').",
                "answer_code": "try:\n    number = int('abc123')\nexcept ValueError:\n    print('Error: Tidak bisa mengubah string menjadi integer')"
            },
            {
                "question": "Bagaimana menangani berbagai pengecualian di Python?",
                "question_code": "try:\n    result = 'abc' + 1\nexcept TypeError:\n    print('Kesalahan tipe data')\nexcept ValueError:\n    print('Kesalahan nilai')",
                "answer": "Anda bisa menangani berbagai pengecualian dengan menggunakan beberapa blok except untuk setiap jenis pengecualian. Contoh: try: result = 'abc' + 1 except TypeError: print('Kesalahan tipe data') except ValueError: print('Kesalahan nilai').",
                "answer_code": "try:\n    result = 'abc' + 1\nexcept TypeError:\n    print('Kesalahan tipe data')\nexcept ValueError:\n    print('Kesalahan nilai')"
            },
            {
                "question": "Bagaimana cara menggunakan blok finally di Python dengan contoh?",
                "question_code": "try:\n    value = int('456')\nexcept ValueError:\n    print('Error konversi')\nfinally:\n    print('Eksekusi selesai')",
                "answer": "Blok finally digunakan untuk mengeksekusi kode yang harus dijalankan terlepas dari apakah terjadi pengecualian atau tidak. Contoh: try: value = int('456') except ValueError: print('Error konversi') finally: print('Eksekusi selesai').",
                "answer_code": "try:\n    value = int('456')\nexcept ValueError:\n    print('Error konversi')\nfinally:\n    print('Eksekusi selesai')"
            },
            {
                "question": "Bagaimana cara membuat pengecualian khusus di Python?",
                "question_code": "class AgeError(Exception):\n    pass\n\ntry:\n    age = -5\n    if age < 0:\n        raise AgeError('Umur tidak bisa negatif')\nexcept AgeError as e:\n    print(e)",
                "answer": "Anda bisa membuat pengecualian khusus dengan mendefinisikan kelas pengecualian yang mewarisi dari kelas Exception. Contoh: class AgeError(Exception): pass.",
                "answer_code": "class AgeError(Exception):\n    pass\n\ntry:\n    age = -5\n    if age < 0:\n        raise AgeError('Umur tidak bisa negatif')\nexcept AgeError as e:\n    print(e)"
            },
            {
                "question": "Bagaimana cara menggunakan klausa else dengan try-except di Python?",
                "question_code": "try:\n    num = 15 / 3\nexcept ZeroDivisionError:\n    print('Tidak bisa membagi dengan nol')\nelse:\n    print('Hasil:', num)",
                "answer": "Klausa else digunakan untuk mengeksekusi kode jika tidak ada pengecualian yang terjadi di dalam blok try. Contoh: try: num = 15 / 3 except ZeroDivisionError: print('Tidak bisa membagi dengan nol') else: print('Hasil:', num).",
                "answer_code": "try:\n    num = 15 / 3\nexcept ZeroDivisionError:\n    print('Tidak bisa membagi dengan nol')\nelse:\n    print('Hasil:', num)"
            },
            {
                "question": "Bagaimana cara menangkap semua jenis pengecualian di Python?",
                "question_code": "try:\n    print(non_existent_var)\nexcept Exception as e:\n    print('Kesalahan:', e)",
                "answer": "Anda bisa menangkap semua jenis pengecualian dengan menggunakan kelas dasar Exception. Contoh: try: print(non_existent_var) except Exception as e: print('Kesalahan:', e).",
                "answer_code": "try:\n    print(non_existent_var)\nexcept Exception as e:\n    print('Kesalahan:', e)"
            },
            {
                "question": "Bagaimana cara menggunakan klausa raise di Python?",
                "question_code": "def check_age(age):\n    if age < 0:\n        raise ValueError('Umur tidak boleh negatif')\n\ntry:\n    check_age(-10)\nexcept ValueError as e:\n    print(e)",
                "answer": "Klausa raise digunakan untuk memunculkan pengecualian secara manual. Contoh: raise ValueError('Umur tidak boleh negatif').",
                "answer_code": "def check_age(age):\n    if age < 0:\n        raise ValueError('Umur tidak boleh negatif')\n\ntry:\n    check_age(-10)\nexcept ValueError as e:\n    print(e)"
            },
            {
                "question": "Bagaimana cara menggunakan klausa assert di Python?",
                "question_code": "number = 0\nassert number != 0, 'Number tidak boleh nol'",
                "answer": "Klausa assert digunakan untuk melakukan pemeriksaan logika selama eksekusi program. Jika kondisi assert False, AssertionError akan dipicu. Contoh: assert number != 0, 'Number tidak boleh nol'.",
                "answer_code": "number = 0\nassert number != 0, 'Number tidak boleh nol'"
            }
        ]
    }
]
