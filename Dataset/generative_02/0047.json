[
    {
        "sumber": "pythondasar.com",
        "penulis": "Andi Nurhadi",
        "tanggal": "2023-08-12",
        "judul": "Menggunakan Fungsi Bawaan di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "fungsi bawaan", "dasar"],
        "konten": "Artikel ini mengupas berbagai fungsi bawaan yang sering dipakai di Python, seperti `len()`, `type()`, `range()`, dan `input()`.",
        "pertanyaan": [
            {
                "question": "Apa yang dimaksud dengan fungsi bawaan di Python?",
                "answer": "Fungsi bawaan adalah fungsi yang telah disediakan oleh Python dan bisa langsung digunakan tanpa perlu mendeklarasikannya terlebih dahulu."
            },
            {
                "question": "Bagaimana cara memakai fungsi `len()` di Python?",
                "answer": "Fungsi `len()` digunakan untuk mendapatkan jumlah elemen dalam sebuah objek seperti list atau string. Misalnya: `len(my_list)`."
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `type()` di Python?",
                "answer": "Fungsi `type()` digunakan untuk mengetahui jenis tipe data dari sebuah objek. Misalnya: `type(10)`."
            },
            {
                "question": "Bagaimana cara kerja fungsi `range()` di Python?",
                "question_code": "for i in range(5):\n    print(i)",
                "answer": "Fungsi `range()` digunakan untuk menghasilkan rangkaian angka yang bisa digunakan dalam perulangan. Misalnya: `range(5)`.",
                "answer_code": "for i in range(5):\n    print(i)"
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `input()` di Python?",
                "question_code": "name = input('Masukkan nama Anda: ')\nprint('Halo, ' + name)",
                "answer": "Fungsi `input()` digunakan untuk mengambil input dari pengguna. Misalnya: `input('Masukkan nama Anda: ')`.",
                "answer_code": "name = input('Masukkan nama Anda: ')\nprint('Halo, ' + name)"
            },
            {
                "question": "Bagaimana cara memakai fungsi `abs()` di Python?",
                "question_code": "abs(-5)",
                "answer": "Fungsi `abs()` digunakan untuk mendapatkan nilai absolut dari sebuah angka. Misalnya: `abs(-5)`.",
                "answer_code": "abs(-5)"
            },
            {
                "question": "Bagaimana cara memakai fungsi `sum()` di Python?",
                "question_code": "sum([1, 2, 3, 4])",
                "answer": "Fungsi `sum()` digunakan untuk menjumlahkan elemen-elemen dalam sebuah iterable seperti list. Misalnya: `sum([1, 2, 3, 4])`.",
                "answer_code": "sum([1, 2, 3, 4])"
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `min()` di Python?",
                "question_code": "min([1, 2, 3, 4])",
                "answer": "Fungsi `min()` digunakan untuk mendapatkan nilai terkecil dari sebuah iterable. Misalnya: `min([1, 2, 3, 4])`.",
                "answer_code": "min([1, 2, 3, 4])"
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `max()` di Python?",
                "question_code": "max([1, 2, 3, 4])",
                "answer": "Fungsi `max()` digunakan untuk mendapatkan nilai terbesar dari sebuah iterable. Misalnya: `max([1, 2, 3, 4])`.",
                "answer_code": "max([1, 2, 3, 4])"
            }
        ]
    },
    {
        "sumber": "belajarpemrograman.com",
        "penulis": "Dewi Kartika",
        "tanggal": "2024-05-05",
        "judul": "Menggunakan Kondisional di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "kondisional", "dasar"],
        "konten": "Artikel ini menguraikan penggunaan kondisional di Python, termasuk cara menggunakan pernyataan if, else, elif, dan operator logika.",
        "pertanyaan": [
            {
                "question": "Bagaimana cara menggunakan pernyataan if di Python?",
                "answer": "Pernyataan `if` digunakan untuk menjalankan blok kode tertentu jika kondisi yang diberikan terpenuhi. Misalnya: `if x > 0: print('x positif')`."
            },
            {
                "question": "Bagaimana cara kerja pernyataan else di Python?",
                "answer": "Pernyataan `else` digunakan untuk menjalankan blok kode jika kondisi dalam pernyataan `if` tidak terpenuhi. Misalnya: `else: print('x tidak positif')`."
            },
            {
                "question": "Bagaimana cara menggunakan pernyataan elif di Python?",
                "answer": "Pernyataan `elif` digunakan untuk memeriksa kondisi lain jika kondisi dalam pernyataan `if` sebelumnya tidak terpenuhi. Misalnya: `elif x == 0: print('x nol')`."
            },
            {
                "question": "Bagaimana cara kerja operator logika `and` di Python?",
                "question_code": "if x > 0 and x < 10:\n    print('x adalah bilangan positif kurang dari 10')",
                "answer": "Operator logika `and` digunakan untuk memeriksa apakah kedua kondisi benar. Misalnya: `if x > 0 and x < 10:`.",
                "answer_code": "if x > 0 and x < 10:\n    print('x adalah bilangan positif kurang dari 10')"
            },
            {
                "question": "Bagaimana cara kerja operator logika `or` di Python?",
                "question_code": "if x < 0 or x > 10:\n    print('x berada di luar rentang 0 hingga 10')",
                "answer": "Operator logika `or` digunakan untuk memeriksa apakah salah satu dari dua kondisi benar. Misalnya: `if x < 0 or x > 10:`.",
                "answer_code": "if x < 0 or x > 10:\n    print('x berada di luar rentang 0 hingga 10')"
            },
            {
                "question": "Bagaimana cara menggunakan operator logika `not` di Python?",
                "question_code": "if not x:\n    print('x adalah False atau 0')",
                "answer": "Operator logika `not` digunakan untuk membalik nilai boolean dari kondisi. Misalnya: `if not x:`.",
                "answer_code": "if not x:\n    print('x adalah False atau 0')"
            },
            {
                "question": "Bagaimana cara membuat kondisional bersarang di Python?",
                "question_code": "if x > 0:\n    if x < 10:\n        print('x adalah bilangan positif kurang dari 10')",
                "answer": "Anda bisa membuat kondisional bersarang dengan menempatkan satu pernyataan `if` di dalam pernyataan `if` lainnya. Misalnya: `if x > 0: if x < 10:`.",
                "answer_code": "if x > 0:\n    if x < 10:\n        print('x adalah bilangan positif kurang dari 10')"
            },
            {
                "question": "Bagaimana cara menggunakan operator perbandingan `==` di Python?",
                "question_code": "if x == y:\n    print('x sama dengan y')",
                "answer": "Operator perbandingan `==` digunakan untuk memeriksa apakah dua nilai sama. Misalnya: `if x == y:`.",
                "answer_code": "if x == y:\n    print('x sama dengan y')"
            },
            {
                "question": "Bagaimana cara menggunakan operator perbandingan `!=` di Python?",
                "question_code": "if x != y:\n    print('x tidak sama dengan y')",
                "answer": "Operator perbandingan `!=` digunakan untuk memeriksa apakah dua nilai tidak sama. Misalnya: `if x != y:`.",
                "answer_code": "if x != y:\n    print('x tidak sama dengan y')"
            }
        ]
    }
]
