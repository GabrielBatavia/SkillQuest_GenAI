[
    {
        "sumber": "belajarpythonmudah.com",
        "penulis": "Arif Susanto",
        "tanggal": "2023-04-10",
        "judul": "Penggunaan Operator Logika di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "operator logika", "dasar"],
        "konten": "Artikel ini menjelaskan penggunaan operator logika di Python seperti `and`, `or`, dan `not` untuk melakukan operasi logika dasar.",
        "pertanyaan": [
            {
                "question": "Apa itu operator `and` di Python dan bagaimana menggunakannya?",
                "answer": "Operator logika `and` mengembalikan `True` jika kedua operand adalah `True`. Contohnya: `True and False` mengembalikan `False`."
            },
            {
                "question": "Bisakah Anda menjelaskan operator `or` di Python?",
                "answer": "Operator logika `or` mengembalikan `True` jika salah satu dari operand adalah `True`. Contohnya: `True or False` mengembalikan `True`."
            },
            {
                "question": "Bagaimana cara kerja operator `not` di Python?",
                "question_code": "not 0",
                "answer": "Operator logika `not` digunakan untuk membalik nilai boolean dari operand. Contohnya: `not True` mengembalikan `False`.",
                "answer_code": "not True"
            },
            {
                "question": "Bagaimana cara menggunakan `and` di dalam kondisi if?",
                "question_code": "x = 3\ny = 7\nif x > 5 y < 10:\n    print('Keduanya benar')",
                "answer": "Anda bisa menggunakan operator `and` dalam pernyataan kondisional untuk memeriksa apakah kedua kondisi benar. Contohnya: `if x > 0 and y < 10: print('Keduanya benar')`.",
                "answer_code": "x = 3\ny = 7\nif x > 0 and y < 10:\n    print('Keduanya benar')"
            },
            {
                "question": "Bagaimana cara menggunakan `or` di dalam kondisi if?",
                "question_code": "a = 0\nb = 8\nif a == 1 or b < 5:\n    print('Salah satu benar')",
                "answer": "Anda bisa menggunakan operator `or` dalam pernyataan kondisional untuk memeriksa apakah salah satu kondisi benar. Contohnya: `if x < 0 or y > 5: print('Salah satu benar')`.",
                "answer_code": "x = -3\ny = 8\nif x < 0 or y > 5:\n    print('Salah satu benar')"
            },
            {
                "question": "Bagaimana cara menggunakan `not` di dalam kondisi if?",
                "question_code": "flag = 1\nif not flag:\n    print('flag salah')",
                "answer": "Anda bisa menggunakan operator `not` dalam pernyataan kondisional untuk memeriksa apakah kondisi salah. Contohnya: `if not x: print('x adalah False')`.",
                "answer_code": "x = False\nif not x:\n    print('x adalah False')"
            },
            {
                "question": "Bagaimana cara menggabungkan beberapa operator logika dalam satu kondisi?",
                "question_code": "p = 5\nq = 15\nr = 20\nif p > 0 and q < 20 or r == 25:\n    print('Kondisi benar')",
                "answer": "Anda bisa menggabungkan beberapa operator logika dalam satu pernyataan untuk memeriksa kondisi yang lebih kompleks. Contohnya: `if x > 0 and y < 20 or z == 0: print('Kondisi benar')`.",
                "answer_code": "x = 2\ny = 15\nz = 0\nif x > 0 and y < 20 or z == 0:\n    print('Kondisi benar')"
            },
            {
                "question": "Bagaimana cara menggunakan operator logika dalam loop?",
                "question_code": "count = 0\nwhile count < 5 and count % 3 == 0:\n    print(count)\n    count += 1",
                "answer": "Anda bisa menggunakan operator logika dalam loop untuk menentukan kondisi penghentian. Contohnya: `while x < 10 and x % 2 == 0: print(x); x += 2`.",
                "answer_code": "x = 0\nwhile x < 10 and x % 2 == 0:\n    print(x)\n    x += 2"
            },
            {
                "question": "Bagaimana cara memeriksa apakah nilai tidak ada dalam list?",
                "question_code": "my_list = [10, 20, 30]\nif 40 in my_list:\n    print('40 tidak ada dalam list')",
                "answer": "Anda bisa memeriksa apakah nilai tidak ada dalam list dengan menggunakan operator `not in`. Contohnya: `if 4 not in my_list: print('4 tidak ada dalam list')`.",
                "answer_code": "my_list = [1, 2, 3]\nif 4 not in my_list:\n    print('4 tidak ada dalam list')"
            },
            {
                "question": "Bagaimana cara menggunakan operator logika di dalam list comprehension?",
                "question_code": "[y for y in range(15) if y % 3 == 0 y > 10]",
                "answer": "Anda bisa menggunakan operator logika dalam list comprehension untuk memeriksa kondisi tertentu. Contohnya: `[x for x in range(10) if x % 2 == 0 and x > 5]`.",
                "answer_code": "[x for x in range(10) if x % 2 == 0 and x > 5]"
            }
        ]
    },
    {
        "sumber": "belajarpython.org",
        "penulis": "Rina Kartika",
        "tanggal": "2024-06-20",
        "judul": "Penggunaan Fungsi Lambda di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "lambda", "fungsi"],
        "konten": "Artikel ini menjelaskan cara mendefinisikan dan menggunakan fungsi lambda di Python untuk membuat fungsi anonim yang singkat.",
        "pertanyaan": [
            {
                "question": "Fungsi lambda itu apa sih? Saya nggak ngerti.",
                "answer": "Fungsi lambda adalah fungsi anonim kecil yang dapat memiliki sejumlah argumen tetapi hanya satu ekspresi."
            },
            {
                "question": "Gimana cara bikin fungsi lambda di Python?",
                "answer": "Anda bisa mendefinisikan fungsi lambda dengan menggunakan kata kunci `lambda` diikuti dengan argumen dan ekspresi. Contohnya: `lambda x: x * 2`."
            },
            {
                "question": "Gimana caranya pakai fungsi lambda di map?",
                "question_code": "list(map(lambda y: y ** 2, [1, 2, 3, 4]))",
                "answer": "Anda bisa menggunakan fungsi lambda dengan `map()` untuk menerapkan fungsi ke setiap elemen dalam iterable. Contohnya: `map(lambda x: x * 2, [1, 2, 3])`.",
                "answer_code": "list(map(lambda x: x * 2, [1, 2, 3]))"
            },
            {
                "question": "Bingung nih, gimana pakai fungsi lambda di filter?",
                "question_code": "list(filter(lambda y: y > 1, [1, 2, 3, 4]))",
                "answer": "Anda bisa menggunakan fungsi lambda dengan `filter()` untuk menyaring elemen dalam iterable. Contohnya: `filter(lambda x: x % 2 == 0, [1, 2, 3, 4])`.",
                "answer_code": "list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4]))"
            },
            {
                "question": "Fungsi lambda bisa dipakai di reduce nggak? Caranya gimana?",
                "question_code": "reduce(lambda a, b: a * b, [1, 2, 3, 4])",
                "answer": "Anda bisa menggunakan fungsi lambda dengan `reduce()` untuk menerapkan fungsi secara kumulatif ke elemen-elemen dalam iterable. Contohnya: `reduce(lambda x, y: x + y, [1, 2, 3, 4])`.",
                "answer_code": "from functools import reduce\nreduce(lambda x, y: x + y, [1, 2, 3, 4])"
            },
            {
                "question": "Bisa pakai fungsi lambda di dalam sorted? Gimana caranya?",
                "question_code": "sorted([('d', 4), ('b', 2), ('c', 3)], key=lambda x: 0)",
                "answer": "Anda bisa menggunakan fungsi lambda di dalam `sorted()` untuk menentukan kunci pengurutan. Contohnya: `sorted([('a', 3), ('b', 2), ('c', 1)], key=lambda x: x[1])`.",
                "answer_code": "sorted([('a', 3), ('b', 2), ('c', 1)], key=lambda x: x[1])"
            },
            {
                "question": "Kalau fungsi lambda punya beberapa argumen gimana?",
                "question_code": "lambda x y: x - y",
                "answer": "Anda bisa mendefinisikan fungsi lambda dengan beberapa argumen dengan memisahkan argumen menggunakan koma. Contohnya: `lambda x, y: x + y`.",
                "answer_code": "lambda x, y: x + y"
            },
            {
                "question": "Fungsi lambda bisa dipakai di list comprehension nggak? Gimana?",
                "question_code": "[lambda z z + 1 for z in range(3)]",
                "answer": "Anda bisa menggunakan fungsi lambda dengan list comprehension untuk membuat list fungsi. Contohnya: `[lambda x: x * 2 for x in range(5)]`.",
                "answer_code": "[lambda x: x * 2 for x in range(5)]"
            },
            {
                "question": "Pakai fungsi lambda di dictionary comprehension bisa? Caranya gimana?",
                "question_code": "{k: lambda v v * 2 for k, v in {'a': 1, 'b': 2}.items()}",
                "answer": "Anda bisa menggunakan fungsi lambda di dalam dictionary comprehension untuk membuat dictionary. Contohnya: `{x: (lambda x: x * 2)(x) for x in range(5)}`.",
                "answer_code": "{x: (lambda x: x * 2)(x) for x in range(5)}"
            }
        ]
    }
]
