[
    {
        "sumber": "advancedpythonpro.com",
        "penulis": "Ahmad Fauzi",
        "tanggal": "2024-12-15",
        "judul": "Metaprogramming dengan Metaclasses di Python",
        "tingkat_kesulitan": "Lanjut",
        "tag": ["python", "metaclasses", "metaprogramming", "lanjut"],
        "konten": "Artikel ini menjelaskan cara menggunakan metaclasses di Python untuk metaprogramming dan bagaimana mereka memungkinkan Anda untuk memodifikasi perilaku class secara dinamis.",
        "pertanyaan": [
            {
                "question": "Saya mendengar tentang sesuatu yang disebut metaclass di Python, dan sejujurnya, saya sangat bingung tentang apa itu sebenarnya. Bisakah Anda memberikan penjelasan yang sangat sederhana tentang apa itu metaclass dan mungkin memberikan contoh dasar tentang bagaimana mendefinisikan metaclass? Saya ingin mencoba memahaminya lebih baik dengan contoh yang bisa saya ikuti.",
                "answer": "Metaclass adalah class dari class yang mendefinisikan bagaimana class lain berperilaku. Metaclass dapat digunakan untuk memodifikasi pembuatan class secara dinamis. Misalnya, jika Anda ingin menambahkan atribut secara otomatis ke semua class yang menggunakan metaclass tertentu, Anda bisa melakukannya dengan mendefinisikan metaclass seperti berikut:",
                "question_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        x = super().__new__(cls, name, bases, dct)\n        x.new_attribute = 'Hello, Meta!'\n        return x\n\nclass ExampleClass(metaclass=Meta):\n    pass",
                "answer_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        x = super().__new__(cls, name, bases, dct)\n        x.new_attribute = 'Hello, Meta!'\n        return x\n\nclass ExampleClass(metaclass=Meta):\n    pass\n\nprint(ExampleClass.new_attribute)"
            },
            {
                "question": "Saya ingin mencoba memahami cara menggunakan metaclass di Python. Bagaimana cara menambahkan atribut baru ke dalam class menggunakan metaclass? Tolong beri penjelasan dan contoh yang jelas agar saya bisa langsung mencobanya.",
                "answer": "Untuk menggunakan metaclass di Python, Anda bisa menambahkan `metaclass` pada definisi class. Misalnya, jika Anda ingin menambahkan atribut baru ke setiap class yang menggunakan metaclass tertentu, Anda bisa melakukannya seperti ini:",
                "question_code": "class Meta(type):\n    def __init__(cls, name, bases, dct):\n        super().__init__(name, bases, dct)\n        cls.extra_attribute = 'Added by Meta'\n\nclass ExampleClass(metaclass=Meta):\n    pass\n\nprint(ExampleClass.extra_attribute)",
                "answer_code": "class Meta(type):\n    def __init__(cls, name, bases, dct):\n        super().__init__(name, bases, dct)\n        cls.extra_attribute = 'Added by Meta'\n\nclass ExampleClass(metaclass=Meta):\n    pass\n\nprint(ExampleClass.extra_attribute)"
            },
            {
                "question": "Saya ingin tahu bagaimana cara menambahkan metode baru ke dalam class menggunakan metaclass di Python. Bagaimana cara melakukannya? Bisa tolong dijelaskan dengan contoh yang jelas?",
                "answer": "Anda bisa menambahkan metode ke class menggunakan metaclass dengan menambahkan metode ke dictionary atribut dalam metode `__new__`. Misalnya, jika Anda ingin menambahkan metode baru yang disebut `new_method`, Anda bisa melakukannya seperti ini:",
                "question_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        def new_method(self):\n            return 'This is a new method'\n        dct['new_method'] = new_method\n        return super().__new__(cls, name, bases, dct)\n\nclass ExampleClass(metaclass=Meta):\n    pass\n\nobj = ExampleClass()\nprint(obj.new_method())",
                "answer_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        def new_method(self):\n            return 'This is a new method'\n        dct['new_method'] = new_method\n        return super().__new__(cls, name, bases, dct)\n\nclass ExampleClass(metaclass=Meta):\n    pass\n\nobj = ExampleClass()\nprint(obj.new_method())"
            }
        ]
    },
    {
        "sumber": "pythonadvancedtopics.com",
        "penulis": "Lina Wibowo",
        "tanggal": "2024-12-20",
        "judul": "Pemrograman Asinkron dengan Asyncio di Python",
        "tingkat_kesulitan": "Lanjut",
        "tag": ["python", "asyncio", "asynchronous", "lanjut"],
        "konten": "Artikel ini menjelaskan cara menggunakan modul asyncio di Python untuk pemrograman asinkron dan bagaimana memanfaatkan coroutine, tasks, dan event loop.",
        "pertanyaan": [
            {
                "question": "Saya baru saja belajar tentang konsep asinkron di Python dan saya menemukan modul asyncio. Bisa tolong dijelaskan dengan sederhana apa itu asyncio dan bagaimana cara mendefinisikan coroutine menggunakan async/await? Saya butuh contoh yang bisa saya coba sendiri.",
                "answer": "Modul asyncio adalah modul standar Python yang menyediakan infrastruktur untuk penulisan kode asinkron menggunakan sintaks async/await. Anda bisa mendefinisikan coroutine dengan menggunakan kata kunci `async` sebelum definisi fungsi dan `await` untuk panggilan fungsi asinkron. Misalnya, berikut adalah contoh sederhana:",
                "question_code": "import asyncio\n\nasync def my_coroutine():\n    await asyncio.sleep(1)\n    print('Coroutine executed')\n\nasyncio.run(my_coroutine())",
                "answer_code": "import asyncio\n\nasync def my_coroutine():\n    await asyncio.sleep(1)\n    print('Coroutine executed')\n\nasyncio.run(my_coroutine())"
            },
            {
                "question": "Bagaimana cara menjalankan coroutine di Python menggunakan event loop? Saya agak bingung tentang bagaimana cara kerja event loop dan bagaimana menggunakannya untuk menjalankan coroutine. Bisakah Anda memberikan contoh yang mudah dipahami?",
                "answer": "Anda bisa menjalankan coroutine dengan event loop menggunakan fungsi `asyncio.run`. Event loop adalah mekanisme yang mengatur eksekusi coroutine dan I/O secara asinkron. Misalnya, Anda bisa menjalankan coroutine seperti berikut:",
                "question_code": "import asyncio\n\nasync def say_hello():\n    await asyncio.sleep(2)\n    print('Hello, World!')\n\nasyncio.run(say_hello())",
                "answer_code": "import asyncio\n\nasync def say_hello():\n    await asyncio.sleep(2)\n    print('Hello, World!')\n\nasyncio.run(say_hello())"
            },
            {
                "question": "Saya ingin membuat beberapa tasks asinkron di Python menggunakan asyncio. Bagaimana cara membuat dan menjalankan beberapa tasks sekaligus? Tolong beri contoh kode yang jelas dan mudah dimengerti.",
                "answer": "Anda bisa membuat beberapa tasks menggunakan `asyncio.create_task` dan menjalankannya secara bersamaan dengan `asyncio.gather`. Misalnya, Anda bisa membuat dan menjalankan beberapa tasks seperti berikut:",
                "question_code": "import asyncio\n\nasync def task(number):\n    await asyncio.sleep(1)\n    print(f'Task {number} selesai')\n\nasync def main():\n    tasks = [asyncio.create_task(task(i)) for i in range(3)]\n    await asyncio.gather(*tasks)\n\nasyncio.run(main())",
                "answer_code": "import asyncio\n\nasync def task(number):\n    await asyncio.sleep(1)\n    print(f'Task {number} selesai')\n\nasync def main():\n    tasks = [asyncio.create_task(task(i)) for i in range(3)]\n    await asyncio.gather(*tasks)\n\nasyncio.run(main())"
            },
            {
                "question": "Saya membaca tentang `asyncio.Queue` dan ingin menggunakannya untuk komunikasi antar coroutines. Bagaimana cara mengimplementasikan producer dan consumer menggunakan asyncio.Queue? Tolong beri contoh yang jelas.",
                "answer": "Anda bisa menggunakan `asyncio.Queue` untuk komunikasi antar coroutines dengan metode `put` dan `get` untuk menambahkan dan mengambil item dari queue. Misalnya, berikut adalah contoh producer dan consumer menggunakan `asyncio.Queue`:",
                "question_code": "import asyncio\n\nasync def producer(queue):\n    for i in range(3):\n        await asyncio.sleep(1)\n        await queue.put(i)\n        print(f'Produced {i}')\n\nasync def consumer(queue):\n    while True:\n        item = await queue.get()\n        if item is None:\n            break\n        print(f'Consumed {item}')\n\nasync def main():\n    queue = asyncio.Queue()\n    producer_task = asyncio.create_task(producer(queue))\n    consumer_task = asyncio.create_task(consumer(queue))\n    await producer_task\n    await queue.put(None)\n    await consumer_task\n\nasyncio.run(main())",
                "answer_code": "import asyncio\n\nasync def producer(queue):\n    for i in range(3):\n        await asyncio.sleep(1)\n        await queue.put(i)\n        print(f'Produced {i}')\n\nasync def consumer(queue):\n    while True:\n        item = await queue.get()\n        if item is None:\n            break\n        print(f'Consumed {item}')\n\nasync def main():\n    queue = asyncio.Queue()\n    producer_task = asyncio.create_task(producer(queue))\n    consumer_task = asyncio.create_task(consumer(queue))\n    await producer_task\n    await queue.put(None)\n    await consumer_task\n\nasyncio.run(main())"
            },
            {
                "question": "Saya mencoba memahami bagaimana menangani timeout dalam coroutine dengan asyncio. Bagaimana cara menetapkan batas waktu untuk eksekusi coroutine dan menangani timeout dengan baik? Bisakah Anda menjelaskan dengan contoh?",
                "answer": "Anda bisa menangani timeout dengan asyncio menggunakan fungsi `asyncio.wait_for` dan menentukan batas waktu untuk eksekusi coroutine. Misalnya, berikut adalah contoh cara menghentikan coroutine jika berjalan terlalu lama:",
                "question_code": "import asyncio\n\nasync def long_task():\n    await asyncio.sleep(5)\n\nasync def main():\n    try:\n        await asyncio.wait_for(long_task(), timeout=2.0)\n    except asyncio.TimeoutError:\n        print('The task took too long and was cancelled')\n\nasyncio.run(main())",
                "answer_code": "import asyncio\n\nasync def long_task():\n    await asyncio.sleep(5)\n\nasync def main():\n    try:\n        await asyncio.wait_for(long_task(), timeout=2.0)\n    except asyncio.TimeoutError:\n        print('The task took too long and was cancelled')\n\nasyncio.run(main())"
            }
        ]
    }
]
