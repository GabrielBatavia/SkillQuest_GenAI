[
    {
        "sumber": "pythonmudah.com",
        "penulis": "Fajar Prasetyo",
        "tanggal": "2023-05-18",
        "judul": "Pemakaian String di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "string", "dasar"],
        "konten": "Artikel ini menguraikan cara menggunakan string di Python, termasuk cara membuat, mengakses, memodifikasi, dan memformat string.",
        "pertanyaan": [
            {
                "question": "Bagaimana cara membuat string di Python?",
                "answer": "Anda bisa membuat string dengan tanda kutip tunggal atau ganda. Contohnya: `str1 = 'Hello'` atau `str2 = \"World\"`."
            },
            {
                "question": "Bagaimana cara mengakses karakter dalam string?",
                "answer": "Karakter dalam string dapat diakses menggunakan indeks. Misalnya: `str1[0]` untuk karakter pertama."
            },
            {
                "question": "Bagaimana cara menggabungkan dua string?",
                "answer": "Dua string dapat digabungkan dengan menggunakan operator `+`. Misalnya: `str1 + str2`."
            },
            {
                "question": "Bagaimana cara mengulang string beberapa kali?",
                "question_code": "str1 * 3",
                "answer": "Anda dapat mengulang string beberapa kali dengan menggunakan operator `*`. Contohnya: `str1 * 3`.",
                "answer_code": "str1 * 3"
            },
            {
                "question": "Bagaimana cara memeriksa apakah substring ada dalam string?",
                "question_code": "'Hello' in str1",
                "answer": "Anda bisa memeriksa apakah substring ada dalam string dengan operator `in`. Misalnya: `'Hello' in str1`.",
                "answer_code": "'Hello' in str1"
            },
            {
                "question": "Bagaimana cara mengganti substring dalam string?",
                "question_code": "str1.replace('Hello', 'Hi')",
                "answer": "Mengganti substring dalam string dapat dilakukan dengan metode `replace()`. Misalnya: `str1.replace('Hello', 'Hi')`.",
                "answer_code": "str1.replace('Hello', 'Hi')"
            },
            {
                "question": "Bagaimana cara mengubah string menjadi huruf besar?",
                "question_code": "str1.upper()",
                "answer": "Anda dapat mengubah string menjadi huruf besar dengan metode `upper()`. Contohnya: `str1.upper()`.",
                "answer_code": "str1.upper()"
            },
            {
                "question": "Bagaimana cara menghapus spasi di awal dan akhir string?",
                "question_code": "str1.strip()",
                "answer": "Spasi di awal dan akhir string dapat dihapus dengan metode `strip()`. Contohnya: `str1.strip()`.",
                "answer_code": "str1.strip()"
            },
            {
                "question": "Bagaimana cara memformat string dengan variabel?",
                "question_code": "\"Hello, {}\".format(name)",
                "answer": "Memformat string dengan variabel dapat dilakukan menggunakan metode `format()`. Misalnya: `\"Hello, {}\".format(name)`.",
                "answer_code": "\"Hello, {}\".format(name)"
            }
        ]
    },
    {
        "sumber": "belajarpemrogramanpython.com",
        "penulis": "Mira Handayani",
        "tanggal": "2024-04-22",
        "judul": "Penggunaan List Comprehensions di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "list comprehensions", "dasar"],
        "konten": "Artikel ini membahas cara menggunakan list comprehensions di Python untuk membuat dan memanipulasi list dengan sintaks yang lebih ringkas.",
        "pertanyaan": [
            {
                "question": "Apa itu list comprehensions di Python?",
                "answer": "List comprehensions adalah cara cepat untuk membuat list baru dari iterable yang ada menggunakan satu baris kode."
            },
            {
                "question": "Bagaimana cara membuat list comprehension sederhana?",
                "answer": "List comprehension sederhana bisa dibuat dengan sintaks `[expression for item in iterable]`. Misalnya: `[x for x in range(5)]`."
            },
            {
                "question": "Bagaimana cara menambahkan kondisi ke dalam list comprehension?",
                "question_code": "[x for x in range(10) if x % 2 == 0]",
                "answer": "Kondisi bisa ditambahkan ke dalam list comprehension dengan sintaks `[expression for item in iterable if condition]`. Misalnya: `[x for x in range(10) if x % 2 == 0]`.",
                "answer_code": "[x for x in range(10) if x % 2 == 0]"
            },
            {
                "question": "Bagaimana cara membuat list comprehension dengan fungsi?",
                "question_code": "[x**2 for x in range(10)]",
                "answer": "List comprehension dengan fungsi bisa dibuat dengan memasukkan fungsi dalam ekspresi. Misalnya: `[x**2 for x in range(10)]`.",
                "answer_code": "[x**2 for x in range(10)]"
            },
            {
                "question": "Bagaimana cara membuat list comprehension dari list yang ada?",
                "question_code": "numbers = [1, 2, 3, 4, 5]\nsquares = [x**2 for x in numbers]",
                "answer": "List comprehension dari list yang ada bisa dibuat dengan menggunakan list sebagai iterable. Misalnya: `[x**2 for x in numbers]`.",
                "answer_code": "squares = [x**2 for x in numbers]"
            },
            {
                "question": "Bagaimana cara membuat nested list comprehensions?",
                "question_code": "[[x, y] for x in range(3) for y in range(3)]",
                "answer": "Nested list comprehensions bisa dibuat dengan dua loop for dalam satu list comprehension. Misalnya: `[[x, y] for x in range(3) for y in range(3)]`.",
                "answer_code": "[[x, y] for x in range(3) for y in range(3)]"
            },
            {
                "question": "Bagaimana cara menggunakan list comprehension untuk memanipulasi string?",
                "question_code": "[char.upper() for char in 'hello']",
                "answer": "List comprehension bisa digunakan untuk memanipulasi string dengan iterasi karakter dalam string. Misalnya: `[char.upper() for char in 'hello']`.",
                "answer_code": "[char.upper() for char in 'hello']"
            },
            {
                "question": "Bagaimana cara membuat list comprehension dari dictionary?",
                "question_code": "{k: v**2 for k, v in {'a': 1, 'b': 2}.items()}",
                "answer": "List comprehension dari dictionary bisa dibuat dengan menggunakan `.items()` untuk iterasi kunci dan nilai. Misalnya: `{k: v**2 for k, v in {'a': 1, 'b': 2}.items()}`.",
                "answer_code": "{k: v**2 for k, v in {'a': 1, 'b': 2}.items()}"
            },
            {
                "question": "Bagaimana cara membuat set comprehension di Python?",
                "question_code": "{x for x in range(5)}",
                "answer": "Set comprehension bisa dibuat dengan tanda kurung kurawal `{}`. Misalnya: `{x for x in range(5)}`.",
                "answer_code": "{x for x in range(5)}"
            }
        ]
    }
]
