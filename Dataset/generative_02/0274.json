[
    {
        "sumber": "pythonforintermediate.com",
        "penulis": "Rama Widodo",
        "tanggal": "2024-12-15",
        "judul": "Penggunaan Metode Collections di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "collections", "menengah"],
        "konten": "Artikel ini menjelaskan cara menggunakan beberapa metode dari modul collections di Python seperti `Counter`, `defaultdict`, `namedtuple`, dan `deque`.",
        "pertanyaan": [
            {
                "question": "Saya dengar ada modul collections di Python. Itu apa ya fungsinya?",
                "answer": "Modul collections adalah modul standar Python yang menyediakan struktur data alternatif untuk meningkatkan fleksibilitas dan performa."
            },
            {
                "question": "Bagaimana cara menggunakan `Counter` dari modul collections di Python? Bisa kasih contoh?",
                "question_code": "from collections import Counter\nkata_kata = ['halo', 'dunia', 'halo', 'python']\nhitung = Counter(kata_kata)\njumlah_halo = hitung['halo']",
                "answer": "Anda bisa menggunakan `Counter` untuk menghitung kemunculan elemen dalam iterable. Misalnya, `Counter(['halo', 'dunia', 'halo', 'python'])` akan menghitung jumlah setiap kata.",
                "answer_code": "from collections import Counter\nkata_kata = ['halo', 'dunia', 'halo', 'python']\nhitung = Counter(kata_kata)\njumlah_halo = hitung['halo']"
            },
            {
                "question": "Apa itu `defaultdict` di Python?",
                "answer": "`defaultdict` adalah subclass dari dictionary yang memberikan nilai default untuk key yang tidak ada."
            },
            {
                "question": "Gimana cara menggunakan `defaultdict` dari modul collections di Python? Bisa tolong dijelaskan?",
                "question_code": "from collections import defaultdict\nangka_default = defaultdict(int)\nangka_default['satu'] += 1",
                "answer": "Anda bisa menggunakan `defaultdict` dengan memberikan tipe data atau fungsi sebagai argumen untuk nilai default. Misalnya, `defaultdict(int)` untuk membuat dictionary dengan nilai default 0.",
                "answer_code": "from collections import defaultdict\nangka_default = defaultdict(int)\nangka_default['satu'] += 1"
            },
            {
                "question": "Apa itu `namedtuple` di Python?",
                "answer": "`namedtuple` adalah subclass dari tuple yang memungkinkan akses elemen dengan nama atribut."
            },
            {
                "question": "Bagaimana cara menggunakan `namedtuple` dari modul collections di Python? Bisa beri contoh?",
                "question_code": "from collections import namedtuple\nOrang = namedtuple('Orang', ['nama', 'umur'])\norang_saya = Orang(nama='Andi', umur=30)\numur_orang = orang_saya.umur",
                "answer": "Anda bisa menggunakan `namedtuple` dengan mendefinisikan nama tuple dan field names. Misalnya, `namedtuple('Orang', ['nama', 'umur'])` untuk mendeskripsikan orang.",
                "answer_code": "from collections import namedtuple\nOrang = namedtuple('Orang', ['nama', 'umur'])\norang_saya = Orang(nama='Andi', umur=30)\numur_orang = orang_saya.umur"
            },
            {
                "question": "Apa itu `deque` di Python?",
                "answer": "`deque` adalah double-ended queue yang memungkinkan penambahan dan penghapusan elemen dari kedua ujung dengan performa yang baik."
            },
            {
                "question": "Gimana cara menggunakan `deque` dari modul collections di Python? Contoh kasusnya apa ya?",
                "question_code": "from collections import deque\nantrian = deque(['tugas1', 'tugas2', 'tugas3'])\nantrian.append('tugas4')\nantrian.appendleft('tugas0')",
                "answer": "Anda bisa menggunakan `deque` untuk operasi penambahan dan penghapusan elemen dari kedua ujung dengan performa yang baik. Misalnya, `deque(['tugas1', 'tugas2', 'tugas3'])` untuk antrian tugas.",
                "answer_code": "from collections import deque\nantrian = deque(['tugas1', 'tugas2', 'tugas3'])\nantrian.append('tugas4')\nantrian.appendleft('tugas0')"
            }
        ]
    },
    {
        "sumber": "advancedpythonsyntax.com",
        "penulis": "Dewi Putri",
        "tanggal": "2024-12-20",
        "judul": "Penggunaan Fungsi Any dan All di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "any", "all", "menengah"],
        "konten": "Artikel ini menjelaskan cara menggunakan fungsi built-in `any` dan `all` di Python untuk evaluasi kondisi dalam iterable.",
        "pertanyaan": [
            {
                "question": "Fungsi `any` di Python itu buat apa sih?",
                "answer": "Fungsi `any` digunakan untuk memeriksa apakah setidaknya satu elemen dalam iterable bernilai True."
            },
            {
                "question": "Bisa kasih contoh cara pakai fungsi `any` di Python?",
                "question_code": "nilai = [0, 1, 2, 0]\nada_nilai_positif = any(n > 0 for n in nilai)",
                "answer": "Anda bisa menggunakan fungsi `any` dengan memberikan iterable sebagai argumen. Misalnya, `any(n > 0 for n in nilai)` untuk memeriksa apakah ada nilai positif.",
                "answer_code": "nilai = [0, 1, 2, 0]\nada_nilai_positif = any(n > 0 for n in nilai)"
            },
            {
                "question": "Apa itu fungsi `all` di Python?",
                "answer": "Fungsi `all` digunakan untuk memeriksa apakah semua elemen dalam iterable bernilai True."
            },
            {
                "question": "Bagaimana cara pakai fungsi `all` di Python? Bisa beri contohnya?",
                "question_code": "kondisi = [True, True, False]\nsemua_benar = all(kondisi)",
                "answer": "Anda bisa menggunakan fungsi `all` dengan memberikan iterable sebagai argumen. Misalnya, `all(kondisi)` untuk memeriksa apakah semua nilai adalah True.",
                "answer_code": "kondisi = [True, True, False]\nsemua_benar = all(kondisi)"
            },
            {
                "question": "Gimana cara pakai fungsi `any` dengan list comprehension di Python?",
                "question_code": "list_angka = [10, 20, 30]\nada_di_atas_25 = any(angka > 25 for angka in list_angka)",
                "answer": "Anda bisa menggunakan fungsi `any` dengan list comprehension untuk evaluasi kondisi dalam list. Misalnya, `any(angka > 25 for angka in list_angka)` untuk memeriksa apakah ada angka di atas 25.",
                "answer_code": "list_angka = [10, 20, 30]\nada_di_atas_25 = any(angka > 25 for angka in list_angka)"
            },
            {
                "question": "Bagaimana cara pakai fungsi `all` dengan list comprehension di Python?",
                "question_code": "list_angka = [1, 2, 3, 4]\nsemua_positif = all(angka > 0 for angka in list_angka)",
                "answer": "Anda bisa menggunakan fungsi `all` dengan list comprehension untuk evaluasi kondisi dalam list. Misalnya, `all(angka > 0 for angka in list_angka)` untuk memeriksa apakah semua angka positif.",
                "answer_code": "list_angka = [1, 2, 3, 4]\nsemua_positif = all(angka > 0 for angka in list_angka)"
            },
            {
                "question": "Bagaimana cara pakai fungsi `any` untuk memeriksa apakah ada elemen yang kosong dalam list di Python?",
                "question_code": "list_kata = ['halo', '', 'dunia']\nada_kosong = any(not kata for kata in list_kata)",
                "answer": "Anda bisa menggunakan fungsi `any` untuk memeriksa apakah ada elemen yang kosong dalam list dengan list comprehension. Misalnya, `any(not kata for kata in list_kata)`.",
                "answer_code": "list_kata = ['halo', '', 'dunia']\nada_kosong = any(not kata for kata in list_kata)"
            },
            {
                "question": "Bagaimana cara pakai fungsi `all` untuk memeriksa apakah semua elemen adalah bilangan positif di Python?",
                "question_code": "daftar_angka = [1, 2, 3, 4]\nsemua_positif = all(angka > 0 for angka in daftar_angka)",
                "answer": "Anda bisa menggunakan fungsi `all` untuk memeriksa apakah semua elemen adalah bilangan positif dengan list comprehension. Misalnya, `all(angka > 0 for angka in daftar_angka)`.",
                "answer_code": "daftar_angka = [1, 2, 3, 4]\nsemua_positif = all(angka > 0 for angka in daftar_angka)"
            }
        ]
    }
]
