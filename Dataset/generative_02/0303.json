[
    {
        "sumber": "advancedpythonpro.com",
        "penulis": "Ahmad Fauzi",
        "tanggal": "2024-12-15",
        "judul": "Metaprogramming dengan Metaclasses di Python",
        "tingkat_kesulitan": "Lanjut",
        "tag": ["python", "metaclasses", "metaprogramming", "lanjut"],
        "konten": "Artikel ini menjelaskan cara menggunakan metaclasses di Python untuk metaprogramming dan bagaimana mereka memungkinkan Anda untuk memodifikasi perilaku class secara dinamis.",
        "pertanyaan": [
            {
                "question": "Saya sedang mencoba memahami konsep yang cukup kompleks ini yang disebut metaclass dalam Python. Bisakah Anda menjelaskan secara sederhana apa itu metaclass dan mungkin memberikan contoh dasar tentang bagaimana saya bisa mendefinisikan metaclass untuk menambahkan atribut baru ke class yang saya buat? Saya ingin memastikan bahwa saya memahami bagaimana cara kerjanya secara praktis.",
                "answer": "Metaclass adalah class dari class yang mendefinisikan bagaimana class lain berperilaku. Metaclass dapat digunakan untuk memodifikasi pembuatan class secara dinamis. Contoh berikut menunjukkan bagaimana mendefinisikan metaclass yang menambahkan atribut baru ke class:",
                "question_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        x = super().__new__(cls, name, bases, dct)\n        x.new_attribute = 'Added by Meta'\n        return x\n\nclass SampleClass(metaclass=Meta):\n    pass",
                "answer_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        x = super().__new__(cls, name, bases, dct)\n        x.new_attribute = 'Added by Meta'\n        return x\n\nclass SampleClass(metaclass=Meta):\n    pass\n\nprint(SampleClass.new_attribute)"
            },
            {
                "question": "Dalam proses belajar saya tentang metaclasses di Python, saya menemukan bahwa metaclass bisa digunakan untuk memodifikasi perilaku class. Bagaimana caranya? Bisa beri saya contoh tentang bagaimana menambahkan metode baru ke class menggunakan metaclass? Saya ingin mencoba memahami bagaimana ini bisa diterapkan dalam kode saya.",
                "answer": "Untuk menambahkan metode baru ke class menggunakan metaclass, Anda bisa mendefinisikan metaclass yang menambahkan metode ke dictionary atribut dalam metode `__new__`. Contoh berikut menunjukkan bagaimana menambahkan metode baru:",
                "question_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        def new_method(self):\n            return 'Metaclass added this method'\n        dct['new_method'] = new_method\n        return super().__new__(cls, name, bases, dct)\n\nclass AnotherClass(metaclass=Meta):\n    pass\n\nobj = AnotherClass()\nprint(obj.new_method())",
                "answer_code": "class Meta(type):\n    def __new__(cls, name, bases, dct):\n        def new_method(self):\n            return 'Metaclass added this method'\n        dct['new_method'] = new_method\n        return super().__new__(cls, name, bases, dct)\n\nclass AnotherClass(metaclass=Meta):\n    pass\n\nobj = AnotherClass()\nprint(obj.new_method())"
            }
        ]
    },
    {
        "sumber": "pythonadvancedtopics.com",
        "penulis": "Lina Wibowo",
        "tanggal": "2024-12-20",
        "judul": "Pemrograman Asinkron dengan Asyncio di Python",
        "tingkat_kesulitan": "Lanjut",
        "tag": ["python", "asyncio", "asynchronous", "lanjut"],
        "konten": "Artikel ini menjelaskan cara menggunakan modul asyncio di Python untuk pemrograman asinkron dan bagaimana memanfaatkan coroutine, tasks, dan event loop.",
        "pertanyaan": [
            {
                "question": "Saya baru saja mendengar tentang asyncio di Python dan saya masih sangat bingung tentang apa itu dan bagaimana cara kerjanya. Bisakah Anda menjelaskan dengan sederhana apa itu asyncio dan bagaimana cara mendefinisikan coroutine menggunakan async/await? Saya butuh contoh yang sangat sederhana yang bisa saya pahami dan coba sendiri.",
                "answer": "Asyncio adalah modul standar Python yang menyediakan infrastruktur untuk penulisan kode asinkron menggunakan sintaks async/await. Anda bisa mendefinisikan coroutine dengan kata kunci `async` sebelum definisi fungsi dan `await` untuk panggilan fungsi asinkron. Berikut adalah contoh dasar:",
                "question_code": "import asyncio\n\nasync def my_coroutine():\n    await asyncio.sleep(1)\n    print('Coroutine executed')\n\nasyncio.run(my_coroutine())",
                "answer_code": "import asyncio\n\nasync def my_coroutine():\n    await asyncio.sleep(1)\n    print('Coroutine executed')\n\nasyncio.run(my_coroutine())"
            },
            {
                "question": "Saya mencoba memahami cara menjalankan coroutine dengan event loop di Python. Bisa Anda jelaskan bagaimana caranya dan mungkin memberikan contoh yang sangat sederhana yang bisa saya ikuti? Saya ingin memastikan saya benar-benar mengerti konsep dasar ini.",
                "answer": "Anda bisa menjalankan coroutine dengan event loop menggunakan fungsi `asyncio.run`. Event loop mengatur eksekusi coroutine dan I/O secara asinkron. Berikut adalah contoh sederhana bagaimana menjalankan coroutine dengan event loop:",
                "question_code": "import asyncio\n\nasync def say_hello():\n    await asyncio.sleep(1)\n    print('Hello, World!')\n\nasyncio.run(say_hello())",
                "answer_code": "import asyncio\n\nasync def say_hello():\n    await asyncio.sleep(1)\n    print('Hello, World!')\n\nasyncio.run(say_hello())"
            },
            {
                "question": "Saya mendengar bahwa dengan asyncio kita bisa membuat dan menjalankan beberapa tasks sekaligus. Bagaimana cara melakukannya? Bisakah Anda memberikan contoh yang mudah dimengerti?",
                "answer": "Untuk membuat dan menjalankan beberapa tasks sekaligus dengan asyncio, Anda bisa menggunakan `asyncio.create_task` dan `asyncio.gather`. Berikut adalah contoh bagaimana melakukannya:",
                "question_code": "import asyncio\n\nasync def my_task(task_id):\n    await asyncio.sleep(1)\n    print(f'Task {task_id} selesai')\n\nasync def main():\n    tasks = [asyncio.create_task(my_task(i)) for i in range(3)]\n    await asyncio.gather(*tasks)\n\nasyncio.run(main())",
                "answer_code": "import asyncio\n\nasync def my_task(task_id):\n    await asyncio.sleep(1)\n    print(f'Task {task_id} selesai')\n\nasync def main():\n    tasks = [asyncio.create_task(my_task(i)) for i in range(3)]\n    await asyncio.gather(*tasks)\n\nasyncio.run(main())"
            },
            {
                "question": "Saya ingin tahu bagaimana cara menggunakan asyncio.Queue untuk komunikasi antar coroutines di Python. Bagaimana cara mengimplementasikan producer dan consumer menggunakan asyncio.Queue? Tolong beri contoh yang jelas agar saya bisa memahaminya.",
                "answer": "Anda bisa menggunakan `asyncio.Queue` untuk komunikasi antar coroutines dengan metode `put` dan `get`. Berikut adalah contoh implementasi producer dan consumer menggunakan `asyncio.Queue`:",
                "question_code": "import asyncio\n\nasync def producer(queue):\n    for i in range(5):\n        await asyncio.sleep(1)\n        await queue.put(i)\n        print(f'Produced {i}')\n\nasync def consumer(queue):\n    while True:\n        item = await queue.get()\n        if item is None:\n            break\n        print(f'Consumed {item}')\n\nasync def main():\n    queue = asyncio.Queue()\n    producer_task = asyncio.create_task(producer(queue))\n    consumer_task = asyncio.create_task(consumer(queue))\n    await producer_task\n    await queue.put(None)\n    await consumer_task\n\nasyncio.run(main())",
                "answer_code": "import asyncio\n\nasync def producer(queue):\n    for i in range(5):\n        await asyncio.sleep(1)\n        await queue.put(i)\n        print(f'Produced {i}')\n\nasync def consumer(queue):\n    while True:\n        item = await queue.get()\n        if item is None:\n            break\n        print(f'Consumed {item}')\n\nasync def main():\n    queue = asyncio.Queue()\n    producer_task = asyncio.create_task(producer(queue))\n    consumer_task = asyncio.create_task(consumer(queue))\n    await producer_task\n    await queue.put(None)\n    await consumer_task\n\nasyncio.run(main())"
            },
            {
                "question": "Saya sedang belajar tentang asyncio di Python dan ingin tahu bagaimana cara menangani timeout dalam coroutine. Bagaimana cara menetapkan batas waktu untuk eksekusi coroutine dan menangani timeout jika coroutine tersebut berjalan terlalu lama? Tolong beri contoh yang mudah dipahami.",
                "answer": "Anda bisa menangani timeout dalam coroutine menggunakan fungsi `asyncio.wait_for` dan menentukan batas waktu untuk eksekusi coroutine. Berikut adalah contoh cara menetapkan timeout dan menangani timeout error:",
                "question_code": "import asyncio\n\nasync def long_task():\n    await asyncio.sleep(5)\n\nasync def main():\n    try:\n        await asyncio.wait_for(long_task(), timeout=2.0)\n    except asyncio.TimeoutError:\n        print('The task took too long and was cancelled')\n\nasyncio.run(main())",
                "answer_code": "import asyncio\n\nasync def long_task():\n    await asyncio.sleep(5)\n\nasync def main():\n    try:\n        await asyncio.wait_for(long_task(), timeout=2.0)\n    except asyncio.TimeoutError:\n        print('The task took too long and was cancelled')\n\nasyncio.run(main())"
            }
        ]
    }
]
