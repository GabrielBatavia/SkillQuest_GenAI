[
    {
        "sumber": "belajarcodingpython.com",
        "penulis": "Ayu Pratiwi",
        "tanggal": "2023-02-20",
        "judul": "Loop While: Konsep dan Implementasi di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "loop", "while"],
        "konten": "Artikel ini menjelaskan konsep dasar dari loop while di Python, termasuk cara menulis, menjalankan, dan mengontrol loop tersebut.",
        "pertanyaan": [
            {
                "question": "Apa yang dimaksud dengan loop while dalam pemrograman Python?",
                "answer": "Loop while adalah struktur kontrol yang digunakan untuk menjalankan blok kode berulang kali selama kondisi tertentu tetap benar."
            },
            {
                "question": "Bagaimana sintaks dasar untuk menulis loop while di Python?",
                "answer": "Sintaks dasar untuk loop while adalah `while kondisi:` diikuti dengan blok kode yang akan diulang. Contoh: `while i < 5: print(i)`."
            },
            {
                "question": "Apa yang harus dilakukan jika ingin menghentikan loop while lebih awal?",
                "question_code": "while i < 10:\n    if i == 5:\n        break\n    i += 1",
                "answer": "Untuk menghentikan loop while sebelum kondisi loop selesai, gunakan pernyataan `break`. Contoh: `if i == 5: break`.",
                "answer_code": "while i < 10:\n    if i == 5:\n        break\n    i += 1"
            },
            {
                "question": "Bagaimana cara mengabaikan iterasi saat ini dalam loop while?",
                "question_code": "while i < 10:\n    i += 1\n    if i == 5:\n        continue\n    print(i)",
                "answer": "Gunakan pernyataan `continue` untuk melewati iterasi saat ini dalam loop. Contoh: `if i == 5: continue`.",
                "answer_code": "while i < 10:\n    i += 1\n    if i == 5:\n        continue\n    print(i)"
            },
            {
                "question": "Bagaimana cara membuat loop while yang berjalan terus menerus?",
                "question_code": "while True:\n    print('Loop ini berjalan selamanya')",
                "answer": "Loop while yang berjalan terus menerus menggunakan kondisi `True`. Contoh: `while True:`. Pastikan ada cara untuk menghentikan loop tersebut.",
                "answer_code": "while True:\n    print('Loop ini berjalan selamanya')"
            },
            {
                "question": "Apa fungsi dari else dalam loop while?",
                "question_code": "i = 0\nwhile i < 5:\n    print(i)\n    i += 1\nelse:\n    print('Loop selesai')",
                "answer": "Pernyataan `else` digunakan dalam loop while untuk mengeksekusi kode jika loop selesai tanpa pernyataan `break`. Contoh: `else: print('Loop selesai')`.",
                "answer_code": "i = 0\nwhile i < 5:\n    print(i)\n    i += 1\nelse:\n    print('Loop selesai')"
            },
            {
                "question": "Bagaimana cara membuat loop while dengan beberapa kondisi?",
                "question_code": "while i < 5 and j > 0:\n    print(i, j)\n    i += 1\n    j -= 1",
                "answer": "Gunakan operator logika `and` atau `or` untuk membuat loop while dengan beberapa kondisi. Contoh: `while i < 5 and j > 0:`.",
                "answer_code": "while i < 5 and j > 0:\n    print(i, j)\n    i += 1\n    j -= 1"
            },
            {
                "question": "Bagaimana cara menggunakan loop while untuk iterasi melalui list?",
                "question_code": "my_list = [10, 20, 30, 40]\nindex = 0\nwhile index < len(my_list):\n    print(my_list[index])\n    index += 1",
                "answer": "Untuk iterasi melalui list dengan loop while, gunakan indeks untuk mengakses elemen. Contoh: `while index < len(my_list):`.",
                "answer_code": "my_list = [10, 20, 30, 40]\nindex = 0\nwhile index < len(my_list):\n    print(my_list[index])\n    index += 1"
            },
            {
                "question": "Bagaimana cara membuat loop while dengan kondisi yang bergantung pada input pengguna?",
                "question_code": "user_input = ''\nwhile user_input.lower() != 'stop':\n    user_input = input('Masukkan sesuatu (ketik \"stop\" untuk berhenti): ')\n    print('Anda memasukkan:', user_input)",
                "answer": "Untuk menggunakan input pengguna sebagai kondisi loop, gunakan fungsi `input()`. Contoh: `while user_input.lower() != 'stop':`.",
                "answer_code": "user_input = ''\nwhile user_input.lower() != 'stop':\n    user_input = input('Masukkan sesuatu (ketik \"stop\" untuk berhenti): ')\n    print('Anda memasukkan:', user_input)"
            }
        ]
    },
    {
        "sumber": "panduanpython.com",
        "penulis": "Rudi Setiawan",
        "tanggal": "2024-05-22",
        "judul": "Dasar-Dasar Penggunaan Dictionary di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "dictionary", "dasar"],
        "konten": "Artikel ini membahas cara kerja dictionary di Python, termasuk cara membuat, mengakses, dan memanipulasi dictionary.",
        "pertanyaan": [
            {
                "question": "Apa itu dictionary di Python?",
                "answer": "Dictionary adalah struktur data yang menyimpan data dalam pasangan kunci-nilai, memungkinkan akses yang cepat ke nilai dengan kunci yang sesuai."
            },
            {
                "question": "Bagaimana cara mendefinisikan dictionary baru di Python?",
                "answer": "Dictionary baru didefinisikan dengan menggunakan tanda kurung kurawal `{}` dan pasangan kunci-nilai yang dipisahkan dengan koma. Contoh: `my_dict = {'name': 'John', 'age': 30}`."
            },
            {
                "question": "Bagaimana cara mengakses nilai berdasarkan kunci dalam dictionary?",
                "answer": "Nilai dalam dictionary diakses dengan menggunakan kunci dalam tanda kurung siku. Contoh: `value = my_dict['name']`."
            },
            {
                "question": "Bagaimana cara menambahkan entri baru ke dalam dictionary?",
                "question_code": "my_dict['new_key'] = 'new_value'",
                "answer": "Tambah entri baru dengan menetapkan nilai ke kunci baru. Contoh: `my_dict['new_key'] = 'new_value'`.",
                "answer_code": "my_dict['new_key'] = 'new_value'"
            },
            {
                "question": "Bagaimana cara menghapus entri dari dictionary?",
                "question_code": "del my_dict['key']",
                "answer": "Hapus entri dari dictionary dengan perintah `del`. Contoh: `del my_dict['key']`.",
                "answer_code": "del my_dict['key']"
            },
            {
                "question": "Bagaimana cara memeriksa keberadaan kunci dalam dictionary?",
                "question_code": "'key' in my_dict",
                "answer": "Gunakan operator `in` untuk memeriksa apakah kunci ada dalam dictionary. Contoh: `'key' in my_dict`.",
                "answer_code": "'key' in my_dict"
            },
            {
                "question": "Bagaimana cara mendapatkan semua kunci dalam dictionary?",
                "question_code": "my_dict.keys()",
                "answer": "Untuk mendapatkan semua kunci dalam dictionary, gunakan metode `keys()`. Contoh: `my_dict.keys()`.",
                "answer_code": "my_dict.keys()"
            },
            {
                "question": "Bagaimana cara mendapatkan semua nilai dalam dictionary?",
                "question_code": "my_dict.values()",
                "answer": "Gunakan metode `values()` untuk mendapatkan semua nilai dalam dictionary. Contoh: `my_dict.values()`.",
                "answer_code": "my_dict.values()"
            },
            {
                "question": "Bagaimana cara memperbarui nilai yang ada dalam dictionary?",
                "question_code": "my_dict['key'] = 'updated_value'",
                "answer": "Perbarui nilai dalam dictionary dengan menetapkan nilai baru ke kunci yang ada. Contoh: `my_dict['key'] = 'updated_value'`.",
                "answer_code": "my_dict['key'] = 'updated_value'"
            }
        ]
    }
]
