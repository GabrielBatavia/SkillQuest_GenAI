[
    {
        "sumber": "panduancodingpython.com",
        "penulis": "Dina Puspita",
        "tanggal": "2023-05-30",
        "judul": "Penggunaan Dictionary di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "dictionary", "dasar"],
        "konten": "Artikel ini menjelaskan cara membuat, mengakses, menambah, menghapus, dan memanipulasi elemen dalam dictionary di Python.",
        "pertanyaan": [
            {
                "question": "Apa itu dictionary di Python?",
                "answer": "Dictionary adalah struktur data yang menyimpan data dalam bentuk pasangan kunci-nilai."
            },
            {
                "question": "Bagaimana cara membuat dictionary di Python?",
                "answer": "Anda bisa membuat dictionary dengan menggunakan tanda kurung kurawal `{}` dan memisahkan pasangan kunci-nilai dengan koma. Contohnya: `my_dict = {'key': 'value'}`."
            },
            {
                "question": "Bagaimana cara mengakses nilai dalam dictionary?",
                "question_code": "my_dict = {'key': 'value'}\nvalue = my_dict['key']",
                "answer": "Anda bisa mengakses nilai dalam dictionary dengan menggunakan kunci. Contohnya: `value = my_dict['key']`.",
                "answer_code": "my_dict = {'key': 'value'}\nvalue = my_dict['key']"
            },
            {
                "question": "Bagaimana cara menambahkan pasangan kunci-nilai ke dictionary?",
                "question_code": "my_dict['new_key'] = 'new_value'",
                "answer": "Anda bisa menambahkan pasangan kunci-nilai ke dictionary dengan menugaskan nilai baru ke kunci baru. Contohnya: `my_dict['new_key'] = 'new_value'`.",
                "answer_code": "my_dict['new_key'] = 'new_value'"
            },
            {
                "question": "Bagaimana cara menghapus pasangan kunci-nilai dari dictionary?",
                "question_code": "del my_dict['key']",
                "answer": "Anda bisa menghapus pasangan kunci-nilai dari dictionary dengan menggunakan kata kunci `del`. Contohnya: `del my_dict['key']`.",
                "answer_code": "del my_dict['key']"
            },
            {
                "question": "Bagaimana cara memeriksa apakah kunci ada dalam dictionary?",
                "question_code": "'key' in my_dict",
                "answer": "Anda bisa memeriksa apakah kunci ada dalam dictionary dengan menggunakan operator `in`. Contohnya: `'key' in my_dict`.",
                "answer_code": "'key' in my_dict"
            },
            {
                "question": "Bagaimana cara mendapatkan semua kunci dalam dictionary?",
                "question_code": "my_dict.keys()",
                "answer": "Anda bisa mendapatkan semua kunci dalam dictionary dengan menggunakan metode `keys()`. Contohnya: `my_dict.keys()`.",
                "answer_code": "my_dict.keys()"
            },
            {
                "question": "Bagaimana cara mendapatkan semua nilai dalam dictionary?",
                "question_code": "my_dict.values()",
                "answer": "Anda bisa mendapatkan semua nilai dalam dictionary dengan menggunakan metode `values()`. Contohnya: `my_dict.values()`.",
                "answer_code": "my_dict.values()"
            },
            {
                "question": "Bagaimana cara mengupdate nilai dalam dictionary?",
                "question_code": "my_dict['key'] = 'updated_value'",
                "answer": "Anda bisa mengupdate nilai dalam dictionary dengan menugaskan nilai baru ke kunci yang sudah ada. Contohnya: `my_dict['key'] = 'updated_value'`.",
                "answer_code": "my_dict['key'] = 'updated_value'"
            }
        ]
    },
    {
        "sumber": "belajarpemrogramanpython.net",
        "penulis": "Eko Prasetyo",
        "tanggal": "2023-11-21",
        "judul": "Penggunaan List Comprehensions di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "list comprehensions", "dasar"],
        "konten": "Artikel ini menjelaskan cara menggunakan list comprehensions di Python untuk membuat dan memanipulasi list dengan sintaks yang lebih ringkas dan efisien.",
        "pertanyaan": [
            {
                "question": "Apa itu list comprehensions di Python?",
                "answer": "List comprehensions adalah cara singkat untuk membuat list baru dari iterable yang ada menggunakan satu baris kode."
            },
            {
                "question": "Bagaimana cara membuat list comprehension sederhana di Python?",
                "question_code": "[x for x in range(5)]",
                "answer": "Anda bisa membuat list comprehension sederhana dengan sintaks `[expression for item in iterable]`. Contohnya: `[x for x in range(5)]`.",
                "answer_code": "[x for x in range(5)]"
            },
            {
                "question": "Bagaimana cara menambahkan kondisi ke dalam list comprehension di Python?",
                "question_code": "[x for x in range(10) if x % 2 == 0]",
                "answer": "Anda bisa menambahkan kondisi ke dalam list comprehension dengan sintaks `[expression for item in iterable if condition]`. Contohnya: `[x for x in range(10) if x % 2 == 0]`.",
                "answer_code": "[x for x in range(10) if x % 2 == 0]"
            },
            {
                "question": "Bagaimana cara membuat list comprehension dengan fungsi di Python?",
                "question_code": "[x**2 for x in range(10)]",
                "answer": "Anda bisa membuat list comprehension dengan menggunakan fungsi di dalam ekspresi. Contohnya: `[x**2 for x in range(10)]`.",
                "answer_code": "[x**2 for x in range(10)]"
            },
            {
                "question": "Bagaimana cara membuat list comprehension dari list yang ada di Python?",
                "question_code": "numbers = [1, 2, 3, 4, 5]\nsquares = [x**2 for x in numbers]",
                "answer": "Anda bisa membuat list comprehension dari list yang ada dengan menggunakan list sebagai iterable. Contohnya: `[x**2 for x in numbers]`.",
                "answer_code": "numbers = [1, 2, 3, 4, 5]\nsquares = [x**2 for x in numbers]"
            },
            {
                "question": "Bagaimana cara membuat nested list comprehensions di Python?",
                "question_code": "[[x, y] for x in range(3) for y in range(3)]",
                "answer": "Anda bisa membuat nested list comprehensions dengan menggunakan dua loop for di dalam satu list comprehension. Contohnya: `[[x, y] for x in range(3) for y in range(3)]`.",
                "answer_code": "[[x, y] for x in range(3) for y in range(3)]"
            },
            {
                "question": "Bagaimana cara menggunakan list comprehension untuk memanipulasi string di Python?",
                "question_code": "[char.upper() for char in 'hello']",
                "answer": "Anda bisa menggunakan list comprehension untuk memanipulasi string dengan iterasi karakter di dalam string. Contohnya: `[char.upper() for char in 'hello']`.",
                "answer_code": "[char.upper() for char in 'hello']"
            },
            {
                "question": "Bagaimana cara membuat list comprehension dari dictionary di Python?",
                "question_code": "{k: v**2 for k, v in {'a': 1, 'b': 2}.items()}",
                "answer": "Anda bisa membuat list comprehension dari dictionary dengan menggunakan `.items()` untuk iterasi kunci dan nilai. Contohnya: `{k: v**2 for k, v in {'a': 1, 'b': 2}.items()}`.",
                "answer_code": "{k: v**2 for k, v in {'a': 1, 'b': 2}.items()}"
            },
            {
                "question": "Bagaimana cara membuat set comprehension di Python?",
                "question_code": "{x for x in range(5)}",
                "answer": "Anda bisa membuat set comprehension dengan menggunakan tanda kurung kurawal `{}`. Contohnya: `{x for x in range(5)}`.",
                "answer_code": "{x for x in range(5)}"
            }
        ]
    }
]
