[
    {
        "sumber": "pythonbasic.com",
        "penulis": "Rizal Fadli",
        "tanggal": "2024-06-30",
        "judul": "Penggunaan Fungsi Map, Filter, dan Reduce di Python dengan Contoh Sederhana",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "map", "filter", "reduce", "menengah"],
        "konten": "Artikel ini menjelaskan penggunaan fungsi map, filter, dan reduce di Python dengan contoh-contoh sederhana untuk memudahkan pemahaman.",
        "pertanyaan": [
            {
                "question": "Bisa jelaskan apa yang dilakukan fungsi map di Python?",
                "answer": "Fungsi map menerapkan sebuah fungsi ke setiap elemen dalam iterable dan mengembalikan sebuah map object dengan hasilnya."
            },
            {
                "question": "Bagaimana cara menggunakan fungsi map dengan contoh mudah?",
                "question_code": "numbers = [1, 3, 5, 7]\ncubed = list(map(lambda x: x**3, numbers))",
                "answer": "Anda bisa menggunakan fungsi map untuk mengubah setiap elemen dalam daftar menjadi kubik. Contoh: map(lambda x: x**3, numbers).",
                "answer_code": "numbers = [1, 3, 5, 7]\ncubed = list(map(lambda x: x**3, numbers))"
            },
            {
                "question": "Apa fungsi dari filter di Python?",
                "answer": "Fungsi filter digunakan untuk menyaring elemen dalam iterable berdasarkan fungsi yang mengembalikan nilai boolean."
            },
            {
                "question": "Bagaimana cara menggunakan fungsi filter dengan contoh yang sederhana?",
                "question_code": "numbers = [5, 10, 15, 20]\nless_than_fifteen = list(filter(lambda x: x < 15, numbers))",
                "answer": "Anda bisa menggunakan fungsi filter untuk menyaring elemen yang kurang dari lima belas dalam daftar. Contoh: filter(lambda x: x < 15, numbers).",
                "answer_code": "numbers = [5, 10, 15, 20]\nless_than_fifteen = list(filter(lambda x: x < 15, numbers))"
            },
            {
                "question": "Bisakah Anda jelaskan kegunaan fungsi reduce di Python?",
                "answer": "Fungsi reduce menerapkan fungsi tertentu ke elemen-elemen dalam iterable secara berurutan dan mengembalikan satu hasil akhir."
            },
            {
                "question": "Bagaimana cara menggunakan reduce dengan contoh sederhana?",
                "question_code": "from functools import reduce\nnumbers = [2, 3, 4]\nsum_numbers = reduce(lambda x, y: x + y, numbers)",
                "answer": "Anda bisa menggunakan fungsi reduce untuk menjumlahkan semua elemen dalam daftar. Contoh: reduce(lambda x, y: x + y, numbers).",
                "answer_code": "from functools import reduce\nnumbers = [2, 3, 4]\nsum_numbers = reduce(lambda x, y: x + y, numbers)"
            },
            {
                "question": "Bagaimana cara menggabungkan penggunaan map dan filter di Python?",
                "question_code": "numbers = [1, 2, 3, 4, 5]\nfiltered_and_squared = list(map(lambda x: x**2, filter(lambda x: x > 2, numbers)))",
                "answer": "Anda bisa menggabungkan filter dan map dengan menyaring elemen yang lebih besar dari dua terlebih dahulu, lalu menerapkan fungsi map untuk mengkuadratkan elemen tersebut. Contoh: map(lambda x: x**2, filter(lambda x: x > 2, numbers)).",
                "answer_code": "numbers = [1, 2, 3, 4, 5]\nfiltered_and_squared = list(map(lambda x: x**2, filter(lambda x: x > 2, numbers)))"
            },
            {
                "question": "Bagaimana cara menggunakan map dengan beberapa daftar di Python?",
                "question_code": "list1 = [2, 4, 6]\nlist2 = [1, 3, 5]\nmultiplied = list(map(lambda x, y: x * y, list1, list2))",
                "answer": "Anda bisa menggunakan fungsi map dengan beberapa daftar untuk mengalikan elemen-elemen yang berkorespondensi. Contoh: map(lambda x, y: x * y, list1, list2).",
                "answer_code": "list1 = [2, 4, 6]\nlist2 = [1, 3, 5]\nmultiplied = list(map(lambda x, y: x * y, list1, list2))"
            },
            {
                "question": "Bagaimana cara menggunakan filter untuk menyaring string yang mengandung huruf tertentu di Python?",
                "question_code": "words = ['apple', 'banana', 'cherry']\nfiltered_words = list(filter(lambda x: 'a' in x, words))",
                "answer": "Anda bisa menggunakan filter untuk menyaring string yang mengandung huruf tertentu. Contoh: filter(lambda x: 'a' in x, words).",
                "answer_code": "words = ['apple', 'banana', 'cherry']\nfiltered_words = list(filter(lambda x: 'a' in x, words))"
            }
        ]
    },
    {
        "sumber": "pythonerrorhandling.com",
        "penulis": "Siti Nurhasanah",
        "tanggal": "2024-07-20",
        "judul": "Menguasai Exception Handling di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "exception handling", "menengah"],
        "konten": "Artikel ini memberikan panduan tentang exception handling di Python, yang memungkinkan program untuk menangani error agar tetap berjalan meskipun terjadi kesalahan.",
        "pertanyaan": [
            {
                "question": "Apa itu exception handling di Python dan kenapa itu penting?",
                "answer": "Exception handling adalah cara untuk menangani error atau pengecualian yang terjadi selama eksekusi program sehingga program dapat terus berjalan. Ini penting untuk mencegah program berhenti tiba-tiba."
            },
            {
                "question": "Bagaimana cara kerja blok try-except di Python dengan contoh yang sederhana?",
                "question_code": "try:\n    value = int('hello')\nexcept ValueError:\n    print('Tidak bisa mengubah string menjadi integer')",
                "answer": "Blok try-except digunakan untuk menangani error dengan menempatkan kode yang mungkin menghasilkan error di dalam blok try dan menangani error di dalam blok except. Contoh: try: value = int('hello') except ValueError: print('Tidak bisa mengubah string menjadi integer').",
                "answer_code": "try:\n    value = int('hello')\nexcept ValueError:\n    print('Tidak bisa mengubah string menjadi integer')"
            },
            {
                "question": "Bagaimana cara menangani berbagai pengecualian di Python?",
                "question_code": "try:\n    result = 5 / 0\nexcept ZeroDivisionError:\n    print('Kesalahan: Pembagian dengan nol')\nexcept TypeError:\n    print('Kesalahan tipe data')",
                "answer": "Anda bisa menangani berbagai pengecualian dengan menggunakan beberapa blok except untuk setiap jenis pengecualian. Contoh: try: result = 5 / 0 except ZeroDivisionError: print('Kesalahan: Pembagian dengan nol') except TypeError: print('Kesalahan tipe data').",
                "answer_code": "try:\n    result = 5 / 0\nexcept ZeroDivisionError:\n    print('Kesalahan: Pembagian dengan nol')\nexcept TypeError:\n    print('Kesalahan tipe data')"
            },
            {
                "question": "Bagaimana cara menggunakan blok finally di Python dengan contoh yang mudah dipahami?",
                "question_code": "try:\n    print('Memulai')\nfinally:\n    print('Selesai')",
                "answer": "Blok finally digunakan untuk mengeksekusi kode yang harus dijalankan terlepas dari apakah terjadi pengecualian atau tidak. Contoh: try: print('Memulai') finally: print('Selesai').",
                "answer_code": "try:\n    print('Memulai')\nfinally:\n    print('Selesai')"
            },
            {
                "question": "Bagaimana cara membuat pengecualian khusus di Python?",
                "question_code": "class InvalidInputError(Exception):\n    pass\n\ntry:\n    data = -5\n    if data < 0:\n        raise InvalidInputError('Input tidak valid')\nexcept InvalidInputError as e:\n    print(e)",
                "answer": "Anda bisa membuat pengecualian khusus dengan mendefinisikan kelas pengecualian yang mewarisi dari kelas Exception. Contoh: class InvalidInputError(Exception): pass.",
                "answer_code": "class InvalidInputError(Exception):\n    pass\n\ntry:\n    data = -5\n    if data < 0:\n        raise InvalidInputError('Input tidak valid')\nexcept InvalidInputError as e:\n    print(e)"
            },
            {
                "question": "Bagaimana cara menggunakan klausa else dengan try-except di Python?",
                "question_code": "try:\n    result = 10 * 2\nexcept Exception as e:\n    print('Kesalahan:', e)\nelse:\n    print('Hasilnya adalah:', result)",
                "answer": "Klausa else digunakan untuk mengeksekusi kode jika tidak ada pengecualian yang terjadi di dalam blok try. Contoh: try: result = 10 * 2 except Exception as e: print('Kesalahan:', e) else: print('Hasilnya adalah:', result).",
                "answer_code": "try:\n    result = 10 * 2\nexcept Exception as e:\n    print('Kesalahan:', e)\nelse:\n    print('Hasilnya adalah:', result)"
            },
            {
                "question": "Bagaimana cara menangkap semua jenis pengecualian di Python?",
                "question_code": "try:\n    print(undefined_var)\nexcept Exception as error:\n    print('Kesalahan yang terjadi:', error)",
                "answer": "Anda bisa menangkap semua jenis pengecualian dengan menggunakan kelas dasar Exception. Contoh: try: print(undefined_var) except Exception as error: print('Kesalahan yang terjadi:', error).",
                "answer_code": "try:\n    print(undefined_var)\nexcept Exception as error:\n    print('Kesalahan yang terjadi:', error)"
            },
            {
                "question": "Bagaimana cara menggunakan klausa raise di Python?",
                "question_code": "def validate_age(age):\n    if age < 0:\n        raise ValueError('Umur tidak bisa negatif')\n\ntry:\n    validate_age(-1)\nexcept ValueError as e:\n    print(e)",
                "answer": "Klausa raise digunakan untuk memunculkan pengecualian secara manual. Contoh: raise ValueError('Umur tidak bisa negatif').",
                "answer_code": "def validate_age(age):\n    if age < 0:\n        raise ValueError('Umur tidak bisa negatif')\n\ntry:\n    validate_age(-1)\nexcept ValueError as e:\n    print(e)"
            },
            {
                "question": "Bagaimana cara menggunakan klausa assert di Python?",
                "question_code": "balance = -100\nassert balance >= 0, 'Saldo tidak boleh negatif'",
                "answer": "Klausa assert digunakan untuk melakukan pemeriksaan logika selama eksekusi program. Jika kondisi assert False, AssertionError akan dipicu. Contoh: assert balance >= 0, 'Saldo tidak boleh negatif'.",
                "answer_code": "balance = -100\nassert balance >= 0, 'Saldo tidak boleh negatif'"
            }
        ]
    }
]
