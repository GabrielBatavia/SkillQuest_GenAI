[
    {
        "sumber": "belajarpemrogramanpython.com",
        "penulis": "Rina Wijaya",
        "tanggal": "2024-08-15",
        "judul": "Penggunaan Metode String di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "string methods", "menengah"],
        "konten": "Artikel ini menjelaskan berbagai metode bawaan untuk memanipulasi string di Python, seperti `join()`, `split()`, `find()`, `replace()`, dan `format()`.",
        "pertanyaan": [
            {
                "question": "Apa itu metode `join()` di Python?",
                "answer": "Metode `join()` digunakan untuk menggabungkan elemen-elemen dalam iterable menjadi satu string dengan pemisah yang ditentukan."
            },
            {
                "question": "Bagaimana cara menggunakan metode `join()` di Python?",
                "question_code": "words = ['Python', 'is', 'awesome']\nsentence = ' '.join(words)",
                "answer": "Anda bisa menggunakan metode `join()` dengan memanggilnya pada string yang akan digunakan sebagai pemisah dan menerapkan iterable sebagai argumen. Contohnya: `' '.join(words)`.",
                "answer_code": "words = ['Python', 'is', 'awesome']\nsentence = ' '.join(words)"
            },
            {
                "question": "Apa itu metode `split()` di Python?",
                "answer": "Metode `split()` digunakan untuk memisahkan string menjadi list berdasarkan pemisah yang ditentukan."
            },
            {
                "question": "Bagaimana cara menggunakan metode `split()` di Python?",
                "question_code": "sentence = 'Python is awesome'\nwords = sentence.split()",
                "answer": "Anda bisa menggunakan metode `split()` dengan memanggilnya pada string dan memberikan pemisah sebagai argumen. Contohnya: `sentence.split()`.",
                "answer_code": "sentence = 'Python is awesome'\nwords = sentence.split()"
            },
            {
                "question": "Apa itu metode `find()` di Python?",
                "answer": "Metode `find()` digunakan untuk menemukan posisi pertama dari substring yang ditentukan dalam string."
            },
            {
                "question": "Bagaimana cara menggunakan metode `find()` di Python?",
                "question_code": "text = 'Hello, world!'\nposition = text.find('world')",
                "answer": "Anda bisa menggunakan metode `find()` dengan memanggilnya pada string dan memberikan substring sebagai argumen. Contohnya: `text.find('world')`.",
                "answer_code": "text = 'Hello, world!'\nposition = text.find('world')"
            },
            {
                "question": "Apa itu metode `replace()` di Python?",
                "answer": "Metode `replace()` digunakan untuk mengganti semua kemunculan substring tertentu dengan substring lain dalam string."
            },
            {
                "question": "Bagaimana cara menggunakan metode `replace()` di Python?",
                "question_code": "text = 'Hello, world!'\nnew_text = text.replace('world', 'Python')",
                "answer": "Anda bisa menggunakan metode `replace()` dengan memanggilnya pada string dan memberikan substring lama serta substring baru sebagai argumen. Contohnya: `text.replace('world', 'Python')`.",
                "answer_code": "text = 'Hello, world!'\nnew_text = text.replace('world', 'Python')"
            },
            {
                "question": "Apa itu metode `format()` di Python?",
                "answer": "Metode `format()` digunakan untuk memformat string dengan menggunakan placeholder `{}` yang diganti dengan nilai yang diberikan."
            },
            {
                "question": "Bagaimana cara menggunakan metode `format()` di Python?",
                "question_code": "name = 'John'\nage = 30\ntext = 'My name is {} and I am {} years old'.format(name, age)",
                "answer": "Anda bisa menggunakan metode `format()` dengan memanggilnya pada string dan memberikan nilai sebagai argumen untuk menggantikan placeholder. Contohnya: `'My name is {} and I am {} years old'.format(name, age)`.",
                "answer_code": "name = 'John'\nage = 30\ntext = 'My name is {} and I am {} years old'.format(name, age)"
            }
        ]
    },
    {
        "sumber": "pythonadvanced.net",
        "penulis": "Ali Rahman",
        "tanggal": "2024-09-15",
        "judul": "Penggunaan Fungsi Itertools di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "itertools", "menengah"],
        "konten": "Artikel ini menjelaskan cara menggunakan modul itertools di Python untuk melakukan iterasi yang lebih kompleks dan efisien dengan berbagai fungsi seperti `count()`, `cycle()`, `repeat()`, `combinations()`, dan `permutations()`.",
        "pertanyaan": [
            {
                "question": "Apa itu modul itertools di Python?",
                "answer": "Modul itertools adalah modul standar di Python yang menyediakan berbagai fungsi untuk membuat iterasi yang lebih kompleks dan efisien."
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `count()` dari itertools?",
                "question_code": "import itertools\ncounter = itertools.count(start=10, step=2)\nnext(counter)",
                "answer": "Anda bisa menggunakan fungsi `count()` dari itertools untuk membuat iterator yang menghasilkan angka berurutan mulai dari nilai tertentu. Contohnya: `itertools.count(start=10, step=2)`.",
                "answer_code": "import itertools\ncounter = itertools.count(start=10, step=2)\nnext(counter)"
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `cycle()` dari itertools?",
                "question_code": "import itertools\ncycler = itertools.cycle(['A', 'B', 'C'])\nnext(cycler)",
                "answer": "Anda bisa menggunakan fungsi `cycle()` dari itertools untuk membuat iterator yang mengulang elemen dari iterable yang diberikan secara tak terbatas. Contohnya: `itertools.cycle(['A', 'B', 'C'])`.",
                "answer_code": "import itertools\ncycler = itertools.cycle(['A', 'B', 'C'])\nnext(cycler)"
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `repeat()` dari itertools?",
                "question_code": "import itertools\nrepeater = itertools.repeat('Hello', times=3)\nnext(repeater)",
                "answer": "Anda bisa menggunakan fungsi `repeat()` dari itertools untuk membuat iterator yang mengulang elemen tertentu beberapa kali. Contohnya: `itertools.repeat('Hello', times=3)`.",
                "answer_code": "import itertools\nrepeater = itertools.repeat('Hello', times=3)\nnext(repeater)"
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `combinations()` dari itertools?",
                "question_code": "import itertools\ncombinations = list(itertools.combinations([1, 2, 3, 4], 2))",
                "answer": "Anda bisa menggunakan fungsi `combinations()` dari itertools untuk menghasilkan semua kombinasi r dari elemen dalam iterable. Contohnya: `itertools.combinations([1, 2, 3, 4], 2)`.",
                "answer_code": "import itertools\ncombinations = list(itertools.combinations([1, 2, 3, 4], 2))"
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `permutations()` dari itertools?",
                "question_code": "import itertools\npermutations = list(itertools.permutations([1, 2, 3]))",
                "answer": "Anda bisa menggunakan fungsi `permutations()` dari itertools untuk menghasilkan semua permutasi dari elemen dalam iterable. Contohnya: `itertools.permutations([1, 2, 3])`.",
                "answer_code": "import itertools\npermutations = list(itertools.permutations([1, 2, 3]))"
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `product()` dari itertools?",
                "question_code": "import itertools\nproduct = list(itertools.product('AB', repeat=2))",
                "answer": "Anda bisa menggunakan fungsi `product()` dari itertools untuk menghasilkan produk kartesian dari input iterable. Contohnya: `itertools.product('AB', repeat=2)`.",
                "answer_code": "import itertools\nproduct = list(itertools.product('AB', repeat=2))"
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `accumulate()` dari itertools?",
                "question_code": "import itertools\nnumbers = [1, 2, 3, 4]\naccumulated = list(itertools.accumulate(numbers))",
                "answer": "Anda bisa menggunakan fungsi `accumulate()` dari itertools untuk menghasilkan hasil akumulatif dari elemen dalam iterable. Contohnya: `itertools.accumulate(numbers)`.",
                "answer_code": "import itertools\nnumbers = [1, 2, 3, 4]\naccumulated = list(itertools.accumulate(numbers))"
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `chain()` dari itertools?",
                "question_code": "import itertools\nchained = list(itertools.chain([1, 2, 3], ['a', 'b', 'c']))",
                "answer": "Anda bisa menggunakan fungsi `chain()` dari itertools untuk menggabungkan beberapa iterable menjadi satu iterable panjang. Contohnya: `itertools.chain([1, 2, 3], ['a', 'b', 'c'])`.",
                "answer_code": "import itertools\nchained = list(itertools.chain([1, 2, 3], ['a', 'b', 'c']))"
            }
        ]
    }
]
