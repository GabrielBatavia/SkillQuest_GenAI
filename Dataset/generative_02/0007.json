[
    {
        "sumber": "belajarpython.com",
        "penulis": "Ahmad Budi",
        "tanggal": "2023-12-05",
        "judul": "Pemrograman OOP di Python",
        "tingkat_kesulitan": "Lanjutan",
        "tag": ["python", "OOP", "lanjutan"],
        "konten": "Artikel ini menjelaskan konsep Object-Oriented Programming (OOP) dalam Python, termasuk kelas, objek, pewarisan, dan enkapsulasi.",
        "pertanyaan": [
            {
                "question": "Apa itu OOP?",
                "answer": "OOP atau Object-Oriented Programming adalah paradigma pemrograman yang menggunakan 'objek' untuk mewakili data dan metode."
            },
            {
                "question": "Bagaimana cara mendefinisikan kelas di Python?",
                "answer": "Anda bisa mendefinisikan kelas di Python dengan menggunakan kata kunci `class` diikuti dengan nama kelas. Contohnya: `class MyClass:`."
            },
            {
                "question": "Bagaimana cara membuat objek dari kelas di Python?",
                "answer": "Anda bisa membuat objek dari kelas dengan menggunakan sintaks `nama_objek = NamaKelas()`. Contohnya: `obj = MyClass()`."
            },
            {
                "question": "Bagaimana cara mendefinisikan metode dalam kelas?",
                "question_code": "class MyClass:\n    def my_method(self):\n        print('Hello from MyClass')",
                "answer": "Anda bisa mendefinisikan metode dalam kelas dengan menambahkan fungsi di dalam kelas. Contohnya: `def my_method(self):`."
            },
            {
                "question": "Bagaimana cara mengakses atribut dalam kelas?",
                "question_code": "class MyClass:\n    def __init__(self, value):\n        self.value = value\nobj = MyClass(10)\nprint(obj.value)",
                "answer": "Anda bisa mengakses atribut dalam kelas dengan menggunakan sintaks `self.nama_atribut` di dalam kelas, dan `obj.nama_atribut` di luar kelas.",
                "answer_code": "obj.value"
            },
            {
                "question": "Bagaimana cara menerapkan pewarisan di Python?",
                "question_code": "class Parent:\n    def parent_method(self):\n        print('Hello from Parent')\nclass Child(Parent):\n    def child_method(self):\n        print('Hello from Child')\nobj = Child()\nobj.parent_method()",
                "answer": "Anda bisa menerapkan pewarisan dengan menuliskan nama kelas induk di dalam tanda kurung setelah nama kelas anak. Contohnya: `class Child(Parent):`.",
                "answer_code": "obj.parent_method()"
            },
            {
                "question": "Bagaimana cara mengimplementasikan enkapsulasi di Python?",
                "question_code": "class MyClass:\n    def __init__(self):\n        self.__private_attr = 'private'\n    def get_private_attr(self):\n        return self.__private_attr\nobj = MyClass()\nprint(obj.get_private_attr())",
                "answer": "Anda bisa mengimplementasikan enkapsulasi dengan mendeklarasikan atribut sebagai private menggunakan dua garis bawah `__` di awal nama atribut.",
                "answer_code": "obj.get_private_attr()"
            },
            {
                "question": "Bagaimana cara mendefinisikan metode statis di Python?",
                "question_code": "class MyClass:\n    @staticmethod\n    def static_method():\n        print('This is a static method')\nMyClass.static_method()",
                "answer": "Anda bisa mendefinisikan metode statis dengan menggunakan dekorator `@staticmethod` di atas metode. Contohnya: `@staticmethod`.",
                "answer_code": "MyClass.static_method()"
            },
            {
                "question": "Bagaimana cara mengimplementasikan polimorfisme di Python?",
                "question_code": "class Animal:\n    def sound(self):\n        raise NotImplementedError\nclass Dog(Animal):\n    def sound(self):\n        return 'Bark'\nclass Cat(Animal):\n    def sound(self):\n        return 'Meow'\nanimals = [Dog(), Cat()]\nfor animal in animals:\n    print(animal.sound())",
                "answer": "Anda bisa mengimplementasikan polimorfisme dengan mendefinisikan metode yang sama di kelas yang berbeda dan memanggilnya melalui referensi kelas induk.",
                "answer_code": "for animal in animals:\n    print(animal.sound())"
            }
        ]
    },
    {
        "sumber": "pythonpemula.com",
        "penulis": "Siti Aminah",
        "tanggal": "2022-11-22",
        "judul": "Manipulasi Data dengan Pandas",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "pandas", "data"],
        "konten": "Artikel ini memberikan panduan tentang cara menggunakan pustaka Pandas untuk manipulasi data dalam Python, termasuk cara membuat, mengakses, dan memodifikasi DataFrame.",
        "pertanyaan": [
            {
                "question": "Apa itu Pandas?",
                "answer": "Pandas adalah pustaka Python yang digunakan untuk manipulasi dan analisis data."
            },
            {
                "question": "Bagaimana cara mengimpor pustaka Pandas?",
                "answer": "Anda bisa mengimpor pustaka Pandas dengan menggunakan sintaks `import pandas as pd`."
            },
            {
                "question": "Bagaimana cara membuat DataFrame di Pandas?",
                "answer": "Anda bisa membuat DataFrame dengan menggunakan fungsi `pd.DataFrame()`. Contohnya: `df = pd.DataFrame(data)`."
            },
            {
                "question": "Bagaimana cara membaca file CSV ke dalam DataFrame?",
                "question_code": "import pandas as pd\ndf = pd.read_csv('file.csv')",
                "answer": "Anda bisa membaca file CSV ke dalam DataFrame dengan menggunakan fungsi `pd.read_csv()`. Contohnya: `df = pd.read_csv('file.csv')`."
            },
            {
                "question": "Bagaimana cara menampilkan lima baris pertama dari DataFrame?",
                "question_code": "df.head()",
                "answer": "Anda bisa menampilkan lima baris pertama dari DataFrame dengan menggunakan metode `head()`. Contohnya: `df.head()`."
            },
            {
                "question": "Bagaimana cara mengakses kolom tertentu dalam DataFrame?",
                "question_code": "df['nama_kolom']",
                "answer": "Anda bisa mengakses kolom tertentu dalam DataFrame dengan menggunakan sintaks `df['nama_kolom']`.",
                "answer_code": "df['nama_kolom']"
            },
            {
                "question": "Bagaimana cara menambahkan kolom baru ke DataFrame?",
                "question_code": "df['kolom_baru'] = nilai",
                "answer": "Anda bisa menambahkan kolom baru ke DataFrame dengan menambahkan nilai ke kolom tersebut. Contohnya: `df['kolom_baru'] = nilai`.",
                "answer_code": "df['kolom_baru'] = nilai"
            },
            {
                "question": "Bagaimana cara menghapus kolom dari DataFrame?",
                "question_code": "df.drop('nama_kolom', axis=1, inplace=True)",
                "answer": "Anda bisa menghapus kolom dari DataFrame dengan menggunakan metode `drop()`. Contohnya: `df.drop('nama_kolom', axis=1, inplace=True)`.",
                "answer_code": "df.drop('nama_kolom', axis=1, inplace=True)"
            },
            {
                "question": "Bagaimana cara memfilter DataFrame berdasarkan kondisi tertentu?",
                "question_code": "df[df['kolom'] > nilai]",
                "answer": "Anda bisa memfilter DataFrame berdasarkan kondisi tertentu dengan menggunakan sintaks `df[df['kolom'] > nilai]`.",
                "answer_code": "df[df['kolom'] > nilai]"
            }
        ]
    }
]
