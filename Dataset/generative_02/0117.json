[
    {
        "sumber": "belajarpythonmudah.com",
        "penulis": "Arif Susanto",
        "tanggal": "2023-04-10",
        "judul": "Penggunaan Operator Logika di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "operator logika", "dasar"],
        "konten": "Artikel ini menjelaskan penggunaan operator logika di Python seperti `and`, `or`, dan `not` untuk melakukan operasi logika dasar.",
        "pertanyaan": [
            {
                "question": "Operator `and` itu apa ya? Fungsinya gimana?",
                "answer": "Operator logika `and` mengembalikan `True` jika kedua operand adalah `True`. Contohnya: `True and False` mengembalikan `False`."
            },
            {
                "question": "Saya masih bingung dengan operator `or`. Bisa jelasin?",
                "answer": "Operator logika `or` mengembalikan `True` jika salah satu dari operand adalah `True`. Contohnya: `True or False` mengembalikan `True`."
            },
            {
                "question": "Gimana cara kerja operator `not`? Saya belum paham.",
                "question_code": "not 1",
                "answer": "Operator logika `not` digunakan untuk membalik nilai boolean dari operand. Contohnya: `not True` mengembalikan `False`.",
                "answer_code": "not True"
            },
            {
                "question": "Kalau pakai `and` di dalam if, gimana ya caranya?",
                "question_code": "x = 5\ny = 10\nif x > 0 y > 0:\n    print('Keduanya positif')",
                "answer": "Anda bisa menggunakan operator `and` dalam pernyataan kondisional untuk memeriksa apakah kedua kondisi benar. Contohnya: `if x > 0 and y > 0: print('Keduanya positif')`.",
                "answer_code": "x = 5\ny = 10\nif x > 0 and y > 0:\n    print('Keduanya positif')"
            },
            {
                "question": "Cara pakai `or` di dalam if gimana? Saya bingung.",
                "question_code": "x = -1\ny = 10\nif x > 0 or: print('Salah satu positif')",
                "answer": "Anda bisa menggunakan operator `or` dalam pernyataan kondisional untuk memeriksa apakah salah satu kondisi benar. Contohnya: `if x > 0 or y > 0: print('Salah satu positif')`.",
                "answer_code": "x = -1\ny = 10\nif x > 0 or y > 0:\n    print('Salah satu positif')"
            },
            {
                "question": "Gimana caranya pakai `not` di dalam if? Masih nggak ngerti.",
                "question_code": "x = True\nif not x == False:\n    print('x adalah False')",
                "answer": "Anda bisa menggunakan operator `not` dalam pernyataan kondisional untuk memeriksa apakah kondisi salah. Contohnya: `if not x: print('x adalah False')`.",
                "answer_code": "x = False\nif not x:\n    print('x adalah False')"
            },
            {
                "question": "Bisa nggak pakai beberapa operator logika sekaligus? Gimana caranya?",
                "question_code": "x = 5\ny = 10\nz = 0\nif x > 0 and y > 0 or z:\n    print('Kondisi kompleks')",
                "answer": "Anda bisa menggabungkan beberapa operator logika dalam satu pernyataan untuk memeriksa kondisi yang lebih kompleks. Contohnya: `if x > 0 and y > 0 or z == 0: print('Kondisi kompleks')`.",
                "answer_code": "x = 5\ny = 10\nz = 0\nif x > 0 and y > 0 or z == 0:\n    print('Kondisi kompleks')"
            },
            {
                "question": "Pakai operator logika di dalam loop gimana ya?",
                "question_code": "x = 0\nwhile x < 10 x % 2 == 0:\n    print(x)\n    x += 1",
                "answer": "Anda bisa menggunakan operator logika dalam loop untuk menentukan kondisi penghentian. Contohnya: `while x < 10 and x % 2 == 0: print(x); x += 2`.",
                "answer_code": "x = 0\nwhile x < 10 and x % 2 == 0:\n    print(x)\n    x += 2"
            },
            {
                "question": "Gimana caranya tahu kalau suatu nilai nggak ada di dalam list?",
                "question_code": "my_list = [1, 2, 3]\nif 4 in not my_list:\n    print('4 tidak ada dalam list')",
                "answer": "Anda bisa memeriksa apakah nilai tidak ada dalam list dengan menggunakan operator `not in`. Contohnya: `if 4 not in my_list: print('4 tidak ada dalam list')`.",
                "answer_code": "my_list = [1, 2, 3]\nif 4 not in my_list:\n    print('4 tidak ada dalam list')"
            },
            {
                "question": "Bisa pakai operator logika di dalam list comprehension? Caranya gimana?",
                "question_code": "[x for x in range(10) if x % 2 == 0 x > 5]",
                "answer": "Anda bisa menggunakan operator logika dalam list comprehension untuk memeriksa kondisi tertentu. Contohnya: `[x for x in range(10) if x % 2 == 0 and x > 5]`.",
                "answer_code": "[x for x in range(10) if x % 2 == 0 and x > 5]"
            }
        ]
    },
    {
        "sumber": "belajarpython.org",
        "penulis": "Rina Kartika",
        "tanggal": "2024-06-20",
        "judul": "Penggunaan Fungsi Lambda di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "lambda", "fungsi"],
        "konten": "Artikel ini menjelaskan cara mendefinisikan dan menggunakan fungsi lambda di Python untuk membuat fungsi anonim yang singkat.",
        "pertanyaan": [
            {
                "question": "Fungsi lambda itu apa ya? Saya nggak ngerti.",
                "answer": "Fungsi lambda adalah fungsi anonim kecil yang dapat memiliki sejumlah argumen tetapi hanya satu ekspresi."
            },
            {
                "question": "Gimana caranya bikin fungsi lambda di Python?",
                "answer": "Anda bisa mendefinisikan fungsi lambda dengan menggunakan kata kunci `lambda` diikuti dengan argumen dan ekspresi. Contohnya: `lambda x: x * 2`."
            },
            {
                "question": "Kalau pakai fungsi lambda di map gimana ya caranya?",
                "question_code": "map(lambda x x * 2, [1, 2, 3])",
                "answer": "Anda bisa menggunakan fungsi lambda dengan `map()` untuk menerapkan fungsi ke setiap elemen dalam iterable. Contohnya: `map(lambda x: x * 2, [1, 2, 3])`.",
                "answer_code": "list(map(lambda x: x * 2, [1, 2, 3]))"
            },
            {
                "question": "Pakai fungsi lambda di filter gimana? Bingung nih.",
                "question_code": "filter(lambda x x % 2 == 0, [1, 2, 3, 4])",
                "answer": "Anda bisa menggunakan fungsi lambda dengan `filter()` untuk menyaring elemen dalam iterable. Contohnya: `filter(lambda x: x % 2 == 0, [1, 2, 3, 4])`.",
                "answer_code": "list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4]))"
            },
            {
                "question": "Fungsi lambda bisa dipakai di reduce nggak? Caranya gimana?",
                "question_code": "reduce(lambda x, y x + y, [1, 2, 3, 4])",
                "answer": "Anda bisa menggunakan fungsi lambda dengan `reduce()` untuk menerapkan fungsi secara kumulatif ke elemen-elemen dalam iterable. Contohnya: `reduce(lambda x, y: x + y, [1, 2, 3, 4])`.",
                "answer_code": "from functools import reduce\nreduce(lambda x, y: x + y, [1, 2, 3, 4])"
            },
            {
                "question": "Bisa pakai fungsi lambda di dalam sorted? Gimana caranya?",
                "question_code": "sorted([('a', 3), ('b', 2), ('c', 1)], key=lambda x: 1)",
                "answer": "Anda bisa menggunakan fungsi lambda di dalam `sorted()` untuk menentukan kunci pengurutan. Contohnya: `sorted([('a', 3), ('b', 2), ('c', 1)], key=lambda x: x[1])`.",
                "answer_code": "sorted([('a', 3), ('b', 2), ('c', 1)], key=lambda x: x[1])"
            },
            {
                "question": "Kalau fungsi lambda punya beberapa argumen gimana?",
                "question_code": "lambda x y: x + y",
                "answer": "Anda bisa mendefinisikan fungsi lambda dengan beberapa argumen dengan memisahkan argumen menggunakan koma. Contohnya: `lambda x, y: x + y`.",
                "answer_code": "lambda x, y: x + y"
            },
            {
                "question": "Fungsi lambda bisa dipakai di list comprehension nggak? Gimana?",
                "question_code": "[lambda x x * 2 for x in range(5)]",
                "answer": "Anda bisa menggunakan fungsi lambda dengan list comprehension untuk membuat list fungsi. Contohnya: `[lambda x: x * 2 for x in range(5)]`.",
                "answer_code": "[lambda x: x * 2 for x in range(5)]"
            },
            {
                "question": "Pakai fungsi lambda di dictionary comprehension bisa? Caranya gimana?",
                "question_code": "{x: lambda x x * 2(x) for x in range(5)}",
                "answer": "Anda bisa menggunakan fungsi lambda di dalam dictionary comprehension untuk membuat dictionary. Contohnya: `{x: (lambda x: x * 2)(x) for x in range(5)}`.",
                "answer_code": "{x: (lambda x: x * 2)(x) for x in range(5)}"
            }
        ]
    }
]
