[
    {
        "sumber": "PemulaPython.com",
        "penulis": "Siti Nurhaliza",
        "tanggal": "2024-07-20",
        "judul": "Belajar Python: Langkah Pertama",
        "tingkat_kesulitan": "pemula",
        "tag": ["pemula", "python", "dasar"],
        "konten": "Artikel ini memberikan panduan dasar untuk memulai belajar Python, termasuk cara instalasi dan menulis program sederhana.",
        "pertanyaan": [
            {
                "question": "Bagaimana saya bisa menampilkan teks di layar dengan Python?",
                "answer": "Anda bisa menggunakan fungsi print() untuk menampilkan teks di layar. Misalnya: print('Hello, World!')."
            },
            {
                "question": "Bagaimana cara menginstal Python di komputer saya?",
                "answer": "Anda bisa mengunduh Python dari situs resmi python.org dan mengikuti instruksi instalasi yang sesuai dengan sistem operasi Anda."
            },
            {
                "question": "Apa yang dimaksud dengan SyntaxError?",
                "answer": "SyntaxError terjadi ketika ada kesalahan dalam penulisan kode. Pastikan semua tanda kutip dan tanda kurung Anda benar."
            },
            {
                "question": "Kenapa kode saya tidak jalan, bagaimana memperbaikinya?",
                "question_code": "prnt('Hello, World!')",
                "answer": "Pastikan Anda menulis print dengan benar. Contohnya: print('Hello, World!').",
                "answer_code": "print('Hello, World!')"
            },
            {
                "question": "Kode ini tidak berfungsi, apa yang salah?",
                "question_code": "print('Selamat datang di Python!)",
                "answer": "Pastikan semua tanda kutip ditutup dengan benar. Contohnya: print('Selamat datang di Python!').",
                "answer_code": "print('Selamat datang di Python!')"
            },
            {
                "question": "Apa itu komentar di Python?",
                "question_code": "# Ini adalah komentar",
                "answer": "Komentar digunakan untuk memberikan penjelasan atau catatan dalam kode. Ditulis dengan tanda pagar (#) di awal.",
                "answer_code": "# Ini adalah komentar"
            },
            {
                "question": "Bagaimana cara menambahkan komentar dalam kode Python?",
                "question_code": "# ini komentar\nprint('Hello, World!')",
                "answer": "Gunakan tanda pagar (#) di awal baris untuk menulis komentar. Contohnya: # ini adalah komentar.",
                "answer_code": "# ini komentar\nprint('Hello, World!')"
            },
            {
                "question": "Bagaimana cara membuat variabel di Python?",
                "question_code": "x = 5\ny = 10\nprint(x + y)",
                "answer": "Anda bisa membuat variabel dengan memberi nilai padanya. Contohnya: x = 5.",
                "answer_code": "x = 5\ny = 10\nprint(x + y)"
            },
            {
                "question": "Bagaimana cara mengubah angka menjadi teks di Python?",
                "question_code": "angka = 10\nteks = str(angka)\nprint(teks)",
                "answer": "Gunakan fungsi str() untuk mengubah angka menjadi teks. Contohnya: teks = str(angka).",
                "answer_code": "angka = 10\nteks = str(angka)\nprint(teks)"
            }
        ]
    },
    {
        "sumber": "BelajarPython.com",
        "penulis": "Ahmad Fauzi",
        "tanggal": "2022-11-20",
        "judul": "Pemrograman Berorientasi Objek dengan Python",
        "tingkat_kesulitan": "menengah",
        "tag": ["OOP", "kelas", "python"],
        "konten": "Artikel ini membahas konsep dasar pemrograman berorientasi objek (OOP) dan bagaimana menerapkannya dalam Python.",
        "pertanyaan": [
            {
                "question": "Apa itu kelas dalam Python?",
                "answer": "Kelas adalah blueprint untuk membuat objek. Kelas mendefinisikan atribut dan metode yang dimiliki oleh objek."
            },
            {
                "question": "Bagaimana cara mendefinisikan kelas di Python?",
                "answer": "Anda bisa mendefinisikan kelas dengan menggunakan kata kunci class. Contohnya: class Hewan:."
            },
            {
                "question": "Apa itu objek dalam Python?",
                "answer": "Objek adalah instance dari kelas. Contohnya: kucing = Hewan('Kucing')."
            },
            {
                "question": "Bagaimana saya bisa membuat objek dari kelas?",
                "question_code": "class Hewan:\n    def __init__(self, nama):\n        self.nama = nama\n\nkucing = Hewan('Kucing')\nprint(kucing.nama)",
                "answer": "Anda bisa membuat objek dengan memanggil kelas seperti fungsi. Contohnya: kucing = Hewan('Kucing').",
                "answer_code": "class Hewan:\n    def __init__(self, nama):\n        self.nama = nama\n\nkucing = Hewan('Kucing')\nprint(kucing.nama)"
            },
            {
                "question": "Kenapa saya mendapatkan AttributeError saat mencoba mengakses atribut?",
                "question_code": "print(kucing.umur)",
                "answer": "AttributeError terjadi karena atribut yang Anda coba akses tidak ada dalam kelas. Pastikan atribut tersebut sudah didefinisikan.",
                "answer_code": "class Hewan:\n    def __init__(self, nama):\n        self.nama = nama\n\nkucing = Hewan('Kucing')\nprint(kucing.nama)"
            },
            {
                "question": "Bagaimana cara menambahkan metode dalam kelas Python?",
                "question_code": "class Hewan:\n    def __init__(self, nama):\n        self.nama = nama\n\n    def suara(self):\n        return 'Suara hewan'",
                "answer": "Metode didefinisikan dalam kelas menggunakan kata kunci def. Contohnya: def suara(self):.",
                "answer_code": "class Hewan:\n    def __init__(self, nama):\n        self.nama = nama\n\n    def suara(self):\n        return 'Suara hewan'"
            },
            {
                "question": "Bagaimana saya bisa memanggil metode dari objek?",
                "question_code": "kucing.suara()",
                "answer": "Gunakan notasi titik untuk memanggil metode dari objek. Contohnya: kucing.suara().",
                "answer_code": "class Hewan:\n    def __init__(self, nama):\n        self.nama = nama\n\n    def suara(self):\n        return 'Suara hewan'\n\nkucing = Hewan('Kucing')\nprint(kucing.suara())"
            },
            {
                "question": "Bagaimana cara menggunakan pewarisan di Python?",
                "question_code": "class Kucing(Hewan):\n    def __init__(self, nama, warna):\n        super().__init__(nama)\n        self.warna = warna",
                "answer": "Gunakan pewarisan untuk membuat kelas baru yang mewarisi atribut dan metode dari kelas induk. Contohnya: class Kucing(Hewan):.",
                "answer_code": "class Hewan:\n    def __init__(self, nama):\n        self.nama = nama\n\nclass Kucing(Hewan):\n    def __init__(self, nama, warna):\n        super().__init__(nama)\n        self.warna = warna\n\nkucing = Kucing('Kitty', 'Putih')\nprint(kucing.nama, kucing.warna)"
            },
            {
                "question": "Bagaimana cara mengakses atribut dari kelas induk?",
                "question_code": "class Kucing(Hewan):\n    def __init__(self, nama, warna):\n        super().__init__(nama)\n        self.warna = warna",
                "answer": "Gunakan super() untuk mengakses atribut dan metode dari kelas induk. Contohnya: super().__init__(nama).",
                "answer_code": "class Hewan:\n    def __init__(self, nama):\n        self.nama = nama\n\nclass Kucing(Hewan):\n    def __init__(nama, warna):\n        super().__init__(nama)\n        self.warna = warna\n\nkucing = Kucing('Kitty', 'Putih')\nprint(kucing.nama, kucing.warna)"
            }
        ]
    }
]
