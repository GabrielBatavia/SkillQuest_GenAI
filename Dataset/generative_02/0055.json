[
    {
        "sumber": "programmerdasar.com",
        "penulis": "Budi Santoso",
        "tanggal": "2023-06-22",
        "judul": "Menjelajahi Struktur Loop di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "loop", "fundamental"],
        "konten": "Artikel ini membahas dasar-dasar struktur loop dalam Python, meliputi penggunaan loop `for` dan `while`. Artikel ini juga menjelaskan cara keluar dari loop lebih awal dengan `break` dan melewati iterasi dengan `continue`.",
        "pertanyaan": [
            {
                "question": "Apa yang dimaksud dengan loop `for` dalam Python?",
                "answer": "Loop `for` adalah pernyataan alur kontrol yang memungkinkan eksekusi kode secara berulang atas urutan item, seperti list, tuple, atau string."
            },
            {
                "question": "Bagaimana cara menulis loop `for` di Python?",
                "answer": "Untuk menulis loop `for`, gunakan sintaks `for item in iterable:` diikuti oleh blok kode yang akan diulang. Contoh: `for i in range(5): print(i)`."
            },
            {
                "question": "Apa fungsi dari loop `while` dalam Python?",
                "answer": "Loop `while` menjalankan blok kode secara berulang selama kondisi tertentu tetap benar."
            },
            {
                "question": "Bagaimana cara membuat loop `while` di Python?",
                "question_code": "while condition:\n    # blok kode",
                "answer": "Buat loop `while` dengan sintaks `while condition:` diikuti blok kode yang akan diulang. Contoh: `while x < 5: print(x)`.",
                "answer_code": "while condition:\n    # blok kode"
            },
            {
                "question": "Bagaimana cara menghentikan loop lebih awal di Python?",
                "question_code": "for i in range(10):\n    if i == 5:\n        break\n    print(i)",
                "answer": "Untuk menghentikan loop lebih awal, gunakan pernyataan `break`. Contoh: `if i == 5: break`.",
                "answer_code": "for i in range(10):\n    if i == 5:\n        break\n    print(i)"
            },
            {
                "question": "Bagaimana cara melewati iterasi saat ini dalam loop?",
                "question_code": "for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)",
                "answer": "Untuk melewati iterasi saat ini dan melanjutkan ke iterasi berikutnya, gunakan pernyataan `continue`. Contoh: `if i % 2 == 0: continue`.",
                "answer_code": "for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)"
            },
            {
                "question": "Apa itu loop bersarang dalam Python?",
                "question_code": "for i in range(3):\n    for j in range(3):\n        print(i, j)",
                "answer": "Loop bersarang adalah loop yang diletakkan di dalam loop lainnya. Contoh: `for i in range(3): for j in range(3):`.",
                "answer_code": "for i in range(3):\n    for j in range(3):\n        print(i, j)"
            },
            {
                "question": "Bagaimana cara mendapatkan indeks item dalam loop `for`?",
                "question_code": "for index, item in enumerate(iterable):\n    print(index, item)",
                "answer": "Gunakan fungsi `enumerate()` untuk mendapatkan indeks item dalam loop `for`. Contoh: `for index, item in enumerate(iterable):`.",
                "answer_code": "for index, item in enumerate(iterable):\n    print(index, item)"
            },
            {
                "question": "Apa fungsi dari pernyataan `else` dalam loop?",
                "question_code": "for item in iterable:\n    if condition:\n        break\nelse:\n    # kode yang dijalankan jika tidak ada break",
                "answer": "Pernyataan `else` dalam loop digunakan untuk menjalankan blok kode jika loop selesai tanpa menemukan pernyataan `break`.",
                "answer_code": "for item in iterable:\n    if condition:\n        break\nelse:\n    # kode yang dijalankan jika tidak ada break"
            }
        ]
    },
    {
        "sumber": "belajarpython.com",
        "penulis": "Rina Sari",
        "tanggal": "2023-11-15",
        "judul": "Memahami Tuple dan Set di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "tuple", "set"],
        "konten": "Artikel ini menjelaskan cara menggunakan tuple dan set dalam Python. Dikutip cara pembuatan, akses, serta manipulasi tuple dan set, serta perbedaan antara kedua struktur data ini.",
        "pertanyaan": [
            {
                "question": "Apa itu tuple dalam Python?",
                "answer": "Tuple adalah tipe data yang tidak dapat diubah (immutable) yang memungkinkan Anda menyimpan beberapa item dalam satu variabel, mirip dengan list tetapi dengan elemen yang tetap."
            },
            {
                "question": "Bagaimana cara membuat tuple dalam Python?",
                "answer": "Untuk membuat tuple, gunakan tanda kurung `()` dan pisahkan item dengan koma. Contoh: `my_tuple = (1, 2, 3)`."
            },
            {
                "question": "Bagaimana cara mengakses elemen dalam tuple?",
                "answer": "Akses elemen dalam tuple menggunakan indeks. Contoh: `my_tuple[0]` untuk mendapatkan elemen pertama."
            },
            {
                "question": "Bagaimana cara membuat tuple dengan satu elemen?",
                "question_code": "my_tuple = (1,)",
                "answer": "Untuk membuat tuple dengan satu elemen, tambahkan koma setelah elemen. Contoh: `my_tuple = (1,)`.",
                "answer_code": "my_tuple = (1,)"
            },
            {
                "question": "Apa itu set dalam Python?",
                "question_code": "my_set = {1, 2, 3}",
                "answer": "Set adalah tipe data yang menyimpan elemen unik tanpa urutan tertentu. Contoh: `my_set = {1, 2, 3}`.",
                "answer_code": "my_set = {1, 2, 3}"
            },
            {
                "question": "Bagaimana cara menambahkan elemen ke dalam set?",
                "question_code": "my_set.add(4)",
                "answer": "Gunakan metode `add()` untuk menambahkan elemen baru ke dalam set. Contoh: `my_set.add(4)`.",
                "answer_code": "my_set.add(4)"
            },
            {
                "question": "Bagaimana cara menghapus elemen dari set?",
                "question_code": "my_set.remove(2)",
                "answer": "Gunakan metode `remove()` untuk menghapus elemen dari set. Contoh: `my_set.remove(2)`.",
                "answer_code": "my_set.remove(2)"
            },
            {
                "question": "Bagaimana cara melakukan union pada dua set?",
                "question_code": "set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nunion_set = set1.union(set2)",
                "answer": "Untuk melakukan union pada dua set, gunakan metode `union()`. Contoh: `set1.union(set2)`.",
                "answer_code": "union_set = set1.union(set2)"
            },
            {
                "question": "Bagaimana cara menemukan intersection dari dua set?",
                "question_code": "set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nintersection_set = set1.intersection(set2)",
                "answer": "Untuk menemukan intersection dari dua set, gunakan metode `intersection()`. Contoh: `set1.intersection(set2)`.",
                "answer_code": "intersection_set = set1.intersection(set2)"
            }
        ]
    }
]
