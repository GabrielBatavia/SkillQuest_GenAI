[
    {
        "sumber": "pythonsyntaxlanjutan.com",
        "penulis": "Rizal Fadli",
        "tanggal": "2024-06-15",
        "judul": "Pemanfaatan Fungsi Map, Filter, dan Reduce di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "map", "filter", "reduce", "menengah"],
        "konten": "Artikel ini membahas tentang cara memanfaatkan fungsi built-in map, filter, dan reduce di Python untuk memproses data dalam iterable dengan cara yang lebih efisien.",
        "pertanyaan": [
            {
                "question": "Bisakah dijelaskan fungsi map dalam Python secara sederhana?",
                "answer": "Fungsi map menerapkan fungsi tertentu ke setiap elemen dalam iterable dan mengembalikan map object yang berisi hasilnya."
            },
            {
                "question": "Bagaimana cara menggunakan map di Python dengan contoh sederhana?",
                "question_code": "numbers = [2, 4, 6, 8]\ndoubled = list(map(lambda x: x * 2, numbers))",
                "answer": "Anda bisa menggunakan fungsi map untuk menggandakan setiap elemen dalam daftar. Contoh: map(lambda x: x * 2, numbers).",
                "answer_code": "numbers = [2, 4, 6, 8]\ndoubled = list(map(lambda x: x * 2, numbers))"
            },
            {
                "question": "Apa yang dimaksud dengan fungsi filter di Python?",
                "answer": "Fungsi filter digunakan untuk menyaring elemen dalam iterable berdasarkan fungsi yang mengembalikan nilai boolean."
            },
            {
                "question": "Bagaimana cara menggunakan fungsi filter di Python dengan contoh sederhana?",
                "question_code": "numbers = [1, 2, 3, 4, 5]\nodd_numbers = list(filter(lambda x: x % 2 != 0, numbers))",
                "answer": "Anda bisa menggunakan fungsi filter untuk menyaring elemen ganjil dalam daftar. Contoh: filter(lambda x: x % 2 != 0, numbers).",
                "answer_code": "numbers = [1, 2, 3, 4, 5]\nodd_numbers = list(filter(lambda x: x % 2 != 0, numbers))"
            },
            {
                "question": "Apa kegunaan utama dari fungsi reduce di Python?",
                "answer": "Fungsi reduce menerapkan fungsi tertentu secara berurutan ke elemen-elemen dalam iterable dan mengembalikan satu hasil akhir."
            },
            {
                "question": "Bisakah Anda memberi contoh penggunaan reduce di Python?",
                "question_code": "from functools import reduce\nnumbers = [5, 7, 9]\nsum_total = reduce(lambda x, y: x + y, numbers)",
                "answer": "Anda bisa menggunakan fungsi reduce untuk menjumlahkan semua elemen dalam daftar. Contoh: reduce(lambda x, y: x + y, numbers).",
                "answer_code": "from functools import reduce\nnumbers = [5, 7, 9]\nsum_total = reduce(lambda x, y: x + y, numbers)"
            },
            {
                "question": "Bagaimana cara menggabungkan penggunaan map dan filter di Python?",
                "question_code": "numbers = [2, 3, 4, 5]\nsquare_even_numbers = list(map(lambda x: x**2, filter(lambda x: x % 2 == 0, numbers)))",
                "answer": "Anda bisa menggabungkan map dan filter dengan menyaring elemen terlebih dahulu, kemudian menerapkan map. Contoh: map(lambda x: x**2, filter(lambda x: x % 2 == 0, numbers)).",
                "answer_code": "numbers = [2, 3, 4, 5]\nsquare_even_numbers = list(map(lambda x: x**2, filter(lambda x: x % 2 == 0, numbers)))"
            },
            {
                "question": "Bagaimana cara menggunakan map dengan beberapa iterable di Python?",
                "question_code": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nsum_lists = list(map(lambda x, y: x + y, list1, list2))",
                "answer": "Anda bisa menggunakan map dengan beberapa iterable untuk menjumlahkan elemen-elemen yang berkorespondensi. Contoh: map(lambda x, y: x + y, list1, list2).",
                "answer_code": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nsum_lists = list(map(lambda x, y: x + y, list1, list2))"
            },
            {
                "question": "Bagaimana cara menggunakan filter untuk menyaring string yang mengandung karakter tertentu di Python?",
                "question_code": "words = ['dog', 'cat', 'rabbit']\nfiltered_words = list(filter(lambda x: 'a' in x, words))",
                "answer": "Anda bisa menggunakan filter untuk menyaring string yang mengandung karakter tertentu. Contoh: filter(lambda x: 'a' in x, words).",
                "answer_code": "words = ['dog', 'cat', 'rabbit']\nfiltered_words = list(filter(lambda x: 'a' in x, words))"
            }
        ]
    },
    {
        "sumber": "pythonlanjutan.com",
        "penulis": "Siti Nurhasanah",
        "tanggal": "2024-07-05",
        "judul": "Mengenal Exception Handling di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "exception handling", "menengah"],
        "konten": "Artikel ini membahas tentang exception handling di Python, yang digunakan untuk menangani error agar program dapat berjalan dengan lancar meskipun terjadi kesalahan.",
        "pertanyaan": [
            {
                "question": "Apa itu exception handling di Python?",
                "answer": "Exception handling adalah cara menangani error atau pengecualian yang terjadi selama eksekusi program sehingga program dapat terus berjalan."
            },
            {
                "question": "Bagaimana cara kerja try-except di Python?",
                "question_code": "try:\n    number = int('abc')\nexcept ValueError:\n    print('Tidak bisa mengubah string menjadi angka')",
                "answer": "Blok try-except digunakan untuk menangani error dengan menempatkan kode yang mungkin menghasilkan error di dalam blok try dan menangani error di dalam blok except. Contoh: try: number = int('abc') except ValueError: print('Tidak bisa mengubah string menjadi angka').",
                "answer_code": "try:\n    number = int('abc')\nexcept ValueError:\n    print('Tidak bisa mengubah string menjadi angka')"
            },
            {
                "question": "Bagaimana menangani beberapa jenis pengecualian di Python?",
                "question_code": "try:\n    value = 'hello' + 5\nexcept TypeError:\n    print('Kesalahan tipe data')\nexcept ValueError:\n    print('Kesalahan nilai')",
                "answer": "Anda bisa menangani beberapa jenis pengecualian dengan menggunakan beberapa blok except untuk setiap jenis pengecualian. Contoh: try: value = 'hello' + 5 except TypeError: print('Kesalahan tipe data') except ValueError: print('Kesalahan nilai').",
                "answer_code": "try:\n    value = 'hello' + 5\nexcept TypeError:\n    print('Kesalahan tipe data')\nexcept ValueError:\n    print('Kesalahan nilai')"
            },
            {
                "question": "Bagaimana cara menggunakan blok finally di Python?",
                "question_code": "try:\n    print('Mulai')\nfinally:\n    print('Selesai')",
                "answer": "Blok finally digunakan untuk mengeksekusi kode yang harus dijalankan terlepas dari apakah terjadi pengecualian atau tidak. Contoh: try: print('Mulai') finally: print('Selesai').",
                "answer_code": "try:\n    print('Mulai')\nfinally:\n    print('Selesai')"
            },
            {
                "question": "Bagaimana cara membuat pengecualian khusus di Python?",
                "question_code": "class CustomException(Exception):\n    pass\n\ntry:\n    raise CustomException('Kesalahan khusus')\nexcept CustomException as e:\n    print(e)",
                "answer": "Anda bisa membuat pengecualian khusus dengan mendefinisikan kelas pengecualian yang mewarisi dari kelas Exception. Contoh: class CustomException(Exception): pass.",
                "answer_code": "class CustomException(Exception):\n    pass\n\ntry:\n    raise CustomException('Kesalahan khusus')\nexcept CustomException as e:\n    print(e)"
            },
            {
                "question": "Bagaimana cara menggunakan klausa else dengan try-except di Python?",
                "question_code": "try:\n    result = 8 / 2\nexcept ZeroDivisionError:\n    print('Tidak bisa membagi dengan nol')\nelse:\n    print('Hasil pembagian:', result)",
                "answer": "Klausa else digunakan untuk mengeksekusi kode jika tidak ada pengecualian yang terjadi di dalam blok try. Contoh: try: result = 8 / 2 except ZeroDivisionError: print('Tidak bisa membagi dengan nol') else: print('Hasil pembagian:', result).",
                "answer_code": "try:\n    result = 8 / 2\nexcept ZeroDivisionError:\n    print('Tidak bisa membagi dengan nol')\nelse:\n    print('Hasil pembagian:', result)"
            },
            {
                "question": "Bagaimana menangkap semua jenis pengecualian di Python?",
                "question_code": "try:\n    x = 1 / 0\nexcept Exception as e:\n    print('Terjadi kesalahan:', e)",
                "answer": "Anda bisa menangkap semua jenis pengecualian dengan menggunakan kelas dasar Exception. Contoh: try: x = 1 / 0 except Exception as e: print('Terjadi kesalahan:', e).",
                "answer_code": "try:\n    x = 1 / 0\nexcept Exception as e:\n    print('Terjadi kesalahan:', e)"
            },
            {
                "question": "Bagaimana cara menggunakan klausa raise di Python?",
                "question_code": "def check_value(val):\n    if val < 0:\n        raise ValueError('Nilai tidak boleh negatif')\n\ntry:\n    check_value(-1)\nexcept ValueError as e:\n    print(e)",
                "answer": "Klausa raise digunakan untuk memunculkan pengecualian secara manual. Contoh: raise ValueError('Nilai tidak boleh negatif').",
                "answer_code": "def check_value(val):\n    if val < 0:\n        raise ValueError('Nilai tidak boleh negatif')\n\ntry:\n    check_value(-1)\nexcept ValueError as e:\n    print(e)"
            },
            {
                "question": "Bagaimana cara menggunakan klausa assert di Python?",
                "question_code": "y = -5\nassert y >= 0, 'Nilai y harus positif'",
                "answer": "Klausa assert digunakan untuk melakukan pemeriksaan logika selama eksekusi program. Jika kondisi assert False, AssertionError akan dipicu. Contoh: assert y >= 0, 'Nilai y harus positif'.",
                "answer_code": "y = -5\nassert y >= 0, 'Nilai y harus positif'"
            }
        ]
    }
]
