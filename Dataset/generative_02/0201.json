[
{
    "sumber": "PythonMahir.org",
    "penulis": "Lisa Santika",
    "tanggal": "2024-07-05",
    "judul": "Pemrograman Berorientasi Objek di Python",
    "tingkat_kesulitan": "lanjutan",
    "tag": ["oop", "kelas", "objek"],
    "konten": "Artikel ini menjelaskan dasar-dasar pemrograman berorientasi objek (OOP) di Python, termasuk pembuatan kelas dan objek.",
    "pertanyaan": [
        {
            "question": "Bagaimana cara mendefinisikan kelas di Python?",
            "answer": "Kelas dapat didefinisikan dengan menggunakan kata kunci `class`. Contohnya: `class Car:`."
        },
        {
            "question": "Apa itu konstruktor di Python?",
            "answer": "Konstruktor adalah metode khusus yang digunakan untuk menginisialisasi objek dari kelas. Contohnya: `def __init__(self, brand, model):`."
        },
        {
            "question": "Apa itu AttributeError?",
            "answer": "AttributeError terjadi ketika atribut yang tidak ada diakses. Pastikan atribut sudah didefinisikan di kelas."
        },
        {
            "question": "Bagaimana cara membuat objek dari kelas di Python?",
            "question_code": "class Car:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model\n\ncar1 = Car('Toyota', 'Corolla')",
            "answer": "Anda bisa membuat objek dari kelas dengan memanggil nama kelas seperti fungsi. Contohnya: `car1 = Car('Toyota', 'Corolla')`."
        },
        {
            "question": "Bagaimana cara mengakses atribut objek di Python?",
            "question_code": "print(car1.brand, car1.model)",
            "answer": "Anda bisa mengakses atribut objek dengan menggunakan notasi titik. Contohnya: `car1.brand`.",
            "answer_code": "class Car:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model\n\ncar1 = Car('Toyota', 'Corolla')\nprint(car1.brand, car1.model)"
        },
        {
            "question": "Bagaimana cara mendefinisikan metode di kelas Python?",
            "question_code": "class Car:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model\n\n    def get_info(self):\n        return f'{self.brand} {self.model}'",
            "answer": "Metode dalam kelas didefinisikan seperti fungsi biasa dengan parameter `self` sebagai parameter pertama. Contohnya: `def get_info(self):`.",
            "answer_code": "class Car:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model\n\n    def get_info(self):\n        return f'{self.brand} {self.model}'"
        },
        {
            "question": "Bagaimana cara mengakses metode objek di Python?",
            "question_code": "car1.get_info()",
            "answer": "Anda bisa mengakses metode objek dengan menggunakan notasi titik. Contohnya: `car1.get_info()`.",
            "answer_code": "class Car:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model\n\n    def get_info(self):\n        return f'{self.brand} {self.model}'\n\ncar1 = Car('Toyota', 'Corolla')\nprint(car1.get_info())"
        },
        {
            "question": "Bagaimana cara menggunakan pewarisan di Python?",
            "question_code": "class ElectricCar(Car):\n    def __init__(self, brand, model, battery_size):\n        super().__init__(brand, model)\n        self.battery_size = battery_size",
            "answer": "Pewarisan memungkinkan kelas anak mewarisi atribut dan metode dari kelas induk. Contohnya: `class ElectricCar(Car):`.",
            "answer_code": "class Car:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model\n\nclass ElectricCar(Car):\n    def __init__(self, brand, model, battery_size):\n        super().__init__(brand, model)\n        self.battery_size = battery_size\n\ncar2 = ElectricCar('Tesla', 'Model S', 100)\nprint(car2.brand, car2.model, car2.battery_size)"
        }
    ]
},
{
    "sumber": "KodingPython.com",
    "penulis": "Ahmad Taufik",
    "tanggal": "2024-07-08",
    "judul": "Manipulasi String di Python",
    "tingkat_kesulitan": "menengah",
    "tag": ["string", "manipulasi", "python"],
    "konten": "Artikel ini membahas berbagai metode untuk manipulasi string di Python.",
    "pertanyaan": [
        {
            "question": "Bagaimana cara mengubah string menjadi huruf kecil di Python?",
            "answer": "Anda bisa menggunakan metode `lower()` untuk mengubah string menjadi huruf kecil. Contohnya: `text.lower()`."
        },
        {
            "question": "Bagaimana cara menggabungkan dua string di Python?",
            "answer": "Anda bisa menggunakan operator `+` untuk menggabungkan dua string. Contohnya: `'Hello' + ' World'`."
        },
        {
            "question": "Apa itu TypeError?",
            "answer": "TypeError terjadi ketika operasi tidak didukung oleh tipe data yang digunakan. Pastikan operasi yang dilakukan sesuai dengan tipe data."
        },
        {
            "question": "Bagaimana cara memotong string di Python?",
            "question_code": "text = 'Hello, World!'\nprint(text[0:5])",
            "answer": "Anda bisa memotong string dengan menggunakan slicing. Contohnya: `text[0:5]`."
        },
        {
            "question": "Bagaimana cara mengubah string menjadi huruf besar di Python?",
            "question_code": "text = 'Hello, World!'\nprint(text.upper())",
            "answer": "Anda bisa menggunakan metode `upper()` untuk mengubah string menjadi huruf besar. Contohnya: `text.upper()`."
        },
        {
            "question": "Bagaimana cara menghilangkan spasi di awal dan akhir string di Python?",
            "question_code": "text = '  Hello, World!  '\nprint(text.strip())",
            "answer": "Anda bisa menggunakan metode `strip()` untuk menghilangkan spasi di awal dan akhir string. Contohnya: `text.strip()`."
        },
        {
            "question": "Bagaimana cara memeriksa apakah string dimulai dengan substring tertentu di Python?",
            "question_code": "text = 'Hello, World!'\nprint(text.startswith('Hello'))",
            "answer": "Anda bisa menggunakan metode `startswith()` untuk memeriksa apakah string dimulai dengan substring tertentu. Contohnya: `text.startswith('Hello')`.",
            "answer_code": "text = 'Hello, World!'\nprint(text.startswith('Hello'))"
        },
        {
            "question": "Bagaimana cara memeriksa apakah string diakhiri dengan substring tertentu di Python?",
            "question_code": "text = 'Hello, World!'\nprint(text.endswith('World!'))",
            "answer": "Anda bisa menggunakan metode `endswith()` untuk memeriksa apakah string diakhiri dengan substring tertentu. Contohnya: `text.endswith('World!')`.",
            "answer_code": "text = 'Hello, World!'\nprint(text.endswith('World!'))"
        },
        {
            "question": "Bagaimana cara mengganti substring dalam string di Python?",
            "question_code": "text = 'Hello, World!'\nprint(text.replace('World', 'Python'))",
            "answer": "Anda bisa menggunakan metode `replace()` untuk mengganti substring dalam string. Contohnya: `text.replace('World', 'Python')`.",
            "answer_code": "text = 'Hello, World!'\nprint(text.replace('World', 'Python'))"
        }
    ]
}
]