[
    {
        "sumber": "belajarpython.id",
        "penulis": "Fajar Hadi",
        "tanggal": "2023-09-25",
        "judul": "Penggunaan Fungsi Built-in di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "built-in functions", "dasar"],
        "konten": "Artikel ini membahas berbagai fungsi built-in di Python seperti `len()`, `type()`, `input()`, `print()`, dan `range()`. Setiap fungsi memiliki kegunaan khusus dalam pengembangan aplikasi Python.",
        "pertanyaan": [
            {
                "question": "Jelaskan bagaimana fungsi `len()` bekerja dan berikan contoh penggunaannya.",
                "answer": "Fungsi `len()` mengembalikan jumlah elemen dalam objek seperti list atau string. Contoh: `len('Python')` mengembalikan 6."
            },
            {
                "question": "Bagaimana cara mengecek tipe data suatu variabel menggunakan `type()`?",
                "answer": "Fungsi `type()` digunakan untuk memeriksa tipe data dari sebuah objek. Misalnya, `type(3.14)` akan mengembalikan `<class 'float'>`."
            },
            {
                "question": "Apa yang dilakukan fungsi `input()` dan bagaimana cara penggunaannya?",
                "answer": "Fungsi `input()` menerima input dari pengguna dalam bentuk string. Contoh: `user_input = input('Masukkan sesuatu: ')`."
            },
            {
                "question": "Bagaimana cara menggunakan `print()` untuk menampilkan hasil perhitungan?",
                "question_code": "result = 5 + 3\nprint(result)",
                "answer": "Fungsi `print()` dapat digunakan untuk menampilkan hasil perhitungan. Contoh: `result = 5 + 3; print(result)` akan mencetak 8.",
                "answer_code": "result = 5 + 3\nprint(result)"
            },
            {
                "question": "Apa yang dilakukan fungsi `range()` dan bagaimana cara menggunakannya dalam loop?",
                "question_code": "for number in range(4):\n    print(number)",
                "answer": "Fungsi `range()` digunakan untuk menghasilkan urutan angka yang sering digunakan dalam loop. Contoh: `for number in range(4): print(number)` akan mencetak angka 0 hingga 3.",
                "answer_code": "for number in range(4):\n    print(number)"
            },
            {
                "question": "Jelaskan kegunaan dari fungsi `abs()` dengan contoh penggunaannya.",
                "question_code": "abs(-8)",
                "answer": "Fungsi `abs()` mengembalikan nilai absolut dari sebuah angka. Contoh: `abs(-8)` akan mengembalikan 8.",
                "answer_code": "abs(-8)"
            },
            {
                "question": "Bagaimana cara menemukan nilai maksimum dalam sebuah list menggunakan `max()`?",
                "question_code": "max([15, 22, 8])",
                "answer": "Fungsi `max()` digunakan untuk menemukan nilai terbesar dalam sebuah iterable. Contoh: `max([15, 22, 8])` akan mengembalikan 22.",
                "answer_code": "max([15, 22, 8])"
            },
            {
                "question": "Apa fungsi dari `min()` dan bagaimana cara penggunaannya?",
                "question_code": "min([5, 1, 8])",
                "answer": "Fungsi `min()` digunakan untuk menemukan nilai terkecil dalam sebuah iterable. Contoh: `min([5, 1, 8])` akan mengembalikan 1.",
                "answer_code": "min([5, 1, 8])"
            },
            {
                "question": "Bagaimana fungsi `sum()` dapat digunakan untuk menjumlahkan angka dalam list?",
                "question_code": "sum([3, 7, 2])",
                "answer": "Fungsi `sum()` menghitung total jumlah elemen dalam iterable seperti list. Contoh: `sum([3, 7, 2])` akan menghasilkan 12.",
                "answer_code": "sum([3, 7, 2])"
            }
        ]
    },
    {
        "sumber": "codingpythonpemula.com",
        "penulis": "Dewi Kartika",
        "tanggal": "2024-03-14",
        "judul": "Penggunaan Kondisional di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "kondisional", "dasar"],
        "konten": "Artikel ini menguraikan cara kerja pernyataan kondisional di Python seperti `if`, `else`, `elif`, dan penggunaan operator logika untuk membuat keputusan dalam kode.",
        "pertanyaan": [
            {
                "question": "Bagaimana cara menggunakan pernyataan `if` dalam Python dan apa contohnya?",
                "answer": "Pernyataan `if` digunakan untuk mengeksekusi blok kode jika kondisinya benar. Contoh: `if temperature > 30: print('Cuaca panas')`."
            },
            {
                "question": "Apa kegunaan dari pernyataan `else` dalam struktur kondisional?",
                "answer": "Pernyataan `else` digunakan untuk menangani kasus ketika kondisi dalam pernyataan `if` tidak benar. Contoh: `else: print('Cuaca tidak panas')`."
            },
            {
                "question": "Bagaimana menggunakan `elif` untuk menambahkan lebih banyak kondisi?",
                "answer": "Pernyataan `elif` memeriksa kondisi tambahan jika kondisi sebelumnya tidak terpenuhi. Contoh: `elif temperature == 30: print('Cuaca sedang')`."
            },
            {
                "question": "Jelaskan bagaimana operator logika `and` bekerja dengan contoh penggunaannya.",
                "question_code": "if age > 18 and age < 65:\n    print('Anda dewasa dan belum pensiun')",
                "answer": "Operator `and` digunakan untuk memeriksa apakah kedua kondisi benar. Contoh: `if age > 18 and age < 65:` akan memeriksa apakah umur antara 18 dan 65 tahun.",
                "answer_code": "if age > 18 and age < 65:\n    print('Anda dewasa dan belum pensiun')"
            },
            {
                "question": "Bagaimana cara menggunakan operator logika `or` dalam pernyataan kondisional?",
                "question_code": "if score < 50 or score > 90:\n    print('Skor di luar rentang normal')",
                "answer": "Operator `or` memeriksa apakah salah satu dari kondisi benar. Contoh: `if score < 50 or score > 90:` akan memeriksa apakah skor kurang dari 50 atau lebih dari 90.",
                "answer_code": "if score < 50 or score > 90:\n    print('Skor di luar rentang normal')"
            },
            {
                "question": "Apa yang dilakukan operator logika `not` dan bagaimana cara menggunakannya?",
                "question_code": "if not is_active:\n    print('Akun tidak aktif')",
                "answer": "Operator `not` membalikkan nilai boolean dari kondisi. Contoh: `if not is_active:` akan memeriksa apakah `is_active` adalah False.",
                "answer_code": "if not is_active:\n    print('Akun tidak aktif')"
            },
            {
                "question": "Jelaskan cara membuat kondisional bersarang dengan contoh.",
                "question_code": "if x > 0:\n    if x % 2 == 0:\n        print('x adalah bilangan positif genap')",
                "answer": "Kondisional bersarang melibatkan pernyataan `if` di dalam `if` lainnya. Contoh: `if x > 0: if x % 2 == 0:` memeriksa apakah `x` positif dan genap.",
                "answer_code": "if x > 0:\n    if x % 2 == 0:\n        print('x adalah bilangan positif genap')"
            },
            {
                "question": "Bagaimana cara menggunakan operator perbandingan `==` untuk membandingkan dua nilai?",
                "question_code": "if a == b:\n    print('a sama dengan b')",
                "answer": "Operator `==` memeriksa kesamaan nilai antara dua objek. Contoh: `if a == b:` memeriksa apakah `a` sama dengan `b`.",
                "answer_code": "if a == b:\n    print('a sama dengan b')"
            },
            {
                "question": "Apa fungsi dari operator `!=` dalam perbandingan nilai?",
                "question_code": "if a != b:\n    print('a tidak sama dengan b')",
                "answer": "Operator `!=` memeriksa ketidaksamaan antara dua nilai. Contoh: `if a != b:` memeriksa apakah `a` tidak sama dengan `b`.",
                "answer_code": "if a != b:\n    print('a tidak sama dengan b')"
            }
        ]
    }
]
