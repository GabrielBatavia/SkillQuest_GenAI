[
    {
        "sumber": "LearnPython.org",
        "penulis": "Aisha Yani",
        "tanggal": "2024-08-23",
        "judul": "Dasar-Dasar Penggunaan String dalam Python",
        "tingkat_kesulitan": "pemula",
        "tag": ["string", "python"],
        "konten": "Artikel ini menjelaskan dasar-dasar penggunaan string dalam Python, termasuk penggabungan, pemotongan, dan manipulasi string.",
        "pertanyaan": [
            {
                "question": "Bagaimana cara menggabungkan dua string di Python?",
                "answer": "Gunakan operator `+` untuk menggabungkan dua string. Misalnya: `str1 + str2` akan menggabungkan `str1` dan `str2`."
            },
            {
                "question": "Apa metode yang digunakan untuk memotong string?",
                "answer": "Gunakan slicing dengan sintaks `string[start:end]` untuk memotong string. Misalnya: `text[1:4]` akan menghasilkan substring dari indeks 1 hingga 3."
            },
            {
                "question": "Bagaimana saya bisa mengubah semua huruf dalam string menjadi huruf kapital?",
                "answer": "Gunakan metode `upper()`. Misalnya: `text.upper()` akan mengubah seluruh string menjadi huruf kapital."
            },
            {
                "question": "Ada yang salah dengan kode ini? `text = 'hello'\ntext.uppercase()\nprint(text)`",
                "question_code": "text = 'hello'\ntext.uppercase()\nprint(text)",
                "answer": "Metode yang benar adalah `upper()`, bukan `uppercase()`. Seharusnya `text.upper()`.",
                "answer_code": "text = 'hello'\ntext = text.upper()\nprint(text)"
            },
            {
                "question": "Kenapa kode ini tidak berjalan? `text = 'hello'\nprint(text[5])`",
                "question_code": "text = 'hello'\nprint(text[5])",
                "answer": "Indeks `5` di luar jangkauan karena string hanya memiliki 5 karakter dengan indeks 0-4. Gunakan indeks yang valid, misalnya `text[4]`.",
                "answer_code": "text = 'hello'\nprint(text[4])"
            },
            {
                "question": "Apakah ada kesalahan dalam kode ini? `text = 'hello world'\nprint(text[6:3])`",
                "question_code": "text = 'hello world'\nprint(text[6:3])",
                "answer": "Slicing `text[6:3]` tidak akan menghasilkan hasil yang diinginkan. Indeks akhir harus lebih besar dari indeks awal. Seharusnya `text[3:6]`.",
                "answer_code": "text = 'hello world'\nprint(text[3:6])"
            }
        ]
    },
    {
        "sumber": "PythonForBeginners.com",
        "penulis": "Rina Prasetya",
        "tanggal": "2024-08-24",
        "judul": "Pengantar tentang List dan Tuple dalam Python",
        "tingkat_kesulitan": "pemula",
        "tag": ["list", "tuple", "python"],
        "konten": "Artikel ini membahas perbedaan antara list dan tuple dalam Python, serta cara penggunaannya.",
        "pertanyaan": [
            {
                "question": "Bagaimana cara membuat list kosong di Python?",
                "answer": "Gunakan sintaks `[]` untuk membuat list kosong. Misalnya: `my_list = []`."
            },
            {
                "question": "Apa perbedaan utama antara list dan tuple di Python?",
                "answer": "List bersifat mutable (dapat diubah), sementara tuple bersifat immutable (tidak dapat diubah setelah dibuat)."
            },
            {
                "question": "Bagaimana saya bisa menambah elemen ke dalam tuple?",
                "answer": "Tuple bersifat immutable, sehingga Anda tidak bisa menambah elemen setelah tuple dibuat. Anda harus membuat tuple baru dengan elemen tambahan."
            },
            {
                "question": "Ada kesalahan apa pada kode ini? `my_list = (1, 2, 3)\nmy_list.append(4)\nprint(my_list)`",
                "question_code": "my_list = (1, 2, 3)\nmy_list.append(4)\nprint(my_list)",
                "answer": "Metode `append()` tidak tersedia untuk tuple karena tuple bersifat immutable. Gunakan list jika Anda perlu menambah elemen.",
                "answer_code": "my_list = [1, 2, 3]\nmy_list.append(4)\nprint(my_list)"
            },
            {
                "question": "Apa yang salah dengan kode ini? `my_tuple = (1, 2, 3)\nmy_tuple[1] = 4\nprint(my_tuple)`",
                "question_code": "my_tuple = (1, 2, 3)\nmy_tuple[1] = 4\nprint(my_tuple)",
                "answer": "Tuple bersifat immutable, sehingga Anda tidak dapat mengubah elemen setelah dibuat. Anda harus membuat tuple baru untuk perubahan.",
                "answer_code": "my_tuple = (1, 2, 4)\nprint(my_tuple)"
            },
            {
                "question": "Mengapa kode ini tidak memberikan hasil yang diinginkan? `my_list = [1, 2, 3]\nprint(my_list[3])`",
                "question_code": "my_list = [1, 2, 3]\nprint(my_list[3])",
                "answer": "Indeks `3` di luar jangkauan karena list hanya memiliki 3 elemen dengan indeks 0-2. Gunakan indeks yang valid, misalnya `my_list[2]`.",
                "answer_code": "my_list = [1, 2, 3]\nprint(my_list[2])"
            }
        ]
    },
    {
        "sumber": "CodeMaster.com",
        "penulis": "Joko Widianto",
        "tanggal": "2024-08-25",
        "judul": "Memahami Fungsi dan Metode dalam Python",
        "tingkat_kesulitan": "menengah",
        "tag": ["function", "method", "python"],
        "konten": "Artikel ini mengulas cara mendefinisikan dan menggunakan fungsi serta metode dalam Python, termasuk perbedaan antara keduanya.",
        "pertanyaan": [
            {
                "question": "Bagaimana cara mendefinisikan sebuah fungsi di Python?",
                "answer": "Gunakan kata kunci `def` diikuti nama fungsi dan tanda kurung `()`. Misalnya: `def my_function():`."
            },
            {
                "question": "Apa yang dilakukan metode `split()` dalam Python?",
                "answer": "Metode `split()` membagi string menjadi list berdasarkan separator yang diberikan. Misalnya: `'hello world'.split(' ')` akan menghasilkan `['hello', 'world']`."
            },
            {
                "question": "Bagaimana cara mengembalikan nilai dari fungsi?",
                "answer": "Gunakan kata kunci `return` di dalam fungsi untuk mengembalikan nilai. Misalnya: `return result` akan mengembalikan nilai `result`."
            },
            {
                "question": "Ada yang salah dengan kode ini? `def greet():\nprint('Hello')\nprint(greet)`",
                "question_code": "def greet():\nprint('Hello')\nprint(greet)",
                "answer": "Anda harus memanggil fungsi dengan tanda kurung `()`, bukan hanya menyebutkan nama fungsi. Seharusnya `print(greet())`.",
                "answer_code": "def greet():\n    print('Hello')\nprint(greet())"
            },
            {
                "question": "Kenapa kode ini memberikan error? `def add(a, b):\nreturn a + b\nprint(add(5))`",
                "question_code": "def add(a, b):\nreturn a + b\nprint(add(5))",
                "answer": "Fungsi `add` membutuhkan dua argumen, tetapi hanya satu yang diberikan. Kode yang benar adalah `print(add(5, 3))`.",
                "answer_code": "def add(a, b):\n    return a + b\nprint(add(5, 3))"
            },
            {
                "question": "Apa yang salah dengan kode ini? `def multiply(a, b):\nresult = a * b\nprint(result)\nmultiply(4)`",
                "question_code": "def multiply(a, b):\nresult = a * b\nprint(result)\nmultiply(4)",
                "answer": "Fungsi `multiply` membutuhkan dua argumen, tetapi hanya satu yang diberikan saat memanggil. Kode yang benar adalah `multiply(4, 5)`.",
                "answer_code": "def multiply(a, b):\n    result = a * b\n    print(result)\nmultiply(4, 5)"
            }
        ]
    }
]
