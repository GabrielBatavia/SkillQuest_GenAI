[
    {
        "sumber": "belajarpython.com",
        "penulis": "Ahmad Budi",
        "tanggal": "2023-12-05",
        "judul": "Pemrograman Berbasis Objek di Python",
        "tingkat_kesulitan": "Lanjutan",
        "tag": ["python", "OOP", "lanjutan"],
        "konten": "Artikel ini menguraikan konsep Object-Oriented Programming (OOP) dalam Python, mencakup kelas, objek, pewarisan, dan enkapsulasi.",
        "pertanyaan": [
            {
                "question": "Apa yang dimaksud dengan OOP?",
                "answer": "OOP adalah singkatan dari Object-Oriented Programming, suatu paradigma pemrograman yang memanfaatkan 'objek' untuk merepresentasikan data dan metode."
            },
            {
                "question": "Bagaimana cara mendefinisikan kelas pada Python?",
                "answer": "Untuk mendefinisikan kelas di Python, gunakan kata kunci `class` diikuti dengan nama kelas. Contoh: `class KelasSaya:`."
            },
            {
                "question": "Bagaimana cara membuat objek dari kelas di Python?",
                "answer": "Untuk membuat objek dari kelas, gunakan sintaks `nama_objek = NamaKelas()`. Misalnya: `objek = KelasSaya()`."
            },
            {
                "question": "Bagaimana cara mendeklarasikan metode dalam kelas?",
                "question_code": "class KelasSaya:\n    def metode_saya(self):\n        print('Halo dari KelasSaya')",
                "answer": "Anda bisa mendeklarasikan metode dalam kelas dengan menambahkan fungsi di dalam kelas. Contoh: `def metode_saya(self):`."
            },
            {
                "question": "Bagaimana cara mengakses atribut di dalam kelas?",
                "question_code": "class KelasSaya:\n    def __init__(self, nilai):\n        self.nilai = nilai\nobjek = KelasSaya(10)\nprint(objek.nilai)",
                "answer": "Anda bisa mengakses atribut di dalam kelas dengan sintaks `self.nama_atribut` di dalam kelas dan `objek.nama_atribut` di luar kelas.",
                "answer_code": "objek.nilai"
            },
            {
                "question": "Bagaimana cara melakukan pewarisan di Python?",
                "question_code": "class Induk:\n    def metode_induk(self):\n        print('Halo dari Induk')\nclass Anak(Induk):\n    def metode_anak(self):\n        print('Halo dari Anak')\nobjek = Anak()\nobjek.metode_induk()",
                "answer": "Anda bisa melakukan pewarisan dengan menulis nama kelas induk dalam tanda kurung setelah nama kelas anak. Misalnya: `class Anak(Induk):`.",
                "answer_code": "objek.metode_induk()"
            },
            {
                "question": "Bagaimana cara mengimplementasikan enkapsulasi di Python?",
                "question_code": "class KelasSaya:\n    def __init__(self):\n        self.__atribut_privat = 'privat'\n    def get_atribut_privat(self):\n        return self.__atribut_privat\nobjek = KelasSaya()\nprint(objek.get_atribut_privat())",
                "answer": "Anda bisa mengimplementasikan enkapsulasi dengan mendeklarasikan atribut sebagai private menggunakan dua garis bawah `__` di awal nama atribut.",
                "answer_code": "objek.get_atribut_privat()"
            },
            {
                "question": "Bagaimana cara mendefinisikan metode statis di Python?",
                "question_code": "class KelasSaya:\n    @staticmethod\n    def metode_statis():\n        print('Ini adalah metode statis')\nKelasSaya.metode_statis()",
                "answer": "Anda bisa mendefinisikan metode statis dengan menggunakan dekorator `@staticmethod` di atas metode. Contoh: `@staticmethod`.",
                "answer_code": "KelasSaya.metode_statis()"
            },
            {
                "question": "Bagaimana cara mengimplementasikan polimorfisme di Python?",
                "question_code": "class Hewan:\n    def suara(self):\n        raise NotImplementedError\nclass Anjing(Hewan):\n    def suara(self):\n        return 'Guk'\nclass Kucing(Hewan):\n    def suara(self):\n        return 'Meong'\nhewan = [Anjing(), Kucing()]\nfor h in hewan:\n    print(h.suara())",
                "answer": "Anda bisa mengimplementasikan polimorfisme dengan mendefinisikan metode yang sama di kelas yang berbeda dan memanggilnya melalui referensi kelas induk.",
                "answer_code": "for h in hewan:\n    print(h.suara())"
            }
        ]
    },
    {
        "sumber": "pythonpemula.com",
        "penulis": "Siti Aminah",
        "tanggal": "2022-11-22",
        "judul": "Manipulasi Data dengan Pandas",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "pandas", "data"],
        "konten": "Artikel ini memberikan panduan tentang cara menggunakan pustaka Pandas untuk manipulasi data dalam Python, termasuk cara membuat, mengakses, dan memodifikasi DataFrame.",
        "pertanyaan": [
            {
                "question": "Apa yang dimaksud dengan Pandas?",
                "answer": "Pandas adalah pustaka Python yang digunakan untuk manipulasi dan analisis data."
            },
            {
                "question": "Bagaimana cara mengimpor pustaka Pandas?",
                "answer": "Anda dapat mengimpor pustaka Pandas menggunakan sintaks `import pandas as pd`."
            },
            {
                "question": "Bagaimana cara membuat DataFrame dengan Pandas?",
                "answer": "Anda dapat membuat DataFrame menggunakan fungsi `pd.DataFrame()`. Contoh: `df = pd.DataFrame(data)`."
            },
            {
                "question": "Bagaimana cara membaca file CSV ke dalam DataFrame?",
                "question_code": "import pandas as pd\ndf = pd.read_csv('file.csv')",
                "answer": "Anda dapat membaca file CSV ke dalam DataFrame menggunakan fungsi `pd.read_csv()`. Contoh: `df = pd.read_csv('file.csv')`."
            },
            {
                "question": "Bagaimana cara menampilkan lima baris pertama dari DataFrame?",
                "question_code": "df.head()",
                "answer": "Anda dapat menampilkan lima baris pertama dari DataFrame menggunakan metode `head()`. Contoh: `df.head()`."
            },
            {
                "question": "Bagaimana cara mengakses kolom tertentu dalam DataFrame?",
                "question_code": "df['nama_kolom']",
                "answer": "Anda dapat mengakses kolom tertentu dalam DataFrame menggunakan sintaks `df['nama_kolom']`.",
                "answer_code": "df['nama_kolom']"
            },
            {
                "question": "Bagaimana cara menambahkan kolom baru ke DataFrame?",
                "question_code": "df['kolom_baru'] = nilai",
                "answer": "Anda dapat menambahkan kolom baru ke DataFrame dengan menambahkan nilai ke kolom tersebut. Contoh: `df['kolom_baru'] = nilai`.",
                "answer_code": "df['kolom_baru'] = nilai"
            },
            {
                "question": "Bagaimana cara menghapus kolom dari DataFrame?",
                "question_code": "df.drop('nama_kolom', axis=1, inplace=True)",
                "answer": "Anda dapat menghapus kolom dari DataFrame menggunakan metode `drop()`. Contoh: `df.drop('nama_kolom', axis=1, inplace=True)`.",
                "answer_code": "df.drop('nama_kolom', axis=1, inplace=True)"
            },
            {
                "question": "Bagaimana cara memfilter DataFrame berdasarkan kondisi tertentu?",
                "question_code": "df[df['kolom'] > nilai]",
                "answer": "Anda dapat memfilter DataFrame berdasarkan kondisi tertentu menggunakan sintaks `df[df['kolom'] > nilai]`.",
                "answer_code": "df[df['kolom'] > nilai]"
            }
        ]
    }
]
