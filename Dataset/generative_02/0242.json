[
{
    "sumber": "PythonExpert",
    "penulis": "Budi Santoso",
    "tanggal": "2023-01-05",
    "judul": "Manipulasi String di Python",
    "tingkat_kesulitan": "Pemula",
    "tag": ["string", "manipulasi", "python"],
    "konten": "Artikel ini membahas berbagai cara untuk memanipulasi string dalam Python, seperti penggabungan, pemotongan, dan format.",
    "pertanyaan": [
        {
            "question": "Bagaimana cara menggabungkan string di Python?",
            "answer": "Anda bisa menggunakan operator `+` untuk menggabungkan beberapa string. Contohnya: `'Hello' + ' ' + 'World'`."
        },
        {
            "question": "Bagaimana cara memotong string di Python?",
            "answer": "Anda bisa menggunakan slicing untuk memotong string. Contohnya: `nama[0:3]`."
        },
        {
            "question": "Apa itu TypeError dalam konteks string?",
            "answer": "TypeError terjadi ketika mencoba menggabungkan string dengan tipe data lain tanpa konversi. Gunakan fungsi `str()` untuk konversi."
        },
        {
            "question": "Bagaimana cara menggunakan operator `+` untuk menggabungkan string di Python?",
            "question_code": "nama = 'Python'\nselamat = 'Selamat belajar, ' + nama + '!'\nprint(selamat)",
            "answer": "Anda bisa menggunakan operator `+` untuk menggabungkan string. Contohnya: `'Selamat belajar, ' + nama + '!'`."
        },
        {
            "question": "Bagaimana cara memotong string menggunakan slicing di Python?",
            "question_code": "nama = 'Python'\npotongan = nama[0:3]\nprint(potongan)",
            "answer": "Anda bisa menggunakan slicing dengan menuliskan indeks di dalam tanda kurung siku. Contohnya: `nama[0:3]`."
        },
        {
            "question": "Bagaimana cara menggabungkan string dengan tipe data lain di Python?",
            "question_code": "nama = 'Python'\numur = 30\nselamat = 'Selamat belajar, ' + nama + '! Anda berusia ' + str(umur) + ' tahun.'",
            "answer": "Gunakan fungsi `str()` untuk mengonversi tipe data lain menjadi string sebelum penggabungan. Contohnya: `str(umur)`."
        },
        {
            "question": "Bagaimana cara memformat string di Python?",
            "question_code": "nama = 'Python'\numur = 30\nselamat = f'Selamat belajar, {nama}! Anda berusia {umur} tahun.'",
            "answer": "Anda bisa menggunakan f-string untuk memformat string. Contohnya: `f'Selamat belajar, {nama}! Anda berusia {umur} tahun.'`.",
            "answer_code": "nama = 'Python'\numur = 30\nselamat = f'Selamat belajar, {nama}! Anda berusia {umur} tahun.'\nprint(selamat)"
        },
        {
            "question": "Bagaimana cara mengubah string menjadi huruf besar di Python?",
            "question_code": "nama = 'python'\nprint(nama.upper())",
            "answer": "Anda bisa menggunakan metode `upper()` untuk mengubah string menjadi huruf besar. Contohnya: `nama.upper()`.",
            "answer_code": "nama = 'python'\nprint(nama.upper())"
        },
        {
            "question": "Bagaimana cara mengubah string menjadi huruf kecil di Python?",
            "question_code": "nama = 'PYTHON'\nprint(nama.lower())",
            "answer": "Anda bisa menggunakan metode `lower()` untuk mengubah string menjadi huruf kecil. Contohnya: `nama.lower()`.",
            "answer_code": "nama = 'PYTHON'\nprint(nama.lower())"
        },
        {
            "question": "Bagaimana cara menghilangkan spasi di awal dan akhir string di Python?",
            "question_code": "nama = '  Python  '\nprint(nama.strip())",
            "answer": "Anda bisa menggunakan metode `strip()` untuk menghilangkan spasi di awal dan akhir string. Contohnya: `nama.strip()`.",
            "answer_code": "nama = '  Python  '\nprint(nama.strip())"
        }
    ]
},
{
    "sumber": "AdvancedPython",
    "penulis": "Rahmat Hidayat",
    "tanggal": "2022-12-30",
    "judul": "Pemrograman Asinkron dengan Asyncio",
    "tingkat_kesulitan": "Lanjutan",
    "tag": ["asyncio", "asinkron", "python"],
    "konten": "Artikel ini menjelaskan konsep pemrograman asinkron di Python menggunakan modul asyncio, termasuk coroutine dan event loop.",
    "pertanyaan": [
        {
            "question": "Apa itu pemrograman asinkron di Python?",
            "answer": "Pemrograman asinkron memungkinkan Anda menjalankan tugas tanpa menunggu tugas lain selesai, menggunakan kata kunci `async` dan `await`."
        },
        {
            "question": "Bagaimana cara mendefinisikan coroutine di Python?",
            "answer": "Anda bisa mendefinisikan coroutine dengan menggunakan kata kunci `async def`. Contohnya: `async def salam():`."
        },
        {
            "question": "Apa itu RuntimeError dalam konteks asyncio?",
            "answer": "RuntimeError terjadi ketika event loop dijalankan lebih dari sekali. Pastikan event loop hanya dijalankan sekali."
        },
        {
            "question": "Bagaimana cara menunda eksekusi dalam coroutine di Python?",
            "question_code": "import asyncio\n\nasync def salam():\n    await asyncio.sleep(1)\n    print('Hello, World!')",
            "answer": "Anda bisa menggunakan `await asyncio.sleep()` untuk menunda eksekusi dalam coroutine. Contohnya: `await asyncio.sleep(1)`."
        },
        {
            "question": "Bagaimana cara menjalankan coroutine di Python?",
            "question_code": "import asyncio\n\nasync def salam():\n    print('Hello, World!')\n\nasyncio.run(salam())",
            "answer": "Anda bisa menjalankan coroutine dengan menggunakan `asyncio.run()`. Contohnya: `asyncio.run(salam())`."
        },
        {
            "question": "Bagaimana cara membuat event loop di Python?",
            "question_code": "import asyncio\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(salam())",
            "answer": "Anda bisa membuat event loop dengan menggunakan `asyncio.get_event_loop()`. Contohnya: `loop = asyncio.get_event_loop()`."
        },
        {
            "question": "Bagaimana cara menangani exception dalam coroutine di Python?",
            "question_code": "import asyncio\n\nasync def salam():\n    try:\n        await asyncio.sleep(1)\n        print('Hello, World!')\n    except asyncio.CancelledError:\n        print('Coroutine dibatalkan')",
            "answer": "Anda bisa menangani exception dalam coroutine dengan menggunakan blok try-except. Contohnya: `try: await asyncio.sleep(1); except asyncio.CancelledError: print('Coroutine dibatalkan')`.",
            "answer_code": "import asyncio\n\nasync def salam():\n    try:\n        await asyncio.sleep(1)\n        print('Hello, World!')\n    except asyncio.CancelledError:\n        print('Coroutine dibatalkan')\n\nasyncio.run(salam())"
        },
        {
            "question": "Bagaimana cara menjalankan beberapa coroutine secara bersamaan di Python?",
            "question_code": "import asyncio\n\nasync def salam():\n    print('Hello, World!')\n\nasync def main():\n    await asyncio.gather(salam(), salam())",
            "answer": "Anda bisa menjalankan beberapa coroutine secara bersamaan dengan menggunakan `asyncio.gather()`. Contohnya: `await asyncio.gather(salam(), salam())`.",
            "answer_code": "import asyncio\n\nasync def salam():\n    print('Hello, World!')\n\nasync def main():\n    await asyncio.gather(salam(), salam())\n\nasyncio.run(main())"
        },
        {
            "question": "Bagaimana cara menghentikan coroutine di Python?",
            "question_code": "import asyncio\n\nasync def salam():\n    while True:\n        print('Hello, World!')\n        await asyncio.sleep(1)\n\nasync def main():\n    task = asyncio.create_task(salam())\n    await asyncio.sleep(5)\n    task.cancel()\n\nasyncio.run(main())",
            "answer": "Anda bisa menghentikan coroutine dengan menggunakan metode `cancel()` pada task. Contohnya: `task.cancel()`.",
            "answer_code": "import asyncio\n\nasync def salam():\n    while True:\n        print('Hello, World!')\n        await asyncio.sleep(1)\n\nasync def main():\n    task = asyncio.create_task(salam())\n    await asyncio.sleep(5)\n    task.cancel()\n\nasyncio.run(main())"
        }
    ]
}
]