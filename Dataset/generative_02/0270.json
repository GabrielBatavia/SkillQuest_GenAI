[
    {
        "sumber": "pythonmastery.com",
        "penulis": "Lina Kusuma",
        "tanggal": "2024-12-01",
        "judul": "Penggunaan Metode String di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "string methods", "menengah"],
        "konten": "Artikel ini menjelaskan berbagai metode string di Python seperti `startswith()`, `endswith()`, `strip()`, `split()`, dan `join()`.",
        "pertanyaan": [
            {
                "question": "Saya dengar ada metode `startswith()` di Python. Itu gunanya buat apa ya?",
                "answer": "Metode `startswith()` digunakan untuk memeriksa apakah suatu string dimulai dengan substring tertentu."
            },
            {
                "question": "Gimana sih cara pakai metode `startswith()` di Python?",
                "question_code": "teks = 'Halo semuanya'\nhasil = teks.startswith('Halo')",
                "answer": "Anda bisa menggunakan metode `startswith()` dengan memanggilnya pada string dan memberikan substring sebagai argumen. Contohnya: `teks.startswith('Halo')`.",
                "answer_code": "teks = 'Halo semuanya'\nhasil = teks.startswith('Halo')"
            },
            {
                "question": "Kalau metode `endswith()` di Python itu gunanya buat apa ya?",
                "answer": "Metode `endswith()` digunakan untuk memeriksa apakah suatu string diakhiri dengan substring tertentu."
            },
            {
                "question": "Bagaimana cara pakai metode `endswith()` di Python?",
                "question_code": "teks = 'Selamat malam'\nhasil = teks.endswith('malam')",
                "answer": "Anda bisa menggunakan metode `endswith()` dengan memanggilnya pada string dan memberikan substring sebagai argumen. Contohnya: `teks.endswith('malam')`.",
                "answer_code": "teks = 'Selamat malam'\nhasil = teks.endswith('malam')"
            },
            {
                "question": "Apa itu metode `strip()` di Python?",
                "answer": "Metode `strip()` digunakan untuk menghapus karakter awal dan akhir dari string. Secara default, metode ini menghapus spasi."
            },
            {
                "question": "Gimana caranya pakai metode `strip()` di Python?",
                "question_code": "teks = '  Halo, semuanya!  '\nhasil = teks.strip()",
                "answer": "Anda bisa menggunakan metode `strip()` dengan memanggilnya pada string untuk menghapus spasi di awal dan akhir string. Contohnya: `teks.strip()`.",
                "answer_code": "teks = '  Halo, semuanya!  '\nhasil = teks.strip()"
            },
            {
                "question": "Metode `split()` di Python itu gunanya untuk apa?",
                "answer": "Metode `split()` digunakan untuk memisahkan string menjadi list berdasarkan delimiter yang ditentukan."
            },
            {
                "question": "Bagaimana cara pakai metode `split()` di Python?",
                "question_code": "teks = 'Halo, semuanya!'\nhasil = teks.split(', ')",
                "answer": "Anda bisa menggunakan metode `split()` dengan memanggilnya pada string dan memberikan delimiter sebagai argumen. Contohnya: `teks.split(', ')`.",
                "answer_code": "teks = 'Halo, semuanya!'\nhasil = teks.split(', ')"
            },
            {
                "question": "Apa itu metode `join()` di Python?",
                "answer": "Metode `join()` digunakan untuk menggabungkan elemen-elemen dalam iterable menjadi satu string dengan pemisah yang ditentukan."
            },
            {
                "question": "Gimana caranya pakai metode `join()` di Python?",
                "question_code": "kata_kata = ['Halo', 'semuanya']\nhasil = ' '.join(kata_kata)",
                "answer": "Anda bisa menggunakan metode `join()` dengan memanggilnya pada string yang akan digunakan sebagai pemisah dan menerapkan iterable sebagai argumen. Contohnya: `' '.join(kata_kata)`.",
                "answer_code": "kata_kata = ['Halo', 'semuanya']\nhasil = ' '.join(kata_kata)"
            }
        ]
    },
    {
        "sumber": "pythonsyntaxadvanced.com",
        "penulis": "Arif Rahman",
        "tanggal": "2024-11-20",
        "judul": "Penggunaan Enumerate dan Zip di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "enumerate", "zip", "menengah"],
        "konten": "Artikel ini menjelaskan cara menggunakan fungsi enumerate dan zip di Python untuk iterasi yang lebih efisien dan efektif.",
        "pertanyaan": [
            {
                "question": "Fungsi enumerate di Python itu buat apa ya?",
                "answer": "Fungsi enumerate digunakan untuk menambahkan penghitung ke iterable dan mengembalikan objek enumerate."
            },
            {
                "question": "Bagaimana cara pakai fungsi enumerate di Python?",
                "question_code": "buah = ['apel', 'pisang', 'ceri']\nfor indeks, nilai in enumerate(buah):\n    print(indeks, nilai)",
                "answer": "Anda bisa menggunakan fungsi enumerate dengan memanggilnya pada iterable dan menggunakannya dalam loop. Contohnya: `enumerate(buah)`.",
                "answer_code": "buah = ['apel', 'pisang', 'ceri']\nfor indeks, nilai in enumerate(buah):\n    print(indeks, nilai)"
            },
            {
                "question": "Kalau fungsi zip di Python itu gunanya apa ya?",
                "answer": "Fungsi zip digunakan untuk menggabungkan beberapa iterable menjadi iterator yang menghasilkan tuple berisi elemen-elemen dari masing-masing iterable."
            },
            {
                "question": "Bagaimana cara pakai fungsi zip di Python?",
                "question_code": "angka = [1, 2, 3]\nhuruf = ['x', 'y', 'z']\nhasil = list(zip(angka, huruf))",
                "answer": "Anda bisa menggunakan fungsi zip dengan memberikan beberapa iterable sebagai argumen. Contohnya: `zip(angka, huruf)`.",
                "answer_code": "angka = [1, 2, 3]\nhuruf = ['x', 'y', 'z']\nhasil = list(zip(angka, huruf))"
            },
            {
                "question": "Bagaimana cara menggunakan fungsi zip untuk mengiterasi dua list secara bersamaan di Python?",
                "question_code": "angka = [1, 2, 3]\nhuruf = ['a', 'b', 'c']\nfor angka, huruf in zip(angka, huruf):\n    print(angka, huruf)",
                "answer": "Anda bisa menggunakan fungsi zip untuk mengiterasi dua list secara bersamaan dengan menggabungkannya dan mengiterasi hasilnya. Contohnya: `for angka, huruf in zip(angka, huruf):`.",
                "answer_code": "angka = [1, 2, 3]\nhuruf = ['a', 'b', 'c']\nfor angka, huruf in zip(angka, huruf):\n    print(angka, huruf)"
            },
            {
                "question": "Bagaimana cara pakai fungsi zip untuk bikin dictionary di Python?",
                "question_code": "kunci = ['nama', 'umur']\nnilai = ['Andi', 30]\nkamus = dict(zip(kunci, nilai))",
                "answer": "Anda bisa menggunakan fungsi zip untuk membuat dictionary dengan menggabungkan dua iterable (satu untuk keys dan satu untuk values). Contohnya: `dict(zip(kunci, nilai))`.",
                "answer_code": "kunci = ['nama', 'umur']\nnilai = ['Andi', 30]\nkamus = dict(zip(kunci, nilai))"
            },
            {
                "question": "Gimana caranya unzip hasil dari fungsi zip di Python?",
                "question_code": "zipped = [(1, 'a'), (2, 'b'), (3, 'c')]\ndaftar_angka, daftar_huruf = zip(*zipped)",
                "answer": "Anda bisa meng-unzip hasil dari fungsi zip dengan menggunakan operator `*` untuk membongkar tuple menjadi beberapa iterable. Contohnya: `zip(*zipped)`.",
                "answer_code": "zipped = [(1, 'a'), (2, 'b'), (3, 'c')]\ndaftar_angka, daftar_huruf = zip(*zipped)"
            }
        ]
    },
    {
        "sumber": "belajarpemrogramanpython.com",
        "penulis": "Dewi Sartika",
        "tanggal": "2024-11-05",
        "judul": "Penggunaan List dan Dictionary Comprehensions di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "list comprehension", "dictionary comprehension", "menengah"],
        "konten": "Artikel ini menjelaskan cara menggunakan list dan dictionary comprehensions di Python untuk membuat dan memanipulasi list dan dictionary dengan cara yang lebih ringkas dan efisien.",
        "pertanyaan": [
            {
                "question": "List comprehension di Python itu apa ya? Saya dengar ini bisa bikin list lebih cepat.",
                "answer": "List comprehension adalah cara singkat untuk membuat list baru dari iterable yang ada menggunakan satu baris kode. Ini memungkinkan Anda menulis kode yang lebih bersih dan ringkas."
            },
            {
                "question": "Bagaimana caranya membuat list comprehension sederhana di Python?",
                "question_code": "[x for x in range(5)]",
                "answer": "Anda bisa membuat list comprehension sederhana dengan sintaks `[expression for item in iterable]`. Contohnya: `[x for x in range(5)]` akan menghasilkan list berisi angka dari 0 sampai 4.",
                "answer_code": "[x for x in range(5)]"
            },
            {
                "question": "Bisa nggak tambahin kondisi ke dalam list comprehension? Misalnya cuma ambil angka genap.",
                "question_code": "[x for x in range(10) if x % 2 == 0]",
                "answer": "Anda bisa menambahkan kondisi ke dalam list comprehension dengan sintaks `[expression for item in iterable if condition]`. Contohnya: `[x for x in range(10) if x % 2 == 0]` akan menghasilkan list berisi angka genap dari 0 sampai 9.",
                "answer_code": "[x for x in range(10) if x % 2 == 0]"
            },
            {
                "question": "Kalau mau bikin nested list comprehension, gimana caranya ya?",
                "question_code": "[[i, j] for i in range(3) for j in range(2)]",
                "answer": "Anda bisa membuat nested list comprehension dengan menggunakan dua loop for di dalam satu list comprehension. Contohnya: `[[i, j] for i in range(3) for j in range(2)]` akan menghasilkan list berisi pasangan angka.",
                "answer_code": "[[i, j] for i in range(3) for j in range(2)]"
            },
            {
                "question": "Apa itu dictionary comprehension di Python? Apa bedanya sama list comprehension?",
                "answer": "Dictionary comprehension mirip dengan list comprehension, tapi digunakan untuk membuat dictionary. Formatnya adalah `{key: value for item in iterable}`, sedangkan list comprehension hanya menghasilkan list."
            },
            {
                "question": "Bagaimana caranya membuat dictionary comprehension sederhana di Python?",
                "question_code": "{x: x**2 for x in range(4)}",
                "answer": "Anda bisa membuat dictionary comprehension sederhana dengan sintaks `{key: value for item in iterable}`. Contohnya: `{x: x**2 for x in range(4)}` akan menghasilkan dictionary dengan angka sebagai key dan kuadratnya sebagai value.",
                "answer_code": "{x: x**2 for x in range(4)}"
            },
            {
                "question": "Bisa nggak tambahin kondisi ke dalam dictionary comprehension? Misalnya cuma ambil angka genap.",
                "question_code": "{x: x**2 for x in range(10) if x % 2 == 0}",
                "answer": "Anda bisa menambahkan kondisi ke dalam dictionary comprehension dengan sintaks `{key: value for item in iterable if condition}`. Contohnya: `{x: x**2 for x in range(10) if x % 2 == 0}` akan menghasilkan dictionary dengan angka genap sebagai key dan kuadratnya sebagai value.",
                "answer_code": "{x: x**2 for x in range(10) if x % 2 == 0}"
            },
            {
                "question": "Gimana caranya bikin nested dictionary comprehension? Contohnya seperti apa?",
                "question_code": "{i: {j: j**2 for j in range(2)} for i in range(3)}",
                "answer": "Anda bisa membuat nested dictionary comprehension dengan menggunakan dua loop for di dalam satu dictionary comprehension. Contohnya: `{i: {j: j**2 for j in range(2)} for i in range(3)}` akan menghasilkan dictionary di dalam dictionary.",
                "answer_code": "{i: {j: j**2 for j in range(2)} for i in range(3)}"
            }
        ]
    }
]
