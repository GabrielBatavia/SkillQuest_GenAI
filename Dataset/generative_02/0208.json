[
    {
        "sumber": "PythonHub.com",
        "penulis": "Dian Permata",
        "tanggal": "2024-08-10",
        "judul": "Menggunakan List dalam Python",
        "tingkat_kesulitan": "pemula",
        "tag": ["list", "python"],
        "konten": "Artikel ini menjelaskan konsep dasar penggunaan list di Python, termasuk cara membuat, mengakses, dan memodifikasi elemen di dalamnya.",
        "pertanyaan": [
            {
                "question": "Bagaimana cara membuat list dan menambahkan elemen baru?",
                "question_code": "my_list = [1, 2, 3]\nmy_list.append(4)\nprint(my_list[3])",
                "answer": "Untuk membuat list, tulis elemen di dalam tanda kurung siku `[]`. Untuk menambahkan elemen baru, gunakan metode `append()`. Contoh: `my_list.append(4)` menambahkan angka 4 ke akhir list.",
                "answer_code": "my_list = [1, 2, 3]\nmy_list.append(4)\nprint(my_list)"
            },
            {
                "question": "Bagaimana cara mengakses elemen dari list berdasarkan indeks?",
                "question_code": "my_list = [10, 20, 30]\nprint(my_list[2])",
                "answer": "Elemen dalam list diakses menggunakan indeks, di mana indeks dimulai dari 0. Misalnya: `my_list[2]` mengakses elemen ketiga dari list, yaitu 30.",
                "answer_code": "my_list = [10, 20, 30]\nprint(my_list[2])"
            },
            {
                "question": "Bagaimana cara menghapus elemen dari list?",
                "question_code": "my_list = [5, 10, 15]\nmy_list.remove(10)\nprint(my_list)",
                "answer": "Gunakan metode `remove()` untuk menghapus elemen dari list berdasarkan nilai. Misalnya: `my_list.remove(10)` menghapus angka 10 dari list.",
                "answer_code": "my_list = [5, 10, 15]\nmy_list.remove(10)\nprint(my_list)"
            },
            {
                "question": "Bagaimana cara membalik urutan elemen dalam list?",
                "question_code": "my_list = [1, 2, 3]\nmy_list.reverse()\nprint(my_list)",
                "answer": "Gunakan metode `reverse()` untuk membalik urutan elemen dalam list. Misalnya: `my_list.reverse()` mengubah urutan menjadi [3, 2, 1].",
                "answer_code": "my_list = [1, 2, 3]\nmy_list.reverse()\nprint(my_list)"
            },
            {
                "question": "Bagaimana cara menghitung jumlah elemen dalam list?",
                "question_code": "my_list = [1, 2, 3, 4, 5]\nprint(len(my_list))",
                "answer": "Gunakan fungsi `len()` untuk menghitung jumlah elemen dalam list. Misalnya: `len(my_list)` mengembalikan jumlah elemen dalam list.",
                "answer_code": "my_list = [1, 2, 3, 4, 5]\nprint(len(my_list))"
            },
            {
                "question": "Bagaimana cara menggabungkan dua list menjadi satu?",
                "question_code": "list1 = [1, 2]\nlist2 = [3, 4]\ncombined_list = list1 + list2\nprint(combined_list)",
                "answer": "Gunakan operator `+` untuk menggabungkan dua list. Misalnya: `list1 + list2` menggabungkan `list1` dan `list2` menjadi satu list baru.",
                "answer_code": "list1 = [1, 2]\nlist2 = [3, 4]\ncombined_list = list1 + list2\nprint(combined_list)"
            },
            {
                "question": "Bagaimana cara memeriksa apakah suatu elemen ada dalam list?",
                "question_code": "my_list = [1, 2, 3]\nprint(4 in my_list)",
                "answer": "Gunakan operator `in` untuk memeriksa apakah elemen ada dalam list. Misalnya: `4 in my_list` akan mengembalikan `False` jika 4 tidak ada dalam list.",
                "answer_code": "my_list = [1, 2, 3]\nprint(2 in my_list)"
            },
            {
                "question": "Bagaimana cara mengakses elemen terakhir dari list?",
                "question_code": "my_list = [1, 2, 3]\nprint(my_list[-1])",
                "answer": "Untuk mengakses elemen terakhir dari list, gunakan indeks negatif `-1`. Misalnya: `my_list[-1]` mengakses elemen terakhir, yaitu 3.",
                "answer_code": "my_list = [1, 2, 3]\nprint(my_list[-1])"
            },
            {
                "question": "Bagaimana cara memotong bagian dari list?",
                "question_code": "my_list = [1, 2, 3, 4, 5]\nprint(my_list[1:4])",
                "answer": "Gunakan slicing untuk memotong bagian dari list. Sintaksnya adalah `my_list[start:end]`, di mana `start` adalah indeks awal dan `end` adalah indeks akhir. Misalnya: `my_list[1:4]` mengakses elemen dari indeks 1 hingga 3.",
                "answer_code": "my_list = [1, 2, 3, 4, 5]\nprint(my_list[1:4])"
            }
        ]
    },
    {
        "sumber": "CodeAcademy.org",
        "penulis": "Aliyah Nabila",
        "tanggal": "2024-08-11",
        "judul": "Fungsi dalam Python",
        "tingkat_kesulitan": "menengah",
        "tag": ["function", "python"],
        "konten": "Artikel ini menjelaskan tentang bagaimana cara membuat dan menggunakan fungsi dalam Python, termasuk parameter dan nilai balik.",
        "pertanyaan": [
            {
                "question": "Bagaimana cara mendefinisikan fungsi di Python?",
                "question_code": "def greet(name):\n    print('Hello')\n    return 'Hello, ' + name\n\nprint(greet('John'))",
                "answer": "Fungsi didefinisikan menggunakan kata kunci `def` diikuti dengan nama fungsi dan parameter di dalam tanda kurung. Di dalam tubuh fungsi, gunakan `return` untuk mengembalikan nilai. Misalnya: `def greet(name): return 'Hello, ' + name`.",
                "answer_code": "def greet(name):\n    return 'Hello, ' + name\n\nprint(greet('John'))"
            },
            {
                "question": "Bagaimana cara memanggil fungsi dengan argumen?",
                "question_code": "def add(a, b):\n    return a + b\n\nresult = add(5)\nprint(result)",
                "answer": "Untuk memanggil fungsi dengan argumen, pastikan untuk menyediakan jumlah argumen yang sesuai dengan parameter fungsi. Misalnya: `add(5, 3)` memanggil fungsi `add` dengan dua argumen.",
                "answer_code": "def add(a, b):\n    return a + b\n\nresult = add(5, 3)\nprint(result)"
            },
            {
                "question": "Bagaimana cara memberikan nilai default untuk parameter fungsi?",
                "question_code": "def greet(name='Guest'):\n    return 'Hello, ' + name\n\nprint(greet())\nprint(greet('Alice'))",
                "answer": "Untuk memberikan nilai default pada parameter, tentukan nilai default dalam definisi fungsi. Misalnya: `def greet(name='Guest')` akan menggunakan 'Guest' jika tidak ada argumen yang diberikan.",
                "answer_code": "def greet(name='Guest'):\n    return 'Hello, ' + name\n\nprint(greet())\nprint(greet('Alice'))"
            },
            {
                "question": "Bagaimana cara mengembalikan beberapa nilai dari fungsi?",
                "question_code": "def get_info():\n    return 'Alice', 30\n\nname, age = get_info()\nprint(name, age)",
                "answer": "Untuk mengembalikan beberapa nilai dari fungsi, pisahkan nilai dengan koma dalam `return`. Nilai-nilai tersebut dapat di-unpack ke dalam variabel berbeda saat pemanggilan fungsi.",
                "answer_code": "def get_info():\n    return 'Alice', 30\n\nname, age = get_info()\nprint(name, age)"
            },
            {
                "question": "Bagaimana cara mengakses nilai yang dikembalikan oleh fungsi?",
                "question_code": "def multiply(x, y):\n    return x * y\n\nresult = multiply(4, 5)\nprint(result)",
                "answer": "Nilai yang dikembalikan oleh fungsi diakses dengan menyimpan hasil panggilan fungsi ke dalam variabel. Misalnya: `result = multiply(4, 5)` menyimpan hasil perkalian ke dalam variabel `result`.",
                "answer_code": "def multiply(x, y):\n    return x * y\n\nresult = multiply(4, 5)\nprint(result)"
            }
        ]
    },
    {
        "sumber": "PythonDocs.org",
        "penulis": "Rina Ningsih",
        "tanggal": "2024-08-12",
        "judul": "Penggunaan Dictionary dalam Python",
        "tingkat_kesulitan": "menengah",
        "tag": ["dictionary", "python"],
        "konten": "Artikel ini membahas bagaimana menggunakan dictionary di Python, termasuk menambah, mengakses, dan menghapus pasangan kunci-nilai.",
        "pertanyaan": [
            {
                "question": "Bagaimana cara membuat dictionary dan menambahkan pasangan kunci-nilai?",
                "question_code": "my_dict = {}\nmy_dict['name'] = 'John'\nprint(my_dict['name'])",
                "answer": "Dictionary dibuat dengan menggunakan `{}`. Untuk menambahkan pasangan kunci-nilai, gunakan sintaks `dictionary[kunci] = nilai`. Misalnya: `my_dict['name'] = 'John'`.",
                "answer_code": "my_dict = {}\nmy_dict['name'] = 'John'\nprint(my_dict['name'])"
            },
            {
                "question": "Bagaimana cara mengakses nilai dalam dictionary menggunakan kunci?",
                "question_code": "my_dict = {'age': 25}\nprint(my_dict['age'])",
                "answer": "Nilai dalam dictionary diakses menggunakan kunci dalam tanda kurung siku. Misalnya: `my_dict['age']` mengakses nilai yang terkait dengan kunci 'age'.",
                "answer_code": "my_dict = {'age': 25}\nprint(my_dict['age'])"
            },
            {
                "question": "Bagaimana cara menghapus pasangan kunci-nilai dari dictionary?",
                "question_code": "my_dict = {'key': 'value'}\ndel my_dict['key']\nprint(my_dict)",
                "answer": "Gunakan perintah `del` diikuti dengan kunci untuk menghapus pasangan kunci-nilai dari dictionary. Misalnya: `del my_dict['key']` akan menghapus entri dengan kunci 'key'.",
                "answer_code": "my_dict = {'key': 'value'}\ndel my_dict['key']\nprint(my_dict)"
            },
            {
                "question": "Bagaimana cara memeriksa apakah kunci ada dalam dictionary?",
                "question_code": "my_dict = {'color': 'blue'}\nprint('color' in my_dict)",
                "answer": "Gunakan operator `in` untuk memeriksa apakah kunci ada dalam dictionary. Misalnya: `'color' in my_dict` mengembalikan `True` jika 'color' adalah kunci dalam dictionary.",
                "answer_code": "my_dict = {'color': 'blue'}\nprint('color' in my_dict)"
            },
            {
                "question": "Bagaimana cara mendapatkan semua kunci dari dictionary?",
                "question_code": "my_dict = {'name': 'Alice', 'age': 30}\nprint(my_dict.keys())",
                "answer": "Gunakan metode `keys()` untuk mendapatkan semua kunci dalam dictionary. Misalnya: `my_dict.keys()` mengembalikan daftar kunci dari dictionary.",
                "answer_code": "my_dict = {'name': 'Alice', 'age': 30}\nprint(my_dict.keys())"
            }
        ]
    }
]
