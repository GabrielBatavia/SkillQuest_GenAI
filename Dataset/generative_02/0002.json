[
    {
        "sumber": "BelajarPython",
        "penulis": "Jane Smith",
        "tanggal": "2024-07-18",
        "judul": "Pemrograman Menengah dengan Python",
        "tingkat_kesulitan": "menengah",
        "tag": ["python", "menengah", "oop", "fungsi lanjutan"],
        "konten": "Artikel ini membahas konsep pemrograman menengah dalam Python, termasuk fungsi lanjutan, pemrograman berorientasi objek, dan manipulasi data.",
        "pertanyaan": [
            {
                "question": "Apa itu fungsi lambda dalam Python?",
                "answer": "Fungsi lambda adalah fungsi anonim kecil yang dapat memiliki beberapa argumen tetapi hanya satu ekspresi."
            },
            {
                "question": "Bagaimana cara mendefinisikan fungsi lambda dalam Python?",
                "answer": "Fungsi lambda dapat didefinisikan menggunakan sintaks: lambda argumen: ekspresi. Contoh: lambda x, y: x + y."
            },
            {
                "question": "Apa itu class dalam Python?",
                "answer": "Class adalah cetak biru untuk membuat objek. Class mendefinisikan atribut dan metode yang akan dimiliki oleh objek."
            },
            {
                "question": "Bagaimana cara mendefinisikan class dalam Python?",
                "question_code": "class Dog:\n    def __init__(self, name):\n        self.name = name\n\ndog1 = Dog('Buddy')\nprint(dog1.name)",
                "answer": "Class dapat didefinisikan menggunakan kata kunci class diikuti oleh nama class. Contoh: class Dog: def __init__(self, name): self.name = name."
            },
            {
                "question": "Apa itu pewarisan (inheritance) dalam Python?",
                "question_code": "class Animal:\n    def __init__(self, name):\n        self.name = name\n\nclass Dog(Animal):\n    def bark(self):\n        return 'Woof'\n\ndog1 = Dog('Buddy')\nprint(dog1.name)\nprint(dog1.bark())",
                "answer": "Pewarisan memungkinkan class untuk mewarisi atribut dan metode dari class lain. Contoh: class Dog(Animal): def bark(self): return 'Woof'."
            },
            {
                "question": "Bagaimana cara membaca file dalam Python?",
                "question_code": "with open('file.txt', 'r') as file:\n    content = file.read()\n    print(content)",
                "answer": "File dapat dibaca menggunakan fungsi open() dengan mode 'r' (read). Contoh: with open('file.txt', 'r') as file: content = file.read()."
            },
            {
                "question": "Bagaimana cara menulis ke file dalam Python?",
                "question_code": "with open('file.txt', 'w') as file:\n    file.write('Hello, world!')",
                "answer": "File dapat ditulis menggunakan fungsi open() dengan mode 'w' (write). Contoh: with open('file.txt', 'w') as file: file.write('Hello, world!').",
                "answer_code": "File 'file.txt' akan berisi teks: 'Hello, world!'"
            },
            {
                "question": "Bagaimana cara mengubah elemen dalam list menggunakan list comprehension?",
                "question_code": "numbers = [1, 2, 3, 4, 5]\nsquared_numbers = [x**2 for x in numbers]\nprint(squared_numbers)",
                "answer": "List comprehension adalah cara singkat untuk membuat list baru dengan memproses setiap elemen dalam list yang ada. Contoh: squared_numbers = [x**2 for x in numbers].",
                "answer_code": "[1, 4, 9, 16, 25]"
            },
            {
                "question": "Bagaimana cara menggabungkan dua list menggunakan zip dalam Python?",
                "question_code": "list1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']\ncombined = list(zip(list1, list2))\nprint(combined)",
                "answer": "Fungsi zip() menggabungkan dua list dengan memasangkan elemen-elemen yang bersesuaian. Contoh: combined = list(zip(list1, list2)).",
                "answer_code": "[(1, 'a'), (2, 'b'), (3, 'c')]"
            }
        ]
    }
]
