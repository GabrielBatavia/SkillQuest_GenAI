[
    {
        "sumber": "pythonpro.com",
        "penulis": "Budi Setiawan",
        "tanggal": "2024-11-25",
        "judul": "Penggunaan Fungsi Decorator di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "decorator", "menengah"],
        "konten": "Artikel ini menjelaskan cara menggunakan decorator di Python untuk memodifikasi atau memperluas fungsi dan metode secara dinamis.",
        "pertanyaan": [
            {
                "question": "Apa itu decorator di Python?",
                "answer": "Decorator adalah fungsi yang mengambil fungsi lain sebagai argumen dan mengembalikan fungsi baru dengan perilaku yang telah dimodifikasi atau diperluas."
            },
            {
                "question": "Bagaimana cara mendefinisikan decorator sederhana di Python?",
                "question_code": "def my_decorator(func):\n    def wrapper():\n        print('Something is happening before the function is called.')\n        func()\n        print('Something is happening after the function is called.')\n    return wrapper",
                "answer": "Anda bisa mendefinisikan decorator dengan membuat fungsi yang mengembalikan fungsi pembungkus (`wrapper`). Contohnya: `def my_decorator(func): ... return wrapper`.",
                "answer_code": "def my_decorator(func):\n    def wrapper():\n        print('Something is happening before the function is called.')\n        func()\n        print('Something is happening after the function is called.')\n    return wrapper"
            },
            {
                "question": "Bagaimana cara menggunakan decorator pada fungsi di Python?",
                "question_code": "@my_decorator\ndef say_hello():\n    print('Hello!')",
                "answer": "Anda bisa menggunakan decorator pada fungsi dengan menambahkan `@` diikuti nama decorator di atas definisi fungsi. Contohnya: `@my_decorator`.",
                "answer_code": "@my_decorator\ndef say_hello():\n    print('Hello!')"
            },
            {
                "question": "Bagaimana cara membuat decorator dengan argumen di Python?",
                "question_code": "def repeat(num):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(num):\n                func(*args, **kwargs)\n        return wrapper\n    return decorator",
                "answer": "Anda bisa membuat decorator dengan argumen dengan menambahkan lapisan fungsi tambahan di atas fungsi pembungkus. Contohnya: `def repeat(num): ... return decorator`.",
                "answer_code": "def repeat(num):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(num):\n                func(*args, **kwargs)\n        return wrapper\n    return decorator"
            },
            {
                "question": "Bagaimana cara menggunakan beberapa decorator pada satu fungsi di Python?",
                "question_code": "@decorator1\n@decorator2\ndef my_function():\n    pass",
                "answer": "Anda bisa menggunakan beberapa decorator pada satu fungsi dengan menumpuknya di atas definisi fungsi. Urutan eksekusi adalah dari atas ke bawah. Contohnya: `@decorator1` dan `@decorator2`.",
                "answer_code": "@decorator1\n@decorator2\ndef my_function():\n    pass"
            },
            {
                "question": "Bagaimana cara membuat decorator untuk mengukur waktu eksekusi fungsi di Python?",
                "question_code": "import time\ndef timing_decorator(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f'Execution time: {end_time - start_time} seconds')\n        return result\n    return wrapper",
                "answer": "Anda bisa membuat decorator untuk mengukur waktu eksekusi fungsi dengan mencatat waktu sebelum dan setelah eksekusi fungsi. Contohnya: `def timing_decorator(func): ... return wrapper`.",
                "answer_code": "import time\ndef timing_decorator(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f'Execution time: {end_time - start_time} seconds')\n        return result\n    return wrapper"
            }
        ]
    },
    {
        "sumber": "pythonexperts.com",
        "penulis": "Siti Aminah",
        "tanggal": "2024-10-15",
        "judul": "Penggunaan Context Managers di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "context manager", "menengah"],
        "konten": "Artikel ini menjelaskan cara menggunakan context managers di Python untuk mengelola sumber daya seperti file dan koneksi jaringan.",
        "pertanyaan": [
            {
                "question": "Apa itu context manager di Python?",
                "answer": "Context manager adalah konstruksi yang memungkinkan Anda mengelola sumber daya dengan cara yang konsisten dan terkontrol, memastikan bahwa sumber daya tersebut dibersihkan setelah digunakan."
            },
            {
                "question": "Bagaimana cara menggunakan context manager dengan `with` di Python?",
                "question_code": "with open('file.txt', 'r') as file:\n    data = file.read()",
                "answer": "Anda bisa menggunakan context manager dengan kata kunci `with`, yang memastikan bahwa sumber daya dibersihkan setelah blok kode selesai dieksekusi. Contohnya: `with open('file.txt', 'r') as file:`.",
                "answer_code": "with open('file.txt', 'r') as file:\n    data = file.read()"
            },
            {
                "question": "Bagaimana cara membuat context manager menggunakan class di Python?",
                "question_code": "class MyContextManager:\n    def __enter__(self):\n        print('Enter context')\n    def __exit__(self, exc_type, exc_value, traceback):\n        print('Exit context')\n\nwith MyContextManager() as cm:\n    print('Inside context')",
                "answer": "Anda bisa membuat context manager menggunakan class dengan mendefinisikan metode `__enter__` dan `__exit__`. Contohnya: `class MyContextManager: ...`.",
                "answer_code": "class MyContextManager:\n    def __enter__(self):\n        print('Enter context')\n    def __exit__(self, exc_type, exc_value, traceback):\n        print('Exit context')\n\nwith MyContextManager() as cm:\n    print('Inside context')"
            },
            {
                "question": "Bagaimana cara membuat context manager menggunakan decorator `contextlib` di Python?",
                "question_code": "from contextlib import contextmanager\n@contextmanager\ndef my_context():\n    print('Enter context')\n    yield\n    print('Exit context')\n\nwith my_context():\n    print('Inside context')",
                "answer": "Anda bisa membuat context manager menggunakan decorator `contextlib.contextmanager` dan kata kunci `yield`. Contohnya: `@contextmanager def my_context(): ... yield ...`.",
                "answer_code": "from contextlib import contextmanager\n@contextmanager\ndef my_context():\n    print('Enter context')\n    yield\n    print('Exit context')\n\nwith my_context():\n    print('Inside context')"
            },
            {
                "question": "Bagaimana cara menggunakan context manager untuk mengelola koneksi database di Python?",
                "question_code": "from contextlib import contextmanager\nimport sqlite3\n\n@contextmanager\ndef open_database(db_name):\n    conn = sqlite3.connect(db_name)\n    cursor = conn.cursor()\n    try:\n        yield cursor\n    finally:\n        conn.commit()\n        conn.close()\n\nwith open_database('mydb.db') as cursor:\n    cursor.execute('SELECT * FROM my_table')",
                "answer": "Anda bisa menggunakan context manager untuk mengelola koneksi database dengan memastikan bahwa koneksi ditutup setelah digunakan. Contohnya: `@contextmanager def open_database(db_name): ... yield cursor`.",
                "answer_code": "from contextlib import contextmanager\nimport sqlite3\n\n@contextmanager\ndef open_database(db_name):\n    conn = sqlite3.connect(db_name)\n    cursor = conn.cursor()\n    try:\n        yield cursor\n    finally:\n        conn.commit()\n        conn.close()\n\nwith open_database('mydb.db') as cursor:\n    cursor.execute('SELECT * FROM my_table')"
            }
        ]
    }
]
