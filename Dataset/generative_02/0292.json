[
    {
        "sumber": "pythontips.com",
        "penulis": "Ari Wijaya",
        "tanggal": "2024-12-20",
        "judul": "Penggunaan Fungsi Sorted dan Lambda di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "sorted", "lambda", "menengah"],
        "konten": "Artikel ini menjelaskan cara menggunakan fungsi `sorted` bersama dengan fungsi lambda di Python untuk mengurutkan list dan iterable lainnya.",
        "pertanyaan": [
            {
                "question": "Saya membaca tentang fungsi `sorted` di Python, tetapi saya tidak sepenuhnya mengerti. Apa sebenarnya fungsi `sorted` itu dan bagaimana cara kerjanya?",
                "answer": "Fungsi `sorted` digunakan untuk mengembalikan list baru yang berisi elemen-elemen dari iterable yang diurutkan. Fungsi ini tidak mengubah iterable asli, melainkan menghasilkan list yang diurutkan."
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `sorted` untuk mengurutkan list di Python? Bisa tolong berikan contoh yang sederhana?",
                "question_code": "numbers = [3, 1, 4, 1, 5, 9]\nsorted_numbers = sorted(numbers)",
                "answer": "Anda bisa menggunakan fungsi `sorted` dengan memberikan list sebagai argumen. Sebagai contoh: `sorted(numbers)` akan mengurutkan list `numbers`.",
                "answer_code": "numbers = [3, 1, 4, 1, 5, 9]\nsorted_numbers = sorted(numbers)"
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `sorted` dengan parameter `reverse=True` di Python? Saya ingin tahu cara mengurutkan dalam urutan menurun.",
                "question_code": "values = [8, 3, 7, 2]\ndesc_sorted_values = sorted(values, reverse=True)",
                "answer": "Anda bisa menggunakan fungsi `sorted` dengan parameter `reverse=True` untuk mengurutkan elemen-elemen dalam urutan menurun. Sebagai contoh: `sorted(values, reverse=True)`.",
                "answer_code": "values = [8, 3, 7, 2]\ndesc_sorted_values = sorted(values, reverse=True)"
            },
            {
                "question": "Saya agak bingung dengan penggunaan fungsi `sorted` dan lambda di Python. Bisa tolong jelaskan bagaimana cara menggunakannya untuk mengurutkan list berdasarkan panjang string?",
                "question_code": "words = ['banana', 'pie', 'Washington', 'book']\nsorted_words_by_length = sorted(words, key=lambda x: len(x))",
                "answer": "Anda bisa menggunakan fungsi `sorted` dengan parameter `key` yang diisi dengan fungsi lambda untuk menentukan kunci pengurutan. Sebagai contoh: `sorted(words, key=lambda x: len(x))` akan mengurutkan list `words` berdasarkan panjang string.",
                "answer_code": "words = ['banana', 'pie', 'Washington', 'book']\nsorted_words_by_length = sorted(words, key=lambda x: len(x))"
            },
            {
                "question": "Bagaimana caranya mengurutkan dictionary berdasarkan nilai di Python menggunakan fungsi `sorted`? Saya perlu contohnya.",
                "question_code": "grades = {'Alice': 88, 'Bob': 95, 'Charlie': 70}\nsorted_grades_by_value = sorted(grades.items(), key=lambda x: x[1])",
                "answer": "Anda bisa menggunakan fungsi `sorted` dengan `items()` dan lambda untuk mengurutkan dictionary berdasarkan nilai. Contohnya: `sorted(grades.items(), key=lambda x: x[1])`.",
                "answer_code": "grades = {'Alice': 88, 'Bob': 95, 'Charlie': 70}\nsorted_grades_by_value = sorted(grades.items(), key=lambda x: x[1])"
            },
            {
                "question": "Bisakah Anda memberikan contoh bagaimana menggunakan fungsi `sorted` untuk mengurutkan list of dictionaries di Python? Saya butuh penjelasan yang jelas.",
                "question_code": "students = [{'name': 'John', 'grade': 90}, {'name': 'Jane', 'grade': 85}, {'name': 'Dave', 'grade': 92}]\nsorted_students_by_grade = sorted(students, key=lambda x: x['grade'])",
                "answer": "Anda bisa menggunakan fungsi `sorted` dengan lambda untuk mengurutkan list of dictionaries berdasarkan nilai tertentu. Sebagai contoh: `sorted(students, key=lambda x: x['grade'])` akan mengurutkan list `students` berdasarkan nilai `grade`.",
                "answer_code": "students = [{'name': 'John', 'grade': 90}, {'name': 'Jane', 'grade': 85}, {'name': 'Dave', 'grade': 92}]\nsorted_students_by_grade = sorted(students, key=lambda x: x['grade'])"
            },
            {
                "question": "Saya mendengar bahwa fungsi `sorted` dapat digunakan dengan multiple keys di Python. Bagaimana caranya? Bisa tolong beri contoh yang mudah dipahami?",
                "question_code": "students = [{'name': 'John', 'grade': 90}, {'name': 'Jane', 'grade': 85}, {'name': 'Dave', 'grade': 92}]\nsorted_students = sorted(students, key=lambda x: (x['grade'], x['name']))",
                "answer": "Anda bisa menggunakan fungsi `sorted` dengan multiple keys dengan menggunakan tuple di dalam lambda. Sebagai contoh: `sorted(students, key=lambda x: (x['grade'], x['name']))` akan mengurutkan list `students` berdasarkan nilai `grade` dan kemudian `name`.",
                "answer_code": "students = [{'name': 'John', 'grade': 90}, {'name': 'Jane', 'grade': 85}, {'name': 'Dave', 'grade': 92}]\nsorted_students = sorted(students, key=lambda x: (x['grade'], x['name']))"
            }
        ]
    },
    {
        "sumber": "pythonadvancedguide.com",
        "penulis": "Sari Indah",
        "tanggal": "2024-12-22",
        "judul": "Penggunaan Fungsi Enumerate di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "enumerate", "menengah"],
        "konten": "Artikel ini menjelaskan cara menggunakan fungsi `enumerate` di Python untuk iterasi yang lebih efisien dan efektif dengan menambahkan penghitung ke dalam iterable.",
        "pertanyaan": [
            {
                "question": "Apa itu fungsi `enumerate` di Python? Saya belum sepenuhnya mengerti, bisa dijelaskan dengan lebih detail?",
                "answer": "Fungsi `enumerate` digunakan untuk menambahkan penghitung ke iterable dan mengembalikan objek enumerate. Ini sangat berguna saat Anda ingin mengakses indeks dan nilai dari sebuah iterable secara bersamaan."
            },
            {
                "question": "Bagaimana sebenarnya cara menggunakan fungsi `enumerate` di Python? Bisa tolong berikan contoh yang sederhana?",
                "question_code": "items = ['apple', 'banana', 'cherry']\nfor index, item in enumerate(items):\n    print(index, item)",
                "answer": "Anda bisa menggunakan fungsi `enumerate` dengan memanggilnya pada iterable dan menggunakannya dalam loop. Contohnya: `enumerate(items)` akan mengembalikan indeks dan nilai dari `items`.",
                "answer_code": "items = ['apple', 'banana', 'cherry']\nfor index, item in enumerate(items):\n    print(index, item)"
            },
            {
                "question": "Bagaimana cara menggunakan fungsi `enumerate` dengan parameter start di Python? Saya ingin tahu bagaimana memulai penghitung dari angka yang bukan nol.",
                "question_code": "values = [10, 20, 30]\nfor index, value in enumerate(values, start=1):\n    print(index, value)",
                "answer": "Anda bisa menggunakan fungsi `enumerate` dengan parameter `start` untuk menentukan nilai awal penghitung. Contohnya: `enumerate(values, start=1)` akan memulai penghitung dari 1.",
                "answer_code": "values = [10, 20, 30]\nfor index, value in enumerate(values, start=1):\n    print(index, value)"
            },
            {
                "question": "Saya ingin tahu bagaimana menggunakan fungsi `enumerate` dengan list comprehension di Python. Bisa tolong berikan contoh yang jelas?",
                "question_code": "colors = ['red', 'green', 'blue']\nenum_colors = [(i, color) for i, color in enumerate(colors)]",
                "answer": "Anda bisa menggunakan fungsi `enumerate` dengan list comprehension untuk membuat list of tuples yang berisi indeks dan nilai. Contohnya: `[(i, color) for i, color in enumerate(colors)]`.",
                "answer_code": "colors = ['red', 'green', 'blue']\nenum_colors = [(i, color) for i, color in enumerate(colors)]"
            },
            {
                "question": "Bagaimana caranya menggunakan fungsi `enumerate` dengan dictionary di Python? Saya ingin tahu cara mengakses indeks dan nilai key dictionary.",
                "question_code": "data = {'apple': 3, 'banana': 2, 'cherry': 5}\nenum_data = {i: key for i, key in enumerate(data.keys())}",
                "answer": "Anda bisa menggunakan fungsi `enumerate` dengan dictionary untuk membuat dictionary baru yang berisi indeks sebagai key dan nilai dictionary asli sebagai value. Contohnya: `{i: key for i, key in enumerate(data.keys())}`.",
                "answer_code": "data = {'apple': 3, 'banana': 2, 'cherry': 5}\nenum_data = {i: key for i, key in enumerate(data.keys())}"
            },
            {
                "question": "Apakah mungkin menggunakan fungsi `enumerate` dengan string di Python? Jika ya, bagaimana caranya?",
                "question_code": "word = 'hello'\nenum_word = [(i, char) for i, char in enumerate(word)]",
                "answer": "Ya, Anda bisa menggunakan fungsi `enumerate` dengan string untuk membuat list of tuples yang berisi indeks dan karakter. Contohnya: `[(i, char) for i, char in enumerate(word)]`.",
                "answer_code": "word = 'hello'\nenum_word = [(i, char) for i, char in enumerate(word)]"
            },
            {
                "question": "Bagaimana caranya menggunakan fungsi `enumerate` untuk mengakses indeks dan nilai secara bersamaan dalam loop di Python? Bisa beri contoh?",
                "question_code": "fruits = ['apple', 'banana', 'cherry']\nfor i, fruit in enumerate(fruits):\n    print(f'{i}: {fruit}')",
                "answer": "Anda bisa menggunakan fungsi `enumerate` untuk mengakses indeks dan nilai secara bersamaan dalam loop. Contohnya: `for i, fruit in enumerate(fruits): print(f'{i}: {fruit}')`.",
                "answer_code": "fruits = ['apple', 'banana', 'cherry']\nfor i, fruit in enumerate(fruits):\n    print(f'{i}: {fruit}')"
            }
        ]
    }
]
