[
    {
        "sumber": "python-docs.org",
        "penulis": "Emily Carter",
        "tanggal": "2024-07-25",
        "judul": "Memahami Konsep Aritmatika Menengah di Python",
        "tingkat_kesulitan": "menengah",
        "tag": ["python", "aritmatika", "menengah", "konsep"],
        "konten": "Artikel ini menjelaskan konsep-konsep aritmatika tingkat menengah di Python, seperti operasi kombinasi, operator eksponensial, dan presisi floating-point dengan contoh dan penjelasan.",
        "pertanyaan": [
            {
                "question": "Bagaimana cara menggunakan operator `**` untuk menghitung pangkat angka di Python?",
                "question_code": "result = 2 ^ 3",
                "answer": "Untuk menghitung pangkat angka, gunakan operator `**`, bukan `^`. Jadi, `2 ** 3` akan menghasilkan `8`.",
                "answer_code": "result = 2 ** 3\n# Hasilnya adalah 8"
            },
            {
                "question": "Apa yang perlu diingat saat menggunakan floating-point dalam Python?",
                "question": "Python menggunakan representasi floating-point yang bisa menyebabkan kesalahan kecil dalam perhitungan. Untuk hasil lebih akurat, pertimbangkan menggunakan modul `decimal`.",
                "answer": "Modul `decimal` menawarkan akurasi lebih tinggi dalam perhitungan floating-point, mengurangi kesalahan representasi."
            },
            {
                "question": "Jika saya menulis `9 ** 0.5`, apa yang saya dapatkan dan bagaimana cara menghitung akar kuadrat?",
                "question_code": "result = 9 ** 0.3",
                "answer": "Ekspresi `9 ** 0.5` menghasilkan akar kuadrat dari `9`, yaitu `3.0`. Untuk hasil akar kuadrat dari `9`, gunakan `9 ** 0.5`.",
                "answer_code": "result = 9 ** 0.5\n# Hasilnya adalah 3.0"
            },
            {
                "question": "Bagaimana saya bisa menggunakan operator `//` untuk mendapatkan hasil pembagian tanpa desimal?",
                "question_code": "result = 7 / 3",
                "answer": "Gunakan operator `//` untuk pembagian bulat yang menghilangkan bagian desimal. Misalnya, `7 // 3` akan menghasilkan `2`.",
                "answer_code": "result = 7 // 3\n# Hasilnya adalah 2"
            },
            {
                "question": "Apa yang harus saya lakukan untuk mengetahui apakah sebuah angka adalah genap atau ganjil di Python?",
                "question_code": "is_even = number / 2",
                "answer": "Untuk menentukan genap atau ganjil, gunakan operator `%`. Jika `number % 2 == 0`, angka tersebut genap. Jika `number % 2 != 0`, angka tersebut ganjil.",
                "answer_code": "number = 10\nis_even = (number % 2 == 0)\n# Hasil dari is_even adalah True"
            },
            {
                "question": "Bagaimana Python mengatur urutan operasi dalam ekspresi seperti `8 + 2 * 3`?",
                "question_code": "result = (8 + 2) * 3",
                "answer": "Ekspresi `8 + 2 * 3` mengikuti urutan operasi di mana perkalian dilakukan terlebih dahulu sebelum penjumlahan. Jadi, hasilnya adalah `14`.",
                "answer_code": "result = 8 + 2 * 3\n# Hasilnya adalah 14"
            },
            {
                "question": "Apa perbedaan antara `**` dan `pow()` dalam perhitungan eksponensial?",
                "question_code": "result1 = pow(4, 2)\nresult2 = 4 ** 2",
                "answer": "Baik `**` maupun `pow()` dapat digunakan untuk eksponensial. Namun, `pow()` juga bisa menerima parameter ketiga untuk modulus, sementara `**` hanya untuk eksponen.",
                "answer_code": "result1 = pow(4, 2)\nresult2 = 4 ** 2\n# Keduanya menghasilkan 16"
            },
            {
                "question": "Bagaimana cara menghindari masalah presisi dalam perhitungan dengan angka desimal di Python?",
                "answer": "Gunakan modul `decimal` untuk mendapatkan presisi lebih tinggi dalam perhitungan desimal dan mengurangi kesalahan representasi yang umum pada floating-point."
            }
        ]
    },
    {
        "sumber": "realpython.com",
        "penulis": "Sarah Johnson",
        "tanggal": "2024-07-25",
        "judul": "Eksplorasi Operator Aritmatika Menengah di Python",
        "tingkat_kesulitan": "menengah",
        "tag": ["python", "aritmatika", "menengah", "konsep"],
        "konten": "Artikel ini menguraikan penggunaan operator aritmatika tingkat menengah dalam Python dengan fokus pada teknik dan praktik yang lebih kompleks.",
        "pertanyaan": [
            {
                "question": "Apa hasil dari `5 * (3 + 2) / 5` dan bagaimana urutan operasinya?",
                "question_code": "result = 5 * 3 + 2 / 5",
                "answer": "Hasil dari `5 * (3 + 2) / 5` adalah `5.0`. Urutan operasi melibatkan penjumlahan di dalam tanda kurung terlebih dahulu, diikuti oleh perkalian, dan akhirnya pembagian.",
                "answer_code": "result = 5 * (3 + 2) / 5\n# Hasilnya adalah 5.0"
            },
            {
                "question": "Bagaimana cara mendapatkan hasil pembagian tanpa desimal dengan operator `//`?",
                "question_code": "result = 8 / 3",
                "answer": "Gunakan operator `//` untuk pembagian bulat tanpa desimal. Misalnya, `8 // 3` menghasilkan `2`.",
                "answer_code": "result = 8 // 3\n# Hasilnya adalah 2"
            },
            {
                "question": "Mengapa bisa terjadi ketidakakuratan dalam operasi floating-point dan apa solusinya?",
                "answer": "Ketidakakuratan pada floating-point terjadi karena representasi bilangan desimal yang terbatas. Modul `decimal` di Python dapat digunakan untuk mengurangi kesalahan ini dan memberikan hasil yang lebih presisi."
            },
            {
                "question": "Apa hasil dari `(-5) ** 2` dan bagaimana Python menangani tanda negatif?",
                "question_code": "result = -5 ** 2",
                "answer": "Hasil dari `(-5) ** 2` adalah `25`. Python menghitung eksponensial terlebih dahulu sebelum menerapkan tanda negatif.",
                "answer_code": "result = (-5) ** 2\n# Hasilnya adalah 25"
            },
            {
                "question": "Bagaimana operator `%` digunakan untuk menemukan sisa dari pembagian?",
                "question_code": "result = 22 / 7",
                "answer": "Untuk menemukan sisa pembagian, gunakan operator `%`. Misalnya, `22 % 7` menghasilkan `1`.",
                "answer_code": "result = 22 % 7\n# Hasilnya adalah 1"
            },
            {
                "question": "Apa hasil dari `2 ** 4 - 5 + 7` dan bagaimana urutan operasinya?",
                "question_code": "result = 2 ** 4 * 7 - 5",
                "answer": "Hasil dari `2 ** 4 - 5 + 7` adalah `18`. Urutan operasi dilakukan dengan eksponensial terlebih dahulu, lalu pengurangan, dan penambahan terakhir.",
                "answer_code": "result = 2 ** 4 - 5 + 7\n# Hasilnya adalah 18"
            },
            {
                "question": "Apa kegunaan dari `math.fsum()` dan bagaimana menggunakannya untuk penjumlahan?",
                "answer": "Fungsi `math.fsum()` di Python digunakan untuk melakukan penjumlahan floating-point dengan akurasi tinggi, mengurangi kesalahan presisi yang bisa terjadi saat menjumlahkan banyak angka."
            }
        ]
    }
]
