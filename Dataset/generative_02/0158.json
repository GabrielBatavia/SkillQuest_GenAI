[
    {
        "sumber": "belajarpemrogramanpython.net",
        "penulis": "Ika Permata",
        "tanggal": "2023-06-15",
        "judul": "Penggunaan Operator Aritmatika di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "operator aritmatika", "dasar"],
        "konten": "Artikel ini menjelaskan cara menggunakan operator aritmatika di Python seperti penjumlahan, pengurangan, perkalian, pembagian, modulus, dan perpangkatan.",
        "pertanyaan": [
            {
                "question": "Bagaimana kita bisa menjumlahkan dua angka di Python?",
                "answer": "Untuk menjumlahkan dua angka di Python, gunakan operator `+`. Misalnya: `a + b`."
            },
            {
                "question": "Apa cara sederhana untuk mengurangi satu angka dari angka lainnya di Python?",
                "answer": "Untuk mengurangi satu angka dari angka lainnya di Python, gunakan operator `-`. Contohnya: `a - b`."
            },
            {
                "question": "Jika saya ingin mengalikan dua angka, operator apa yang harus saya gunakan?",
                "question_code": "a * b",
                "answer": "Gunakan operator `*` untuk perkalian di Python. Contoh: `a * b`.",
                "answer_code": "a * b"
            },
            {
                "question": "Apa cara yang tepat untuk membagi satu angka dengan angka lainnya di Python?",
                "question_code": "a / b",
                "answer": "Untuk membagi satu angka dengan angka lainnya, gunakan operator `/`. Contoh penggunaannya adalah: `a / b`.",
                "answer_code": "a / b"
            },
            {
                "question": "Bagaimana cara mendapatkan sisa dari hasil pembagian dua angka di Python?",
                "question_code": "a % b",
                "answer": "Untuk mendapatkan sisa hasil pembagian, gunakan operator `%`. Misalnya: `a % b`.",
                "answer_code": "a % b"
            },
            {
                "question": "Jika saya ingin mengangkat angka ke pangkat tertentu, operator apa yang digunakan?",
                "question_code": "a ** b",
                "answer": "Gunakan operator `**` untuk perpangkatan di Python. Contohnya: `a ** b`.",
                "answer_code": "a ** b"
            },
            {
                "question": "Bagaimana caranya melakukan pembagian yang hanya memberikan hasil bulat di Python?",
                "question_code": "a // b",
                "answer": "Untuk pembagian bulat, gunakan operator `//`. Contoh: `a // b`.",
                "answer_code": "a // b"
            },
            {
                "question": "Bagaimana cara menambahkan nilai pada variabel tanpa membuat variabel baru?",
                "question_code": "a += 3",
                "answer": "Gunakan operator augmented assignment seperti `+=` untuk menambahkan nilai. Misalnya: `a += 3`.",
                "answer_code": "a += 3"
            },
            {
                "question": "Apa yang harus saya lakukan untuk membuat angka negatif menjadi positif?",
                "question_code": "abs(-a)",
                "answer": "Gunakan fungsi `abs()` untuk mengubah angka negatif menjadi positif. Contohnya: `abs(-a)`.",
                "answer_code": "abs(-a)"
            }
        ]
    },
    {
        "sumber": "belajarpython.org",
        "penulis": "Rizki Maulana",
        "tanggal": "2024-02-01",
        "judul": "Penggunaan Loop While di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "loop while", "dasar"],
        "konten": "Artikel ini menjelaskan cara menggunakan loop while di Python untuk mengulangi eksekusi blok kode selama kondisi tertentu terpenuhi.",
        "pertanyaan": [
            {
                "question": "Bagaimana caranya membuat loop yang terus berjalan selama kondisi tertentu di Python?",
                "answer": "Untuk membuat loop yang berjalan selama kondisi tertentu, gunakan sintaks `while condition:` diikuti oleh blok kode. Contoh: `while x < 5: print(x)`."
            },
            {
                "question": "Jika saya ingin menghentikan loop while lebih awal, apa yang bisa saya lakukan?",
                "question_code": "x = 0\nwhile x < 10:\n    if x == 5:\n        break\n    print(x)\n    x += 1",
                "answer": "Anda bisa menggunakan perintah `break` untuk menghentikan loop lebih awal. Misalnya: `if x == 5: break`.",
                "answer_code": "x = 0\nwhile x < 10:\n    if x == 5:\n        break\n    print(x)\n    x += 1"
            },
            {
                "question": "Bagaimana caranya melewati bagian tertentu dari loop dan langsung ke iterasi berikutnya?",
                "question_code": "x = 0\nwhile x < 10:\n    x += 1\n    if x % 2 == 0:\n        continue\n    print(x)",
                "answer": "Gunakan perintah `continue` untuk melewati iterasi saat ini dan lanjut ke iterasi berikutnya. Contoh: `if x % 2 == 0: continue`.",
                "answer_code": "x = 0\nwhile x < 10:\n    x += 1\n    if x % 2 == 0:\n        continue\n    print(x)"
            },
            {
                "question": "Apa yang terjadi jika saya menulis `while True` di Python?",
                "question_code": "while True:\n    print('Ini loop tak hingga')",
                "answer": "Menulis `while True` akan menghasilkan loop tak hingga yang terus berjalan tanpa henti. Contoh: `while True: print('Ini loop tak hingga')`.",
                "answer_code": "while True:\n    print('Ini loop tak hingga')"
            },
            {
                "question": "Bagaimana cara mengubah kondisi loop while di dalam loop itu sendiri?",
                "question_code": "x = 0\nwhile x < 5:\n    print(x)\n    x += 1",
                "answer": "Anda bisa mengubah kondisi loop dengan memodifikasi variabel yang digunakan dalam kondisi. Misalnya: `while x < 5: print(x); x += 1`.",
                "answer_code": "x = 0\nwhile x < 5:\n    print(x)\n    x += 1"
            },
            {
                "question": "Bisakah saya menggunakan loop while di dalam loop while yang lain?",
                "question_code": "x = 0\nwhile x < 3:\n    y = 0\n    while y < 3:\n        print(x, y)\n        y += 1\n    x += 1",
                "answer": "Ya, Anda bisa menggunakan loop while di dalam loop while lainnya. Contohnya: `while x < 3: while y < 3:`.",
                "answer_code": "x = 0\nwhile x < 3:\n    y = 0\n    while y < 3:\n        print(x, y)\n        y += 1\n    x += 1"
            },
            {
                "question": "Bagaimana jika saya ingin loop while menghentikan eksekusi dan menjalankan blok kode setelah loop selesai?",
                "question_code": "x = 0\nwhile x < 5:\n    print(x)\n    x += 1\nelse:\n    print('Loop selesai')",
                "answer": "Gunakan pernyataan `else` setelah loop untuk menjalankan kode jika loop selesai tanpa intervensi `break`. Contoh: `else: print('Loop selesai')`.",
                "answer_code": "x = 0\nwhile x < 5:\n    print(x)\n    x += 1\nelse:\n    print('Loop selesai')"
            },
            {
                "question": "Bagaimana cara meminta input dari pengguna dalam loop while?",
                "question_code": "user_input = ''\nwhile user_input != 'exit':\n    user_input = input('Ketik sesuatu (ketik exit untuk berhenti): ')\n    print(user_input)",
                "answer": "Untuk meminta input dari pengguna dalam loop, gunakan `input()` di dalam loop. Misalnya: `while user_input != 'exit': user_input = input('Ketik sesuatu (ketik exit untuk berhenti): '); print(user_input)`.",
                "answer_code": "user_input = ''\nwhile user_input != 'exit':\n    user_input = input('Ketik sesuatu (ketik exit untuk berhenti): ')\n    print(user_input)"
            }
        ]
    }
]
