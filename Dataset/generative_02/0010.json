[
    {
        "sumber": "belajarpython.com",
        "penulis": "Ahmad Budi",
        "tanggal": "2023-12-05",
        "judul": "Pemrograman Berbasis Objek di Python",
        "tingkat_kesulitan": "Lanjutan",
        "tag": ["python", "OOP", "advanced"],
        "konten": "Artikel ini membahas tentang pemrograman berorientasi objek (OOP) dalam Python, meliputi kelas, objek, pewarisan, dan enkapsulasi.",
        "pertanyaan": [
            {
                "question": "Apa itu OOP?",
                "answer": "Object-Oriented Programming atau OOP adalah metode pemrograman yang menggunakan 'objek' untuk mewakili data dan fungsi."
            },
            {
                "question": "Bagaimana cara mendeklarasikan kelas di Python?",
                "answer": "Kelas di Python dapat dideklarasikan dengan kata kunci `class` diikuti oleh nama kelas. Contoh: `class KelasContoh:`."
            },
            {
                "question": "Bagaimana cara membuat instance objek dari kelas di Python?",
                "answer": "Untuk membuat instance objek dari kelas, gunakan sintaks `instance = NamaKelas()`. Contoh: `objek = KelasContoh()`."
            },
            {
                "question": "Bagaimana cara mendefinisikan metode dalam kelas?",
                "question_code": "class KelasContoh:\n    def metode_contoh(self):\n        print('Halo dari KelasContoh')",
                "answer": "Metode dalam kelas dapat didefinisikan dengan menambahkan fungsi di dalam kelas. Contoh: `def metode_contoh(self):`."
            },
            {
                "question": "Bagaimana cara mengakses atribut dalam kelas?",
                "question_code": "class KelasContoh:\n    def __init__(self, nilai):\n        self.nilai = nilai\nobjek = KelasContoh(10)\nprint(objek.nilai)",
                "answer": "Atribut dalam kelas dapat diakses menggunakan `self.nama_atribut` di dalam kelas dan `objek.nama_atribut` di luar kelas.",
                "answer_code": "objek.nilai"
            },
            {
                "question": "Bagaimana cara mengimplementasikan pewarisan di Python?",
                "question_code": "class SuperClass:\n    def metode_super(self):\n        print('Halo dari SuperClass')\nclass SubClass(SuperClass):\n    def metode_sub(self):\n        print('Halo dari SubClass')\nobjek = SubClass()\nobjek.metode_super()",
                "answer": "Pewarisan dapat diimplementasikan dengan menuliskan nama kelas induk dalam tanda kurung setelah nama kelas anak. Misalnya: `class SubClass(SuperClass):`.",
                "answer_code": "objek.metode_super()"
            },
            {
                "question": "Bagaimana cara menerapkan enkapsulasi di Python?",
                "question_code": "class KelasContoh:\n    def __init__(self):\n        self.__atribut_privat = 'private'\n    def get_atribut_privat(self):\n        return self.__atribut_privat\nobjek = KelasContoh()\nprint(objek.get_atribut_privat())",
                "answer": "Enkapsulasi dapat diterapkan dengan mendeklarasikan atribut sebagai private menggunakan dua garis bawah `__` di depan nama atribut.",
                "answer_code": "objek.get_atribut_privat()"
            },
            {
                "question": "Bagaimana cara mendefinisikan metode statis di Python?",
                "question_code": "class KelasContoh:\n    @staticmethod\n    def metode_statis():\n        print('Ini adalah metode statis')\nKelasContoh.metode_statis()",
                "answer": "Metode statis dapat didefinisikan dengan menggunakan dekorator `@staticmethod` di atas metode. Contoh: `@staticmethod`.",
                "answer_code": "KelasContoh.metode_statis()"
            },
            {
                "question": "Bagaimana cara menerapkan polimorfisme di Python?",
                "question_code": "class Binatang:\n    def suara(self):\n        raise NotImplementedError\nclass Anjing(Binatang):\n    def suara(self):\n        return 'Guk'\nclass Kucing(Binatang):\n    def suara(self):\n        return 'Meong'\nhewan = [Anjing(), Kucing()]\nfor h in hewan:\n    print(h.suara())",
                "answer": "Polimorfisme dapat diterapkan dengan mendefinisikan metode yang sama di kelas yang berbeda dan memanggilnya melalui referensi kelas induk.",
                "answer_code": "for h in hewan:\n    print(h.suara())"
            }
        ]
    },
    {
        "sumber": "pythonpemula.com",
        "penulis": "Siti Aminah",
        "tanggal": "2022-11-22",
        "judul": "Manipulasi Data dengan Pandas",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "pandas", "data"],
        "konten": "Artikel ini memberikan panduan tentang cara menggunakan pustaka Pandas untuk manipulasi data dalam Python, termasuk cara membuat, mengakses, dan memodifikasi DataFrame.",
        "pertanyaan": [
            {
                "question": "Apa itu Pandas?",
                "answer": "Pandas adalah pustaka Python yang memungkinkan manipulasi dan analisis data dengan mudah."
            },
            {
                "question": "Bagaimana cara mengimpor pustaka Pandas?",
                "answer": "Pustaka Pandas dapat diimpor dengan sintaks `import pandas as pd`."
            },
            {
                "question": "Bagaimana cara membuat DataFrame dengan Pandas?",
                "answer": "DataFrame dapat dibuat menggunakan fungsi `pd.DataFrame()`. Contoh: `df = pd.DataFrame(data)`."
            },
            {
                "question": "Bagaimana cara membaca file CSV ke dalam DataFrame?",
                "question_code": "import pandas as pd\ndf = pd.read_csv('file.csv')",
                "answer": "File CSV dapat dibaca ke dalam DataFrame menggunakan fungsi `pd.read_csv()`. Contoh: `df = pd.read_csv('file.csv')`."
            },
            {
                "question": "Bagaimana cara menampilkan lima baris pertama dari DataFrame?",
                "question_code": "df.head()",
                "answer": "Lima baris pertama dari DataFrame dapat ditampilkan menggunakan metode `head()`. Contoh: `df.head()`."
            },
            {
                "question": "Bagaimana cara mengakses kolom tertentu dalam DataFrame?",
                "question_code": "df['nama_kolom']",
                "answer": "Kolom tertentu dalam DataFrame dapat diakses menggunakan sintaks `df['nama_kolom']`.",
                "answer_code": "df['nama_kolom']"
            },
            {
                "question": "Bagaimana cara menambahkan kolom baru ke DataFrame?",
                "question_code": "df['kolom_baru'] = nilai",
                "answer": "Kolom baru dapat ditambahkan ke DataFrame dengan memberikan nilai ke kolom tersebut. Contoh: `df['kolom_baru'] = nilai`.",
                "answer_code": "df['kolom_baru'] = nilai"
            },
            {
                "question": "Bagaimana cara menghapus kolom dari DataFrame?",
                "question_code": "df.drop('nama_kolom', axis=1, inplace=True)",
                "answer": "Kolom dapat dihapus dari DataFrame menggunakan metode `drop()`. Contoh: `df.drop('nama_kolom', axis=1, inplace=True)`.",
                "answer_code": "df.drop('nama_kolom', axis=1, inplace=True)"
            },
            {
                "question": "Bagaimana cara memfilter DataFrame berdasarkan kondisi tertentu?",
                "question_code": "df[df['kolom'] > nilai]",
                "answer": "DataFrame dapat difilter berdasarkan kondisi tertentu menggunakan sintaks `df[df['kolom'] > nilai]`.",
                "answer_code": "df[df['kolom'] > nilai]"
            }
        ]
    }
]
