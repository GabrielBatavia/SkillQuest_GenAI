[
    {
        "sumber": "belajarpython.com",
        "penulis": "Budi Santoso",
        "tanggal": "2023-06-22",
        "judul": "Penerapan Loop dalam Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "loop", "dasar"],
        "konten": "Artikel ini membahas tentang cara menggunakan loop dalam Python, termasuk loop `for` dan `while`, serta cara menghentikan dan melanjutkan loop dengan menggunakan `break` dan `continue`.",
        "pertanyaan": [
            {
                "question": "Apa yang dimaksud dengan loop `for` dalam Python?",
                "answer": "Loop `for` digunakan untuk iterasi melalui elemen-elemen dalam sebuah urutan, seperti list, tuple, atau string."
            },
            {
                "question": "Bagaimana cara mendeklarasikan loop `for` di Python?",
                "answer": "Loop `for` dideklarasikan dengan menggunakan sintaks `for item in iterable:` diikuti dengan blok kode yang akan diulang. Contohnya: `for i in range(5): print(i)`."
            },
            {
                "question": "Apa itu loop `while` dalam Python?",
                "answer": "Loop `while` digunakan untuk terus menjalankan blok kode selama kondisi yang diberikan tetap benar."
            },
            {
                "question": "Bagaimana cara mendefinisikan loop `while` di Python?",
                "question_code": "while condition:\n    # blok kode",
                "answer": "Loop `while` didefinisikan dengan sintaks `while condition:` diikuti dengan blok kode yang akan dijalankan selama kondisi terpenuhi. Contohnya: `while x < 5: print(x)`.",
                "answer_code": "while condition:\n    # blok kode"
            },
            {
                "question": "Bagaimana cara menghentikan eksekusi loop di Python?",
                "question_code": "for i in range(10):\n    if i == 5:\n        break\n    print(i)",
                "answer": "Untuk menghentikan eksekusi loop, Anda dapat menggunakan pernyataan `break`. Contohnya: `if i == 5: break`.",
                "answer_code": "for i in range(10):\n    if i == 5:\n        break\n    print(i)"
            },
            {
                "question": "Bagaimana cara melewati iterasi saat ini dan melanjutkan ke iterasi berikutnya?",
                "question_code": "for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)",
                "answer": "Untuk melewati iterasi saat ini dan melanjutkan ke iterasi berikutnya, gunakan pernyataan `continue`. Contohnya: `if i % 2 == 0: continue`.",
                "answer_code": "for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)"
            },
            {
                "question": "Bagaimana cara menerapkan loop bersarang di Python?",
                "question_code": "for i in range(3):\n    for j in range(3):\n        print(i, j)",
                "answer": "Loop bersarang dapat diterapkan dengan menempatkan satu loop di dalam loop lainnya. Contohnya: `for i in range(3): for j in range(3):`.",
                "answer_code": "for i in range(3):\n    for j in range(3):\n        print(i, j)"
            },
            {
                "question": "Bagaimana cara mendapatkan indeks dalam loop `for`?",
                "question_code": "for index, item in enumerate(iterable):\n    print(index, item)",
                "answer": "Untuk mendapatkan indeks dalam loop `for`, Anda bisa menggunakan fungsi `enumerate()`. Contohnya: `for index, item in enumerate(iterable):`.",
                "answer_code": "for index, item in enumerate(iterable):\n    print(index, item)"
            },
            {
                "question": "Bagaimana cara memanfaatkan pernyataan `else` dalam loop di Python?",
                "question_code": "for item in iterable:\n    if condition:\n        break\nelse:\n    # blok kode jika tidak ada break",
                "answer": "Pernyataan `else` dalam loop dapat digunakan untuk menjalankan blok kode jika loop selesai tanpa terhenti oleh `break`.",
                "answer_code": "for item in iterable:\n    if condition:\n        break\nelse:\n    # blok kode jika tidak ada break"
            }
        ]
    },
    {
        "sumber": "pythonpemula.com",
        "penulis": "Rina Sari",
        "tanggal": "2023-11-15",
        "judul": "Penggunaan Tuple dan Set dalam Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "tuple", "set"],
        "konten": "Artikel ini menjelaskan bagaimana cara membuat, mengakses, dan memanipulasi tuple serta set di Python.",
        "pertanyaan": [
            {
                "question": "Apa yang dimaksud dengan tuple dalam Python?",
                "answer": "Tuple adalah struktur data yang mirip dengan list namun bersifat immutable, artinya tidak bisa diubah setelah dibuat."
            },
            {
                "question": "Bagaimana cara mendeklarasikan tuple di Python?",
                "answer": "Tuple dapat dibuat dengan menggunakan tanda kurung `()` dan memisahkan elemen dengan koma. Contohnya: `my_tuple = (1, 2, 3)`."
            },
            {
                "question": "Bagaimana cara mengakses elemen dalam tuple?",
                "answer": "Elemen dalam tuple dapat diakses dengan menggunakan indeks. Contohnya: `my_tuple[0]`."
            },
            {
                "question": "Bagaimana cara membuat tuple yang berisi satu elemen?",
                "question_code": "my_tuple = (1,)",
                "answer": "Tuple yang berisi satu elemen dibuat dengan menambahkan koma setelah elemen. Contohnya: `my_tuple = (1,)`.",
                "answer_code": "my_tuple = (1,)"
            },
            {
                "question": "Apa itu set dalam Python?",
                "question_code": "my_set = {1, 2, 3}",
                "answer": "Set adalah koleksi elemen unik tanpa urutan tertentu. Contohnya: `my_set = {1, 2, 3}`.",
                "answer_code": "my_set = {1, 2, 3}"
            },
            {
                "question": "Bagaimana cara menambahkan elemen ke set?",
                "question_code": "my_set.add(4)",
                "answer": "Elemen dapat ditambahkan ke set dengan menggunakan metode `add()`. Contohnya: `my_set.add(4)`.",
                "answer_code": "my_set.add(4)"
            },
            {
                "question": "Bagaimana cara menghapus elemen dari set?",
                "question_code": "my_set.remove(2)",
                "answer": "Untuk menghapus elemen dari set, gunakan metode `remove()`. Contohnya: `my_set.remove(2)`.",
                "answer_code": "my_set.remove(2)"
            },
            {
                "question": "Bagaimana cara menggabungkan dua set?",
                "question_code": "set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nunion_set = set1.union(set2)",
                "answer": "Untuk menggabungkan dua set, gunakan metode `union()`. Contohnya: `set1.union(set2)`.",
                "answer_code": "union_set = set1.union(set2)"
            },
            {
                "question": "Bagaimana cara menemukan irisan dua set?",
                "question_code": "set1 = {1, 2, 3}\nset2 = {3, 4, 5}\nintersection_set = set1.intersection(set2)",
                "answer": "Untuk menemukan irisan dua set, gunakan metode `intersection()`. Contohnya: `set1.intersection(set2)`.",
                "answer_code": "intersection_set = set1.intersection(set2)"
            }
        ]
    }
]
