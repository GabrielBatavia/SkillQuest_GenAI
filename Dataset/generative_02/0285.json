[
    {
        "sumber": "pythonpro.com",
        "penulis": "Budi Setiawan",
        "tanggal": "2024-11-25",
        "judul": "Penggunaan Fungsi Decorator di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "decorator", "menengah"],
        "konten": "Artikel ini menjelaskan cara menggunakan decorator di Python untuk memodifikasi atau memperluas fungsi dan metode secara dinamis.",
        "pertanyaan": [
            {
                "question": "Saya dengar ada yang namanya decorator di Python. Bisa dijelaskan apa itu?",
                "answer": "Decorator adalah fungsi yang mengambil fungsi lain sebagai argumen dan mengembalikan fungsi baru dengan perilaku yang telah dimodifikasi atau diperluas."
            },
            {
                "question": "Bagaimana cara membuat decorator sederhana di Python? Contohnya bagaimana?",
                "question_code": "def contoh_decorator(func):\n    def wrapper():\n        print('Fungsi ini dipanggil sebelum fungsi utama')\n        func()\n        print('Fungsi ini dipanggil setelah fungsi utama')\n    return wrapper",
                "answer": "Anda bisa membuat decorator dengan mendefinisikan fungsi yang mengembalikan fungsi pembungkus (wrapper). Misalnya, `def contoh_decorator(func): ... return wrapper`.",
                "answer_code": "def contoh_decorator(func):\n    def wrapper():\n        print('Fungsi ini dipanggil sebelum fungsi utama')\n        func()\n        print('Fungsi ini dipanggil setelah fungsi utama')\n    return wrapper"
            },
            {
                "question": "Bagaimana cara menggunakan decorator pada fungsi di Python?",
                "question_code": "@contoh_decorator\ndef halo():\n    print('Halo, dunia!')",
                "answer": "Anda bisa menggunakan decorator pada fungsi dengan menambahkan `@` diikuti nama decorator di atas definisi fungsi. Misalnya, `@contoh_decorator`.",
                "answer_code": "@contoh_decorator\ndef halo():\n    print('Halo, dunia!')"
            },
            {
                "question": "Bagaimana cara membuat decorator yang bisa menerima argumen di Python? Ada contohnya?",
                "question_code": "def ulangi_kali(n):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(n):\n                func(*args, **kwargs)\n        return wrapper\n    return decorator",
                "answer": "Anda bisa membuat decorator yang bisa menerima argumen dengan menambahkan lapisan fungsi tambahan di atas fungsi pembungkus. Misalnya, `def ulangi_kali(n): ... return decorator`.",
                "answer_code": "def ulangi_kali(n):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(n):\n                func(*args, **kwargs)\n        return wrapper\n    return decorator"
            },
            {
                "question": "Bagaimana cara menggunakan beberapa decorator pada satu fungsi di Python?",
                "question_code": "@decorator_satu\n@decorator_dua\ndef fungsi_saya():\n    print('Ini fungsi saya')",
                "answer": "Anda bisa menggunakan beberapa decorator pada satu fungsi dengan menumpuknya di atas definisi fungsi. Urutan eksekusi adalah dari atas ke bawah. Misalnya, `@decorator_satu` dan `@decorator_dua`.",
                "answer_code": "@decorator_satu\n@decorator_dua\ndef fungsi_saya():\n    print('Ini fungsi saya')"
            },
            {
                "question": "Bagaimana cara membuat decorator untuk mengukur waktu eksekusi fungsi di Python?",
                "question_code": "import time\ndef decorator_waktu(func):\n    def wrapper(*args, **kwargs):\n        mulai = time.time()\n        hasil = func(*args, **kwargs)\n        selesai = time.time()\n        print(f'Waktu eksekusi: {selesai - mulai} detik')\n        return hasil\n    return wrapper",
                "answer": "Anda bisa membuat decorator untuk mengukur waktu eksekusi fungsi dengan mencatat waktu sebelum dan setelah eksekusi fungsi. Misalnya, `def decorator_waktu(func): ... return wrapper`.",
                "answer_code": "import time\ndef decorator_waktu(func):\n    def wrapper(*args, **kwargs):\n        mulai = time.time()\n        hasil = func(*args, **kwargs)\n        selesai = time.time()\n        print(f'Waktu eksekusi: {selesai - mulai} detik')\n        return hasil\n    return wrapper"
            }
        ]
    },
    {
        "sumber": "pythonexperts.com",
        "penulis": "Siti Aminah",
        "tanggal": "2024-10-15",
        "judul": "Penggunaan Context Managers di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "context manager", "menengah"],
        "konten": "Artikel ini menjelaskan cara menggunakan context managers di Python untuk mengelola sumber daya seperti file dan koneksi jaringan.",
        "pertanyaan": [
            {
                "question": "Saya dengar ada yang namanya context manager di Python. Bisa dijelaskan apa itu?",
                "answer": "Context manager adalah konstruksi yang memungkinkan Anda mengelola sumber daya dengan cara yang konsisten dan terkontrol, memastikan bahwa sumber daya tersebut dibersihkan setelah digunakan."
            },
            {
                "question": "Bagaimana cara menggunakan context manager dengan `with` di Python? Bisa kasih contoh?",
                "question_code": "with open('file.txt', 'r') as file:\n    konten = file.read()",
                "answer": "Anda bisa menggunakan context manager dengan kata kunci `with`, yang memastikan bahwa sumber daya dibersihkan setelah blok kode selesai dieksekusi. Misalnya, `with open('file.txt', 'r') as file:`.",
                "answer_code": "with open('file.txt', 'r') as file:\n    konten = file.read()"
            },
            {
                "question": "Bagaimana cara membuat context manager menggunakan class di Python?",
                "question_code": "class PengelolaKonteks:\n    def __enter__(self):\n        print('Masuk ke dalam konteks')\n    def __exit__(self, exc_type, exc_value, traceback):\n        print('Keluar dari konteks')\n\nwith PengelolaKonteks() as pk:\n    print('Sedang di dalam konteks')",
                "answer": "Anda bisa membuat context manager menggunakan class dengan mendefinisikan metode `__enter__` dan `__exit__`. Misalnya, `class PengelolaKonteks: ...`.",
                "answer_code": "class PengelolaKonteks:\n    def __enter__(self):\n        print('Masuk ke dalam konteks')\n    def __exit__(self, exc_type, exc_value, traceback):\n        print('Keluar dari konteks')\n\nwith PengelolaKonteks() as pk:\n    print('Sedang di dalam konteks')"
            },
            {
                "question": "Bagaimana cara membuat context manager menggunakan decorator `contextlib` di Python?",
                "question_code": "from contextlib import contextmanager\n@contextmanager\ndef konteks_sederhana():\n    print('Masuk ke dalam konteks')\n    yield\n    print('Keluar dari konteks')\n\nwith konteks_sederhana():\n    print('Sedang di dalam konteks')",
                "answer": "Anda bisa membuat context manager menggunakan decorator `contextlib.contextmanager` dan kata kunci `yield`. Misalnya, `@contextmanager def konteks_sederhana(): ... yield ...`.",
                "answer_code": "from contextlib import contextmanager\n@contextmanager\ndef konteks_sederhana():\n    print('Masuk ke dalam konteks')\n    yield\n    print('Keluar dari konteks')\n\nwith konteks_sederhana():\n    print('Sedang di dalam konteks')"
            },
            {
                "question": "Bagaimana cara menggunakan context manager untuk mengelola koneksi database di Python? Bisa beri contoh?",
                "question_code": "from contextlib import contextmanager\nimport sqlite3\n\n@contextmanager\ndef buka_db(nama_db):\n    conn = sqlite3.connect(nama_db)\n    cursor = conn.cursor()\n    try:\n        yield cursor\n    finally:\n        conn.commit()\n        conn.close()\n\nwith buka_db('dbku.db') as cursor:\n    cursor.execute('SELECT * FROM tabel_saya')",
                "answer": "Anda bisa menggunakan context manager untuk mengelola koneksi database dengan memastikan bahwa koneksi ditutup setelah digunakan. Misalnya, `@contextmanager def buka_db(nama_db): ... yield cursor`.",
                "answer_code": "from contextlib import contextmanager\nimport sqlite3\n\n@contextmanager\ndef buka_db(nama_db):\n    conn = sqlite3.connect(nama_db)\n    cursor = conn.cursor()\n    try:\n        yield cursor\n    finally:\n        conn.commit()\n        conn.close()\n\nwith buka_db('dbku.db') as cursor:\n    cursor.execute('SELECT * FROM tabel_saya')"
            }
        ]
    }
]
