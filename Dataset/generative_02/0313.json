[
    {
        "sumber": "pythonguru.com",
        "penulis": "Andi Wijaya",
        "tanggal": "2024-12-15",
        "judul": "Teknik Metaprogramming dengan Decorators di Python",
        "tingkat_kesulitan": "Lanjut",
        "tag": ["python", "metaprogramming", "decorators", "lanjut"],
        "konten": "Artikel ini membahas teknik metaprogramming di Python dengan menggunakan decorators untuk memodifikasi perilaku fungsi secara dinamis.",
        "pertanyaan": [
            {
                "question": "Apa itu metaprogramming di Python?",
                "answer": "Metaprogramming adalah teknik pemrograman yang memungkinkan program untuk memodifikasi atau menghasilkan kode program lain selama waktu eksekusi."
            },
            {
                "question": "Bagaimana cara membuat decorator yang mencatat waktu eksekusi fungsi di Python?",
                "question_code": "import time\n\ndef timing_decorator(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f'Execution time: {end_time - start_time} seconds')\n        return result\n    return wrapper\n\n@timing_decorator\ndef multiply(a, b):\n    return a * b\n\nmultiply(3, 4)",
                "answer": "Anda bisa membuat decorator yang mencatat waktu eksekusi fungsi dengan menggunakan modul `time` untuk mencatat waktu sebelum dan setelah eksekusi fungsi. Contohnya: `start_time = time.time()`.",
                "answer_code": "import time\n\ndef timing_decorator(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f'Execution time: {end_time - start_time} seconds')\n        return result\n    return wrapper\n\n@timing_decorator\ndef multiply(a, b):\n    return a * b\n\nmultiply(3, 4)"
            },
            {
                "question": "Bagaimana cara membuat decorator yang menambah logging ke fungsi di Python?",
                "question_code": "import logging\n\nlogging.basicConfig(level=logging.INFO)\n\ndef log_decorator(func):\n    def wrapper(*args, **kwargs):\n        logging.info(f'Calling {func.__name__} with args: {args} and kwargs: {kwargs}')\n        result = func(*args, **kwargs)\n        logging.info(f'{func.__name__} returned {result}')\n        return result\n    return wrapper\n\n@log_decorator\ndef divide(a, b):\n    return a / b\n\ndivide(10, 2)",
                "answer": "Anda bisa membuat decorator yang menambah logging ke fungsi dengan menggunakan modul `logging` untuk mencatat pemanggilan fungsi dan hasilnya. Contohnya: `logging.info(f'Calling {func.__name__} with args: {args} and kwargs: {kwargs}')`.",
                "answer_code": "import logging\n\nlogging.basicConfig(level=logging.INFO)\n\ndef log_decorator(func):\n    def wrapper(*args, **kwargs):\n        logging.info(f'Calling {func.__name__} with args: {args} and kwargs: {kwargs}')\n        result = func(*args, **kwargs)\n        logging.info(f'{func.__name__} returned {result}')\n        return result\n    return wrapper\n\n@log_decorator\ndef divide(a, b):\n    return a / b\n\ndivide(10, 2)"
            },
            {
                "question": "Bagaimana cara membuat decorator yang mengulang eksekusi fungsi jika terjadi kesalahan di Python?",
                "question_code": "import time\n\ndef retry_decorator(retries=3, delay=1):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(retries):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    print(f'Error: {e}. Retrying in {delay} seconds...')\n                    time.sleep(delay)\n            raise Exception(f'Failed after {retries} retries')\n        return wrapper\n    return decorator\n\n@retry_decorator(retries=5, delay=2)\ndef faulty_divide(a, b):\n    return a / b\n\nfaulty_divide(10, 0)",
                "answer": "Anda bisa membuat decorator yang mengulang eksekusi fungsi jika terjadi kesalahan dengan menggunakan loop dan blok try-except di dalam fungsi pembungkus. Contohnya: `for _ in range(retries): ... try: return func(*args, **kwargs) ... except Exception as e:`.",
                "answer_code": "import time\n\ndef retry_decorator(retries=3, delay=1):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(retries):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    print(f'Error: {e}. Retrying in {delay} seconds...')\n                    time.sleep(delay)\n            raise Exception(f'Failed after {retries} retries')\n        return wrapper\n    return decorator\n\n@retry_decorator(retries=5, delay=2)\ndef faulty_divide(a, b):\n    return a / b\n\nfaulty_divide(10, 0)"
            }
        ]
    },
    {
        "sumber": "pythonadvanced.com",
        "penulis": "Siti Aminah",
        "tanggal": "2024-12-20",
        "judul": "Pemrograman Asinkron dengan Custom Awaitable Objects di Python",
        "tingkat_kesulitan": "Lanjut",
        "tag": ["python", "asyncio", "awaitable", "lanjut"],
        "konten": "Artikel ini menjelaskan cara membuat custom awaitable objects di Python untuk pemrograman asinkron yang lebih kompleks.",
        "pertanyaan": [
            {
                "question": "Apa itu awaitable object di Python?",
                "answer": "Awaitable object adalah objek yang bisa digunakan dengan kata kunci `await` dalam coroutine. Contohnya adalah coroutine dan objek yang mengimplementasikan metode `__await__`."
            },
            {
                "question": "Bagaimana cara membuat custom awaitable object di Python?",
                "question_code": "class MyAwaitable:\n    def __init__(self, value):\n        self.value = value\n    def __await__(self):\n        yield\n        return self.value\n\nasync def main():\n    result = await MyAwaitable(42)\n    print(result)\n\nimport asyncio\nasyncio.run(main())",
                "answer": "Anda bisa membuat custom awaitable object dengan mengimplementasikan metode `__await__` yang mengembalikan iterator. Contohnya: `def __await__(self): yield return self.value`.",
                "answer_code": "class MyAwaitable:\n    def __init__(self, value):\n        self.value = value\n    def __await__(self):\n        yield\n        return self.value\n\nasync def main():\n    result = await MyAwaitable(42)\n    print(result)\n\nimport asyncio\nasyncio.run(main())"
            },
            {
                "question": "Bagaimana cara membuat coroutine yang melakukan beberapa tugas asinkron secara paralel di Python?",
                "question_code": "import asyncio\n\nasync def task1():\n    await asyncio.sleep(1)\n    return 'Task 1 completed'\n\nasync def task2():\n    await asyncio.sleep(2)\n    return 'Task 2 completed'\n\nasync def main():\n    results = await asyncio.gather(task1(), task2())\n    for result in results:\n        print(result)\n\nasyncio.run(main())",
                "answer": "Anda bisa membuat coroutine yang melakukan beberapa tugas asinkron secara paralel dengan menggunakan `asyncio.gather` untuk mengumpulkan dan menjalankan beberapa coroutine sekaligus. Contohnya: `results = await asyncio.gather(task1(), task2())`.",
                "answer_code": "import asyncio\n\nasync def task1():\n    await asyncio.sleep(1)\n    return 'Task 1 completed'\n\nasync def task2():\n    await asyncio.sleep(2)\n    return 'Task 2 completed'\n\nasync def main():\n    results = await asyncio.gather(task1(), task2())\n    for result in results:\n        print(result)\n\nasyncio.run(main())"
            },
            {
                "question": "Bagaimana cara menangani timeout dalam pemrograman asinkron dengan asyncio di Python?",
                "question_code": "import asyncio\n\nasync def long_task():\n    await asyncio.sleep(10)\n\nasync def main():\n    try:\n        await asyncio.wait_for(long_task(), timeout=5)\n    except asyncio.TimeoutError:\n        print('Task timed out')\n\nasyncio.run(main())",
                "answer": "Anda bisa menangani timeout dalam pemrograman asinkron dengan asyncio menggunakan fungsi `asyncio.wait_for` untuk menetapkan batas waktu pada coroutine. Contohnya: `await asyncio.wait_for(long_task(), timeout=5)`.",
                "answer_code": "import asyncio\n\nasync def long_task():\n    await asyncio.sleep(10)\n\nasync def main():\n    try:\n        await asyncio.wait_for(long_task(), timeout=5)\n    except asyncio.TimeoutError:\n        print('Task timed out')\n\nasyncio.run(main())"
            },
            {
                "question": "Bagaimana cara membuat generator asinkron di Python?",
                "question_code": "import asyncio\n\nasync def async_generator():\n    for i in range(5):\n        await asyncio.sleep(1)\n        yield i\n\nasync def main():\n    async for value in async_generator():\n        print(value)\n\nasyncio.run(main())",
                "answer": "Anda bisa membuat generator asinkron dengan menggunakan kata kunci `async` dan `yield` dalam fungsi generator. Contohnya: `async def async_generator(): ... await asyncio.sleep(1) ... yield i`.",
                "answer_code": "import asyncio\n\nasync def async_generator():\n    for i in range(5):\n        await asyncio.sleep(1)\n        yield i\n\nasync def main():\n    async for value in async_generator():\n        print(value)\n\nasyncio.run(main())"
            }
        ]
    }
]
