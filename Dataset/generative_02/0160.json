[
    {
        "sumber": "belajarpemrogramanpython.net",
        "penulis": "Ika Permata",
        "tanggal": "2023-06-15",
        "judul": "Penggunaan Operator Aritmatika di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "operator aritmatika", "dasar"],
        "konten": "Artikel ini menjelaskan cara menggunakan operator aritmatika di Python seperti penjumlahan, pengurangan, perkalian, pembagian, modulus, dan perpangkatan.",
        "pertanyaan": [
            {
                "question": "Bagaimana cara menjumlahkan dua angka di Python?",
                "answer": "Untuk menjumlahkan dua angka di Python, Anda bisa menggunakan operator `+`. Misalnya, jika Anda memiliki angka 5 dan 3, maka `5 + 3` akan menghasilkan 8."
            },
            {
                "question": "Jika saya ingin mengurangi satu angka dari angka lainnya, bagaimana caranya?",
                "answer": "Untuk mengurangi satu angka dari angka lainnya, gunakan operator `-`. Contoh: `10 - 4` akan menghasilkan 6."
            },
            {
                "question": "Apa kode yang digunakan untuk mengalikan dua angka di Python?",
                "question_code": "x * y",
                "answer": "Gunakan operator `*` untuk perkalian. Jadi, jika Anda ingin mengalikan 7 dan 6, tulis `7 * 6` yang hasilnya adalah 42.",
                "answer_code": "x * y"
            },
            {
                "question": "Bagaimana cara melakukan pembagian antara dua angka?",
                "question_code": "x / y",
                "answer": "Untuk membagi satu angka dengan angka lainnya, gunakan operator `/`. Sebagai contoh, `20 / 4` akan menghasilkan 5.0.",
                "answer_code": "x / y"
            },
            {
                "question": "Bagaimana cara mendapatkan sisa hasil bagi dari pembagian?",
                "question_code": "x % y",
                "answer": "Gunakan operator `%` untuk mendapatkan sisa hasil bagi. Misalnya, `17 % 5` akan memberikan hasil 2.",
                "answer_code": "x % y"
            },
            {
                "question": "Bagaimana cara mengangkat angka ke pangkat tertentu?",
                "question_code": "x ** y",
                "answer": "Untuk melakukan perpangkatan, gunakan operator `**`. Contoh: `3 ** 4` menghasilkan 81, karena 3 dipangkatkan 4.",
                "answer_code": "x ** y"
            },
            {
                "question": "Apa fungsi dari operator `//` di Python?",
                "question_code": "x // y",
                "answer": "Operator `//` digunakan untuk melakukan pembagian bulat yang mengabaikan sisa. Misalnya, `13 // 4` menghasilkan 3.",
                "answer_code": "x // y"
            },
            {
                "question": "Bagaimana caranya menambahkan nilai pada variabel yang sudah ada?",
                "question_code": "x += 10",
                "answer": "Untuk menambahkan nilai pada variabel yang sudah ada, gunakan operator `+=`. Contoh: `x += 10` akan menambah nilai variabel `x` sebanyak 10.",
                "answer_code": "x += 10"
            },
            {
                "question": "Jika saya punya angka negatif, bagaimana cara membuatnya positif?",
                "question_code": "abs(-x)",
                "answer": "Gunakan fungsi `abs()` untuk mengubah angka negatif menjadi positif. Misalnya, `abs(-7)` akan menghasilkan 7.",
                "answer_code": "abs(-x)"
            }
        ]
    },
    {
        "sumber": "belajarpython.org",
        "penulis": "Rizki Maulana",
        "tanggal": "2024-02-01",
        "judul": "Penggunaan Loop While di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "loop while", "dasar"],
        "konten": "Artikel ini menjelaskan cara menggunakan loop while di Python untuk mengulangi eksekusi blok kode selama kondisi tertentu terpenuhi.",
        "pertanyaan": [
            {
                "question": "Bagaimana cara membuat loop yang terus berjalan selama kondisi masih benar?",
                "answer": "Untuk membuat loop yang berjalan selama kondisi tertentu benar, gunakan `while kondisi:`. Misalnya, `while x < 5: print(x)` akan mencetak nilai x selama x kurang dari 5."
            },
            {
                "question": "Apa yang harus dilakukan jika saya ingin menghentikan loop sebelum kondisi selesai?",
                "question_code": "counter = 0\nwhile counter < 10:\n    if counter == 7:\n        break\n    print(counter)\n    counter += 1",
                "answer": "Untuk menghentikan loop lebih awal, gunakan perintah `break`. Misalnya, jika Anda ingin menghentikan loop saat `counter` mencapai 7, gunakan `if counter == 7: break`.",
                "answer_code": "counter = 0\nwhile counter < 10:\n    if counter == 7:\n        break\n    print(counter)\n    counter += 1"
            },
            {
                "question": "Bagaimana cara melewati iterasi tertentu dalam loop dan langsung ke iterasi berikutnya?",
                "question_code": "counter = 0\nwhile counter < 10:\n    counter += 1\n    if counter % 2 == 0:\n        continue\n    print(counter)",
                "answer": "Gunakan perintah `continue` untuk melewati iterasi saat ini dan lanjut ke iterasi berikutnya. Misalnya, `if counter % 2 == 0: continue` akan melewati angka genap.",
                "answer_code": "counter = 0\nwhile counter < 10:\n    counter += 1\n    if counter % 2 == 0:\n        continue\n    print(counter)"
            },
            {
                "question": "Apa yang terjadi jika saya menulis loop dengan `while True`?",
                "question_code": "while True:\n    print('Loop ini tidak akan berhenti')",
                "answer": "Menulis `while True` akan membuat loop tak terbatas yang akan terus berjalan tanpa berhenti. Contoh: `while True: print('Loop ini tidak akan berhenti')`.",
                "answer_code": "while True:\n    print('Loop ini tidak akan berhenti')"
            },
            {
                "question": "Bagaimana cara mengubah kondisi loop while saat loop sedang berjalan?",
                "question_code": "counter = 0\nwhile counter < 5:\n    print(counter)\n    counter += 1",
                "answer": "Anda dapat mengubah kondisi loop dengan memodifikasi variabel yang digunakan dalam kondisi loop. Misalnya, `while counter < 5: print(counter); counter += 1` akan memperbarui `counter` di setiap iterasi.",
                "answer_code": "counter = 0\nwhile counter < 5:\n    print(counter)\n    counter += 1"
            },
            {
                "question": "Bisakah saya menggunakan loop while di dalam loop while lainnya?",
                "question_code": "i = 0\nwhile i < 3:\n    j = 0\n    while j < 2:\n        print(i, j)\n        j += 1\n    i += 1",
                "answer": "Ya, Anda dapat membuat loop while di dalam loop while lainnya. Contoh: `while i < 3: while j < 2:` akan membuat loop bersarang.",
                "answer_code": "i = 0\nwhile i < 3:\n    j = 0\n    while j < 2:\n        print(i, j)\n        j += 1\n    i += 1"
            },
            {
                "question": "Bagaimana cara menangani kondisi kompleks dalam loop while?",
                "question_code": "a = 0\nb = 20\nwhile a < 5 and b > 10:\n    print(a, b)\n    a += 1\n    b -= 2",
                "answer": "Anda bisa menggunakan beberapa kondisi logika dalam loop while. Misalnya, `while a < 5 and b > 10:` memungkinkan Anda untuk menetapkan beberapa kondisi untuk loop.",
                "answer_code": "a = 0\nb = 20\nwhile a < 5 and b > 10:\n    print(a, b)\n    a += 1\n    b -= 2"
            },
            {
                "question": "Apa fungsi dari pernyataan `else` setelah loop while?",
                "question_code": "i = 0\nwhile i < 3:\n    print(i)\n    i += 1\nelse:\n    print('Loop selesai')",
                "answer": "Pernyataan `else` setelah loop while akan dijalankan jika loop selesai secara normal, tanpa terhenti oleh `break`. Misalnya: `else: print('Loop selesai')`.",
                "answer_code": "i = 0\nwhile i < 3:\n    print(i)\n    i += 1\nelse:\n    print('Loop selesai')"
            },
            {
                "question": "Bagaimana cara meminta input dari pengguna selama loop while?",
                "question_code": "user_input = ''\nwhile user_input != 'quit':\n    user_input = input('Tulis sesuatu (ketik quit untuk berhenti): ')\n    print(user_input)",
                "answer": "Gunakan `input()` di dalam loop untuk meminta input dari pengguna secara berulang. Misalnya: `while user_input != 'quit': user_input = input('Tulis sesuatu (ketik quit untuk berhenti): '); print(user_input)`.",
                "answer_code": "user_input = ''\nwhile user_input != 'quit':\n    user_input = input('Tulis sesuatu (ketik quit untuk berhenti): ')\n    print(user_input)"
            }
        ]
    }
]
