[
    {
        "sumber": "AdvancedPythonTips.com",
        "penulis": "Rama Wijaya",
        "tanggal": "2024-12-15",
        "judul": "Penggunaan Decorator di Python",
        "tingkat_kesulitan": "menengah",
        "tag": ["decorator", "python", "fungsi", "programming"],
        "konten": "Artikel ini membahas konsep decorator di Python, cara mendefinisikannya, dan bagaimana menggunakannya untuk meningkatkan fungsionalitas fungsi yang ada.",
        "pertanyaan": [
            {
                "question": "Apa itu decorator dalam Python?",
                "answer": "Decorator adalah fungsi yang mengambil fungsi lain sebagai argumen dan mengembalikan fungsi yang dimodifikasi. Ini digunakan untuk menambahkan fungsionalitas tambahan ke fungsi yang ada."
            },
            {
                "question": "Bagaimana cara mendefinisikan decorator di Python?",
                "answer": "Definisikan decorator sebagai fungsi yang menerima fungsi lain sebagai argumen, lalu mengembalikan fungsi baru yang melapisi fungsionalitas asli."
            },
            {
                "question": "Apa kegunaan dari decorator @staticmethod?",
                "answer": "Decorator @staticmethod digunakan untuk mendefinisikan metode dalam kelas yang tidak bergantung pada instansi objek atau metode kelas. Metode ini dapat dipanggil langsung dari kelas tanpa memerlukan objek."
            },
            {
                "question": "Kenapa kode ini tidak berjalan?",
                "question_code": "def decorator_function(func):\n    def wrapper():\n        print('Something before')\n        func()\n    return wrapper\n\n@decorator_function\nprint('Hello World!')",
                "answer": "Error terjadi karena @decorator_function harus diterapkan pada fungsi yang dapat dipanggil, bukan langsung pada pernyataan print. Tambahkan fungsi wrapper dan panggil di dalamnya.",
                "answer_code": "def decorator_function(func):\n    def wrapper():\n        print('Something before')\n        func()\n    return wrapper\n\n@decorator_function\n def say_hello():\n     print('Hello World!')\n\nsay_hello()"
            },
            {
                "question": "Bagaimana cara menggunakan decorator untuk memantau waktu eksekusi fungsi?",
                "question_code": "import time\n\ndef timing_decorator(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f'Execution time: {end_time - start_time} seconds')\n        return result\n    return wrapper\n\n@timing_decorator\ndef example_function():\n    time.sleep(2)\n    print('Function executed')\n\nexample_function()",
                "answer": "Decorator timing_decorator ini digunakan untuk menghitung dan menampilkan waktu eksekusi dari fungsi yang dihiasinya. Ini dilakukan dengan mencatat waktu mulai dan selesai eksekusi fungsi.",
                "answer_code": "import time\n\ndef timing_decorator(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f'Execution time: {end_time - start_time} seconds')\n        return result\n    return wrapper\n\n@timing_decorator\ndef example_function():\n    time.sleep(2)\n    print('Function executed')\n\nexample_function()"
            }
        ]
    },
    {
        "sumber": "MachineLearningBasics.com",
        "penulis": "Sari Pratiwi",
        "tanggal": "2024-12-18",
        "judul": "Pengenalan ke Pembelajaran Mesin dengan Scikit-Learn",
        "tingkat_kesulitan": "menengah",
        "tag": ["scikit-learn", "machine learning", "python", "data science"],
        "konten": "Artikel ini memperkenalkan penggunaan pustaka Scikit-Learn untuk pembelajaran mesin, termasuk pembuatan model, pelatihan, dan evaluasi.",
        "pertanyaan": [
            {
                "question": "Apa itu Scikit-Learn dan bagaimana cara menggunakannya?",
                "answer": "Scikit-Learn adalah pustaka Python untuk pembelajaran mesin yang menyediakan berbagai algoritma untuk klasifikasi, regresi, dan clustering. Untuk menggunakannya, instal pustaka dengan pip dan import modul yang diperlukan dalam kode Python."
            },
            {
                "question": "Bagaimana cara membagi data menjadi set pelatihan dan set pengujian di Scikit-Learn?",
                "answer": "Gunakan fungsi train_test_split dari modul sklearn.model_selection untuk membagi data menjadi set pelatihan dan pengujian. Contoh: train_test_split(X, y, test_size=0.2)."
            },
            {
                "question": "Apa itu pipeline di Scikit-Learn dan bagaimana cara menggunakannya?",
                "answer": "Pipeline di Scikit-Learn adalah alat yang memungkinkan Anda untuk menggabungkan beberapa langkah dalam satu objek, termasuk preprocessing data dan pelatihan model. Gunakan modul sklearn.pipeline untuk membuat pipeline."
            },
            {
                "question": "Kenapa kode ini tidak berjalan?",
                "question_code": "from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(X, y)\nprint('Model trained')",
                "answer": "Error mungkin terjadi karena X dan y belum didefinisikan atau tidak memiliki dimensi yang sesuai. Pastikan X dan y didefinisikan dengan benar sebelum memanggil fit().",
                "answer_code": "from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_boston\n\n# Load data\nX, y = load_boston(return_X_y=True)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Train model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\nprint('Model trained')"
            },
            {
                "question": "Bagaimana cara mengevaluasi kinerja model di Scikit-Learn?",
                "question_code": "from sklearn.metrics import accuracy_score\n\npredictions = model.predict(X_test)\naccuracy = accuracy_score(y_test, predictions)\nprint(f'Accuracy: {accuracy}')",
                "answer": "Gunakan fungsi dari modul sklearn.metrics untuk mengevaluasi kinerja model. Misalnya, accuracy_score() digunakan untuk menghitung akurasi model klasifikasi.",
                "answer_code": "from sklearn.metrics import mean_squared_error\n\npredictions = model.predict(X_test)\nmse = mean_squared_error(y_test, predictions)\nprint(f'Mean Squared Error: {mse}')"
            }
        ]
    }
]
