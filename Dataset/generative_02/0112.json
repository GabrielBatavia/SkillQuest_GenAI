[
    {
        "sumber": "pythonuntukpemula.com",
        "penulis": "Teguh Pramono",
        "tanggal": "2023-02-14",
        "judul": "Penggunaan Operasi String di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "string", "operasi dasar"],
        "konten": "Artikel ini menjelaskan berbagai operasi dasar pada string di Python, seperti penggabungan, pengulangan, dan pemeriksaan substring.",
        "pertanyaan": [
            {
                "question": "Kalau mau gabungin dua teks gimana ya? Aku pakai str1 + str2 kok nggak bisa?",
                "answer": "Anda bisa menggabungkan dua string dengan menggunakan operator `+`. Contohnya: `str1 + str2`."
            },
            {
                "question": "Gimana caranya mengulang teks beberapa kali? Pakai str1*3 kok error?",
                "question_code": "str1*3",
                "answer": "Anda bisa mengulang string beberapa kali dengan menggunakan operator `*`. Contohnya: `str1 * 3`.",
                "answer_code": "str1 = 'Hello'\nrepeated_string = str1 * 3"
            },
            {
                "question": "Mau cek teks tertentu ada di string, pakai apa ya? Pakai str1.contains('Hello') kok nggak bisa?",
                "question_code": "str1.contains('Hello')",
                "answer": "Anda bisa memeriksa apakah substring ada dalam string dengan menggunakan operator `in`. Contohnya: `'Hello' in str1`.",
                "answer_code": "str1 = 'Hello, world'\nresult = 'Hello' in str1"
            },
            {
                "question": "Gimana cara cari posisi teks di dalam string? Pakai str1.index('world') kok error?",
                "question_code": "str1.index('world')",
                "answer": "Anda bisa menemukan posisi substring dalam string dengan menggunakan metode `find()`. Contohnya: `str1.find('world')`.",
                "answer_code": "str1 = 'Hello, world'\nposition = str1.find('world')"
            },
            {
                "question": "Kalau mau ganti teks dalam string gimana ya? Pakai str1.change('Hello', 'Hi') kok salah?",
                "question_code": "str1.change('Hello', 'Hi')",
                "answer": "Anda bisa mengganti substring dalam string dengan menggunakan metode `replace()`. Contohnya: `str1.replace('Hello', 'Hi')`.",
                "answer_code": "str1 = 'Hello, world'\nnew_string = str1.replace('Hello', 'Hi')"
            },
            {
                "question": "Bagaimana caranya pecah teks jadi daftar kata? Pakai str1.divide() kok nggak bisa?",
                "question_code": "str1.divide()",
                "answer": "Anda bisa membagi string menjadi list dengan menggunakan metode `split()`. Contohnya: `str1.split()`.",
                "answer_code": "str1 = 'Hello world'\nwords = str1.split()"
            },
            {
                "question": "Aku punya daftar kata, gimana cara gabungin jadi teks? Pakai join(words) kok error?",
                "question_code": "join(words)",
                "answer": "Anda bisa menggabungkan list menjadi string dengan menggunakan metode `join()`. Contohnya: `' '.join(['Hello', 'world'])`.",
                "answer_code": "words = ['Hello', 'world']\njoined_string = ' '.join(words)"
            },
            {
                "question": "Gimana cara ubah teks jadi huruf besar? Pakai str1.capital() kok salah?",
                "question_code": "str1.capital()",
                "answer": "Anda bisa mengubah string menjadi huruf besar dengan menggunakan metode `upper()`. Contohnya: `str1.upper()`.",
                "answer_code": "str1 = 'hello'\nupper_string = str1.upper()"
            },
            {
                "question": "Kalau mau ubah teks jadi huruf kecil gimana? Pakai str1.small() kok nggak bisa?",
                "question_code": "str1.small()",
                "answer": "Anda bisa mengubah string menjadi huruf kecil dengan menggunakan metode `lower()`. Contohnya: `str1.lower()`.",
                "answer_code": "str1 = 'HELLO'\nlower_string = str1.lower()"
            }
        ]
    },
    {
        "sumber": "belajarpemrograman.net",
        "penulis": "Dedi Setiawan",
        "tanggal": "2024-05-18",
        "judul": "Penggunaan Fungsi dan Return di Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "fungsi", "return"],
        "konten": "Artikel ini menjelaskan cara mendefinisikan fungsi di Python, cara memanggil fungsi, serta cara menggunakan pernyataan return untuk mengembalikan nilai dari fungsi.",
        "pertanyaan": [
            {
                "question": "Gimana caranya bikin fungsi di Python?",
                "answer": "Anda bisa mendefinisikan fungsi dengan menggunakan kata kunci `def` diikuti dengan nama fungsi dan tanda kurung. Contohnya: `def my_function():`."
            },
            {
                "question": "Kalau mau panggil fungsi yang udah dibuat gimana?",
                "answer": "Anda bisa memanggil fungsi dengan menulis nama fungsi diikuti dengan tanda kurung. Contohnya: `my_function()`."
            },
            {
                "question": "Gimana caranya bikin fungsi yang bisa terima input? Kok aku nggak bisa?",
                "answer": "Anda bisa mendefinisikan fungsi dengan parameter dengan menambahkan parameter di dalam tanda kurung setelah nama fungsi. Contohnya: `def my_function(param1, param2):`."
            },
            {
                "question": "Aku mau fungsi balikin nilai, gimana caranya? Kok pakai output 42 nggak bisa?",
                "question_code": "def my_function():\n    output 42",
                "answer": "Anda bisa mengembalikan nilai dari fungsi dengan menggunakan kata kunci `return`. Contohnya: `return 42`.",
                "answer_code": "def my_function():\n    return 42"
            },
            {
                "question": "Gimana bikin fungsi dengan nilai default? Aku bingung harus gimana.",
                "question_code": "def my_function(x, y):\n    y = 10\n    return x + y",
                "answer": "Anda bisa mendefinisikan fungsi dengan parameter default dengan memberikan nilai default pada parameter. Contohnya: `def my_function(x, y=10):`.",
                "answer_code": "def my_function(x, y=10):\n    return x + y"
            },
            {
                "question": "Kalau fungsi bisa terima banyak input gimana? Pakai def my_function(args*) kok salah?",
                "question_code": "def my_function(args*):\n    for arg in args:\n        print(arg)",
                "answer": "Anda bisa mendefinisikan fungsi dengan jumlah argumen tak terbatas dengan menggunakan tanda bintang `*` sebelum nama parameter. Contohnya: `def my_function(*args):`.",
                "answer_code": "def my_function(*args):\n    for arg in args:\n        print(arg)"
            },
            {
                "question": "Mau bikin fungsi yang bisa terima banyak pasangan kunci-nilai gimana? Aku pakai def my_function(kvargs**) kok error?",
                "question_code": "def my_function(kvargs**):\n    for key, value in kvargs.items():\n        print(key, value)",
                "answer": "Anda bisa mendefinisikan fungsi dengan jumlah pasangan kunci-nilai tak terbatas dengan menggunakan dua tanda bintang `**` sebelum nama parameter. Contohnya: `def my_function(**kwargs):`.",
                "answer_code": "def my_function(**kwargs):\n    for key, value in kwargs.items():\n        print(key, value)"
            },
            {
                "question": "Fungsi di dalam fungsi itu gimana? Aku nggak paham.",
                "question_code": "def outer_function():\n    def inner_function():\n        return 'Hello'\ninner_function()",
                "answer": "Anda bisa mendefinisikan fungsi dalam fungsi lain dengan menuliskan definisi fungsi di dalam fungsi lain. Contohnya: `def outer_function(): def inner_function():`.",
                "answer_code": "def outer_function():\n    def inner_function():\n        print('Hello from inner function')\n    inner_function()"
            },
            {
                "question": "Fungsi lambda itu apa sih? Gimana pakainya buat argumen?",
                "question_code": "def apply_function(x, lambda_func):\n    return lambda_func(x)\nresult = apply_function(5, lambda x: x * 2)",
                "answer": "Anda bisa menggunakan fungsi lambda sebagai argumen fungsi lain dengan mendefinisikan lambda di dalam panggilan fungsi. Contohnya: `apply_function(5, lambda x: x * 2)`.",
                "answer_code": "def apply_function(x, func):\n    return func(x)\nresult = apply_function(5, lambda x: x * 2)"
            }
        ]
    }
]
