Skenario 1: Penggunaan Decorators
User: "Apa itu decorator di Python dan bagaimana cara menggunakannya?"
AI: "Decorator adalah fungsi yang mengubah fungsi lain, dan biasanya digunakan untuk menambahkan fungsionalitas tambahan. Contohnya:

python
Copy code
def my_decorator(func):
    def wrapper():
        print("Sesuatu sebelum fungsi dipanggil.")
        func()
        print("Sesuatu setelah fungsi dipanggil.")
    return wrapper

@my_decorator
def say_hello():
    print("Hello!")

say_hello()
Kode di atas mendefinisikan decorator my_decorator yang menambahkan pesan sebelum dan sesudah fungsi say_hello dipanggil."

Skenario 2: Penggunaan Generators
User: "Apa itu generator di Python dan bagaimana cara kerjanya?"
AI: "Generator adalah fungsi yang mengembalikan iterator yang menghasilkan satu nilai pada satu waktu menggunakan kata kunci yield. Contohnya:

python
Copy code
def my_generator():
    for i in range(5):
        yield i

gen = my_generator()
for value in gen:
    print(value)
Kode di atas mendefinisikan generator my_generator yang menghasilkan nilai dari 0 hingga 4, satu per satu."

Skenario 3: Penggunaan Context Managers
User: "Apa itu context manager di Python dan bagaimana cara menggunakannya?"
AI: "Context manager digunakan untuk mengelola sumber daya, seperti file atau koneksi jaringan, memastikan mereka dibersihkan dengan benar setelah digunakan. Contohnya, menggunakan context manager untuk membuka file:

python
Copy code
with open('example.txt', 'r') as file:
    content = file.read()
    print(content)
Menggunakan with memastikan bahwa file ditutup secara otomatis setelah operasi selesai, bahkan jika terjadi error."