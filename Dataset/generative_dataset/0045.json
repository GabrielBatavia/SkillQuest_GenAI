{
    "sumber": "BelajarPython.com",
    "penulis": "Siti Rahma",
    "tanggal": "2023-01-20",
    "judul": "Memahami Pemrograman Berorientasi Objek di Python",
    "tingkat_kesulitan": "Menengah",
    "tag": ["oop", "kelas", "objek", "menengah"],
    "konten": "Artikel ini menjelaskan dasar-dasar Pemrograman Berorientasi Objek (OOP) di Python, mencakup konsep kelas, objek, pewarisan, enkapsulasi, dan polimorfisme.",
    "contoh": [
        {
            "tipe": "kode",
            "bahasa": "python",
            "isi": "class Animal:\n    def __init__(self, name):\n        self.name = name\n    def speak(self):\n        raise NotImplementedError('Subclass must implement abstract method')\n\nclass Dog(Animal):\n    def speak(self):\n        return 'Woof!'\n\nclass Cat(Animal):\n    def speak(self):\n        return 'Meow'\n\ndog = Dog('Buddy')\ncat = Cat('Kitty')\nprint(dog.name, dog.speak())\nprint(cat.name, cat.speak())",
            "komentar": "Contoh dasar pembuatan kelas dan objek, serta penerapan pewarisan dan polimorfisme"
        },
        {
            "tipe": "kode",
            "bahasa": "python",
            "isi": "class BankAccount:\n    def __init__(self, owner, balance=0):\n        self.owner = owner\n        self.balance = balance\n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n    def withdraw(self, amount):\n        if amount > self.balance:\n            return 'Insufficient funds'\n        else:\n            self.balance -= amount\n            return self.balance\n\naccount = BankAccount('Alice')\nprint(account.owner, account.balance)\nprint(account.deposit(100))\nprint(account.withdraw(50))\nprint(account.withdraw(100))",
            "komentar": "Contoh penerapan enkapsulasi pada kelas BankAccount"
        }
    ],
    "topik": [
        {
            "topik": "Kelas dan Objek",
            "deskripsi": "Konsep dasar dalam OOP dimana kelas adalah blueprint dan objek adalah instance dari kelas."
        },
        {
            "topik": "Pewarisan",
            "deskripsi": "Mekanisme untuk membuat kelas baru yang mewarisi atribut dan metode dari kelas yang ada."
        },
        {
            "topik": "Enkapsulasi",
            "deskripsi": "Prinsip OOP yang membatasi akses langsung ke data dalam sebuah objek dan menyediakan metode untuk mengakses data tersebut."
        },
        {
            "topik": "Polimorfisme",
            "deskripsi": "Kemampuan untuk menggunakan interface yang sama untuk tipe data yang berbeda."
        }
    ],
    "referensi": [
        {
            "judul": "Object Oriented Programming in Python - Real Python",
            "url": "https://realpython.com/python3-object-oriented-programming/"
        },
        {
            "judul": "Python Classes and Objects - W3Schools",
            "url": "https://www.w3schools.com/python/python_classes.asp"
        }
    ],
    "highlight": [
        "Penjelasan lengkap konsep OOP",
        "Contoh kode yang aplikatif"
    ],
    "error": [
        {
            "error": "AttributeError",
            "deskripsi": "Kesalahan saat mencoba mengakses atribut yang tidak ada.",
            "contoh": "dog.age",
            "solusi": "Pastikan atribut tersebut sudah didefinisikan dalam kelas."
        },
        {
            "error": "TypeError",
            "deskripsi": "Kesalahan saat metode atau operasi digunakan pada tipe data yang salah.",
            "contoh": "account.deposit('seratus')",
            "solusi": "Pastikan argumen yang diberikan ke metode memiliki tipe data yang sesuai."
        }
    ]
}
