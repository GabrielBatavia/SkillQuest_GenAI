[
  {
    "sumber": "realpython.com",
    "penulis": "Lucas Bell",
    "tanggal": "2026-10-20",
    "judul": "Python Decorators: Simplifying Python Functions with Decorators",
    "tingkat_kesulitan": "Menengah",
    "tag": ["Python", "Decorators", "Functions", "Intermediate"],
    "konten": "Decorators in Python allow you to modify the behavior of functions or methods...",
    "contoh": [
      {
        "tipe": "Code Example",
        "bahasa": "Python",
        "isi": "# Example of a decorator function\ndef uppercase_decorator(function):\n    def wrapper():\n        result = function().upper()\n        return result\n    return wrapper\n\n@uppercase_decorator\ndef greeting():\n    return 'hello'\n\nprint(greeting())",
        "komentar": "Defines a decorator function to convert the result of a function to uppercase."
      }
    ],
    "topik": [
      {
        "topik": "Sederhanakan Fungsi Python dengan Decorators",
        "deskripsi": "Menggunakan decorators untuk memodifikasi perilaku fungsi atau metode dalam Python."
      }
    ],
    "referensi": [
      {
        "judul": "Python Decorators Documentation",
        "url": "https://docs.python.org/3/glossary.html#term-decorator"
      }
    ],
    "highlight": ["modify the behavior of functions or methods", "Python decorator function"],
    "error": [
      {
        "error": "TypeError",
        "deskripsi": "TypeError occurred due to applying decorator to non-callable object.",
        "contoh": "@uppercase_decorator",
        "solusi": "Ensure decorators are applied to functions or methods (callable objects)."
      }
    ]
  },
  {
    "sumber": "towardsdatascience.com",
    "penulis": "Ella Adams",
    "tanggal": "2026-11-05",
    "judul": "Python Requests: Making HTTP Requests with Python Requests",
    "tingkat_kesulitan": "Menengah",
    "tag": ["Python", "Requests", "HTTP Requests", "Intermediate"],
    "konten": "Requests is a simple yet powerful library for making HTTP requests in Python...",
    "contoh": [
      {
        "tipe": "Code Example",
        "bahasa": "Python",
        "isi": "import requests\n\n# Example of making a GET request\nurl = 'https://api.example.com/data'\nresponse = requests.get(url)\nprint(response.json())",
        "komentar": "Makes a GET request using Requests and prints the JSON response."
      }
    ],
    "topik": [
      {
        "topik": "Membuat Permintaan HTTP dengan Requests dalam Python",
        "deskripsi": "Menggunakan Requests untuk membuat permintaan HTTP sederhana dan kuat dalam Python."
      }
    ],
    "referensi": [
      {
        "judul": "Requests Documentation",
        "url": "https://docs.python-requests.org/en/master/"
      }
    ],
    "highlight": ["simple yet powerful library for making HTTP requests", "Python Requests GET request"],
    "error": [
      {
        "error": "requests.exceptions.RequestException",
        "deskripsi": "requests.exceptions.RequestException occurred due to failed HTTP request.",
        "contoh": "response = requests.get('https://api.example.com/nonexistent')",
        "solusi": "Handle exceptions when making HTTP requests using Requests."
      }
    ]
  }
]
