[
    {
        "sumber": "PythonBelajarID",
        "penulis": "Anita Susanti",
        "tanggal": "2024-05-10",
        "judul": "Memahami Dasar-Dasar Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["pemula", "dasar", "python"],
        "konten": "Artikel ini menjelaskan konsep dasar pemrograman dengan Python, termasuk tipe data, operator, dan struktur kontrol dasar.",
        "contoh": [
            {
                "tipe": "kode",
                "bahasa": "python",
                "isi": "nama = 'Andi'\nusia = 25\nprint(f'Halo, {nama}. Usiamu adalah {usia} tahun.')",
                "komentar": "Contoh penggunaan variabel dan string formatting di Python."
            }
        ],
        "topik": [
            {
                "topik": "Tipe Data",
                "deskripsi": "Penjelasan tentang berbagai tipe data yang didukung oleh Python."
            },
            {
                "topik": "Operator",
                "deskripsi": "Penggunaan operator aritmatika, relasional, dan logika di Python."
            }
        ],
        "referensi": [
            {
                "judul": "Tutorial Python untuk Pemula",
                "url": "https://www.python.org/about/gettingstarted/"
            }
        ],
        "highlight": ["Mudah dipahami", "Penting untuk pemula"],
        "error": [
            {
                "error": "NameError",
                "deskripsi": "Kesalahan terjadi ketika menggunakan variabel yang belum didefinisikan.",
                "contoh": "print(usia)",
                "solusi": "Pastikan variabel sudah didefinisikan sebelum digunakan."
            }
        ]
    },
    {
        "sumber": "PythonMaju",
        "penulis": "Budi Cahyono",
        "tanggal": "2024-06-20",
        "judul": "Menggunakan Fungsi di Python",
        "tingkat_kesulitan": "Pemula hingga Menengah",
        "tag": ["fungsi", "pemrograman", "python"],
        "konten": "Artikel ini membahas tentang fungsi dalam Python, termasuk definisi fungsi, parameter, dan pengembalian nilai.",
        "contoh": [
            {
                "tipe": "kode",
                "bahasa": "python",
                "isi": "def tambah(a, b):\n    return a + b\n\nhasil = tambah(3, 5)\nprint('Hasil penjumlahan:', hasil)",
                "komentar": "Contoh penggunaan fungsi sederhana untuk menambahkan dua bilangan."
            }
        ],
        "topik": [
            {
                "topik": "Definisi Fungsi",
                "deskripsi": "Cara mendefinisikan fungsi dan cara memanggilnya di Python."
            },
            {
                "topik": "Parameter dan Pengembalian Nilai",
                "deskripsi": "Penggunaan parameter dalam fungsi dan cara mengembalikan nilai dari fungsi."
            }
        ],
        "referensi": [
            {
                "judul": "Dokumentasi Resmi Python tentang Fungsi",
                "url": "https://docs.python.org/3/tutorial/controlflow.html#defining-functions"
            }
        ],
        "highlight": ["Penting untuk struktur kode", "Mempermudah pengorganisasian kode"],
        "error": [
            {
                "error": "TypeError",
                "deskripsi": "Kesalahan tipe terjadi ketika fungsi dipanggil dengan argumen yang salah.",
                "contoh": "tambah('3', 5)",
                "solusi": "Pastikan argumen yang diberikan sesuai dengan tipe data yang diharapkan oleh fungsi."
            }
        ]
    },
    {
        "sumber": "PythonLanjut",
        "penulis": "Dewi Suryani",
        "tanggal": "2024-07-05",
        "judul": "Pemrograman Berorientasi Objek dengan Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["oop", "python", "pemrograman objek"],
        "konten": "Artikel ini membahas konsep dasar pemrograman berorientasi objek (OOP) menggunakan Python, termasuk kelas, objek, inheritance, dan polymorphism.",
        "contoh": [
            {
                "tipe": "kode",
                "bahasa": "python",
                "isi": "class Hewan:\n    def __init__(self, nama):\n        self.nama = nama\n\n    def bersuara(self):\n        raise NotImplementedError('Metode bersuara harus diimplementasikan di kelas turunan.')\n\nclass Kucing(Hewan):\n    def bersuara(self):\n        return 'Meong!'\n\nkucing = Kucing('Meongy')\nprint(kucing.bersuara())",
                "komentar": "Contoh penggunaan inheritance dan polymorphism dalam OOP Python."
            }
        ],
        "topik": [
            {
                "topik": "Kelas dan Objek",
                "deskripsi": "Penjelasan tentang konsep kelas dan objek dalam OOP Python."
            },
            {
                "topik": "Inheritance",
                "deskripsi": "Cara menggunakan inheritance untuk mewarisi perilaku dari kelas lain."
            },
            {
                "topik": "Polymorphism",
                "deskripsi": "Penggunaan polymorphism untuk memungkinkan perilaku yang berbeda dari objek dengan cara yang sama."
            }
        ],
        "referensi": [
            {
                "judul": "Tutorial OOP Python",
                "url": "https://realpython.com/python3-object-oriented-programming/"
            }
        ],
        "highlight": ["Mendalam dan kompleks", "Mengorganisir kode secara efisien"],
        "error": [
            {
                "error": "NotImplementedError",
                "deskripsi": "Kesalahan ini terjadi ketika metode abstract yang belum diimplementasikan dipanggil.",
                "contoh": "hewan = Hewan('Hewan')\nhewan.bersuara()",
                "solusi": "Pastikan semua metode abstract diimplementasikan di kelas turunan."
            }
        ]
    },
    {
        "sumber": "PythonPro",
        "penulis": "Eko Prasetyo",
        "tanggal": "2024-08-15",
        "judul": "Penggunaan Modul dan Package di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["modul", "package", "python"],
        "konten": "Artikel ini membahas cara menggunakan modul dan package di Python untuk mengorganisir dan membagi kode.",
        "contoh": [
            {
                "tipe": "kode",
                "bahasa": "python",
                "isi": "from package.submodule import fungsi\n\nhasil = fungsi(5)\nprint('Hasil:', hasil)",
                "komentar": "Contoh penggunaan import untuk mengakses fungsi dari submodule."
            }
        ],
        "topik": [
            {
                "topik": "Modul",
                "deskripsi": "Penjelasan tentang modul di Python dan cara menggunakannya."
            },
            {
                "topik": "Package",
                "deskripsi": "Cara menggunakan package untuk mengorganisir kode dalam struktur yang terstruktur."
            }
        ],
        "referensi": [
            {
                "judul": "Dokumentasi Python tentang Modul dan Package",
                "url": "https://docs.python.org/3/tutorial/modules.html"
            }
        ],
        "highlight": ["Organisasi kode yang baik", "Penggunaan ekstensif dalam pengembangan besar"],
        "error": [
            {
                "error": "ModuleNotFoundError",
                "deskripsi": "Kesalahan ini terjadi ketika Python tidak dapat menemukan modul yang diimpor.",
                "contoh": "from module import fungsi",
                "solusi": "Pastikan modul yang diimpor tersedia dalam sistem atau virtual environment yang benar."
            }
        ]
    },
    {
        "sumber": "PythonAsync",
        "penulis": "Gita Wijaya",
        "tanggal": "2024-09-20",
        "judul": "Pemrograman Asinkron dengan Asyncio",
        "tingkat_kesulitan": "Lanjutan",
        "tag": ["asyncio", "asinkron", "python"],
        "konten": "Artikel ini menjelaskan konsep pemrograman asinkron di Python menggunakan modul asyncio, termasuk coroutine, event loop, dan await.",
        "contoh": [
            {
                "tipe": "kode",
                "bahasa": "python",
                "isi": "import asyncio\n\nasync def main():\n    print('Memulai')\n    await asyncio.sleep(1)\n    print('Selesai')\n\nasyncio.run(main())",
                "komentar": "Contoh penggunaan asyncio untuk menunda eksekusi di lingkungan asinkron."
            }
        ],
        "topik": [
            {
                "topik": "Coroutine",
                "deskripsi": "Penjelasan tentang coroutine dan cara menggunakan asyncio."
            },
            {
                "topik": "Event Loop",
                "deskripsi": "Cara menggunakan event loop untuk menjalankan coroutine secara asinkron."
            }
        ],
        "referensi": [
            {
                "judul": "Dokumentasi Asyncio Python",
                "url": "https://docs.python.org/3/library/asyncio.html"
            }
        ],
        "highlight": ["Pengoptimalan kinerja", "Penting dalam pengembangan web modern"],
        "error": [
            {
                "error": "RuntimeError",
                "deskripsi": "Kesalahan ini terjadi ketika asyncio.run dipanggil lebih dari satu kali dalam satu proses.",
                "contoh": "asyncio.run(main())\nasyncio.run(main())",
                "solusi": "Pastikan asyncio.run hanya dipanggil sekali per proses."
            }
        ]
    }
]
