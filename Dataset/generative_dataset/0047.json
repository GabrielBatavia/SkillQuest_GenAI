{
    "sumber": "PythonMudah.com",
    "penulis": "Budi Santoso",
    "tanggal": "2020-09-15",
    "judul": "Memahami dan Menggunakan Generators di Python",
    "tingkat_kesulitan": "Lanjut",
    "tag": ["generator", "yield", "lanjut"],
    "konten": "Artikel ini membahas tentang konsep dan penggunaan generator di Python, termasuk cara kerja fungsi yield, kelebihan penggunaan generator dibandingkan dengan fungsi biasa, dan contoh-contoh penerapan generator dalam berbagai skenario.",
    "contoh": [
        {
            "tipe": "kode",
            "bahasa": "python",
            "isi": "def simple_generator():\n    yield 1\n    yield 2\n    yield 3\n\nfor value in simple_generator():\n    print(value)",
            "komentar": "Contoh dasar generator yang menghasilkan tiga nilai berurutan"
        },
        {
            "tipe": "kode",
            "bahasa": "python",
            "isi": "def fibonacci_sequence(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\nfor num in fibonacci_sequence(10):\n    print(num)",
            "komentar": "Contoh generator untuk menghasilkan deret Fibonacci"
        },
        {
            "tipe": "kode",
            "bahasa": "python",
            "isi": "def read_file_in_chunks(file_path, chunk_size=1024):\n    with open(file_path, 'r') as file:\n        while True:\n            chunk = file.read(chunk_size)\n            if not chunk:\n                break\n            yield chunk\n\nfor chunk in read_file_in_chunks('large_file.txt'):\n    process(chunk)",
            "komentar": "Contoh generator untuk membaca file besar dalam potongan-potongan kecil"
        }
    ],
    "topik": [
        {
            "topik": "Generator",
            "deskripsi": "Fungsi yang mengembalikan iterator yang menghasilkan serangkaian nilai."
        },
        {
            "topik": "Yield",
            "deskripsi": "Kata kunci dalam Python yang digunakan untuk menghasilkan nilai dari fungsi generator."
        },
        {
            "topik": "Keuntungan Generator",
            "deskripsi": "Generator lebih efisien dalam penggunaan memori dibandingkan dengan fungsi biasa karena menghasilkan satu nilai dalam satu waktu."
        }
    ],
    "referensi": [
        {
            "judul": "Understanding Generators in Python - Real Python",
            "url": "https://realpython.com/introduction-to-python-generators/"
        },
        {
            "judul": "Python Generators - W3Schools",
            "url": "https://www.w3schools.com/python/python_generators.asp"
        }
    ],
    "highlight": [
        "Penjelasan rinci tentang generator",
        "Contoh-contoh praktis dan aplikatif"
    ],
    "error": [
        {
            "error": "StopIteration",
            "deskripsi": "Kesalahan yang terjadi saat generator telah menghasilkan semua nilai dan dipanggil lagi.",
            "contoh": "gen = simple_generator()\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))\nprint(next(gen))",
            "solusi": "Tangani kesalahan ini dengan blok try-except atau pastikan tidak memanggil next lebih dari jumlah yield dalam generator."
        },
        {
            "error": "TypeError",
            "deskripsi": "Kesalahan saat mencoba mengiterasi objek yang bukan generator atau iterable.",
            "contoh": "for value in 1234:\n    print(value)",
            "solusi": "Pastikan objek yang diiterasi adalah generator atau iterable."
        }
    ]
}
