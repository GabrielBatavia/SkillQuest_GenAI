[
  {
    "sumber": "realpython.com",
    "penulis": "Alice Hall",
    "tanggal": "2026-10-20",
    "judul": "Python Decorators: Simplifying Python Functions with Decorators",
    "tingkat_kesulitan": "Menengah",
    "tag": ["Python", "Decorators", "Functions", "Intermediate"],
    "konten": "Decorators in Python allow you to modify the behavior of functions or methods...",
    "contoh": [
      {
        "tipe": "Code Example",
        "bahasa": "Python",
        "isi": "# Example of a decorator function\ndef uppercase_decorator(function):\n    def wrapper():\n        result = function().upper()\n        return result\n    return wrapper\n\n@uppercase_decorator\n\ndef say_hello():\n    return 'hello'\n\nprint(say_hello())",
        "komentar": "Applies a decorator to convert the result of 'say_hello' function to uppercase."
      }
    ],
    "topik": [
      {
        "topik": "Decorator dalam Python",
        "deskripsi": "Menggunakan decorator untuk memodifikasi perilaku fungsi atau metode dalam Python."
      }
    ],
    "referensi": [
      {
        "judul": "Python Decorators Documentation",
        "url": "https://docs.python.org/3/glossary.html#term-decorator"
      }
    ],
    "highlight": ["modify the behavior of functions or methods", "Python decorator example"],
    "error": [
      {
        "error": "TypeError",
        "deskripsi": "TypeError occurred due to applying decorator to non-callable object.",
        "contoh": "uppercase_decorator(123)",
        "solusi": "Ensure decorators are applied to callable objects like functions or methods."
      }
    ]
  },
  {
    "sumber": "towardsdatascience.com",
    "penulis": "Luna Wright",
    "tanggal": "2026-11-05",
    "judul": "Python Unit Testing: Writing and Running Tests with unittest",
    "tingkat_kesulitan": "Menengah",
    "tag": ["Python", "Unit Testing", "Testing", "unittest", "Intermediate"],
    "konten": "Unit testing in Python allows you to test individual units or components of your code...",
    "contoh": [
      {
        "tipe": "Code Example",
        "bahasa": "Python",
        "isi": "import unittest\n\nclass TestStringMethods(unittest.TestCase):\n    def test_upper(self):\n        self.assertEqual('hello'.upper(), 'HELLO')\n\nif __name__ == '__main__':\n    unittest.main()",
        "komentar": "Defines and runs a unit test using unittest framework in Python."
      }
    ],
    "topik": [
      {
        "topik": "Unit Testing dengan unittest dalam Python",
        "deskripsi": "Menulis dan menjalankan unit test untuk menguji unit atau komponen individu dari kode Anda menggunakan unittest dalam Python."
      }
    ],
    "referensi": [
      {
        "judul": "Python unittest Documentation",
        "url": "https://docs.python.org/3/library/unittest.html"
      }
    ],
    "highlight": ["test individual units or components of your code", "Python unittest example"],
    "error": [
      {
        "error": "AssertionError",
        "deskripsi": "AssertionError occurred due to assertion failure in unit test.",
        "contoh": "self.assertEqual(1, 2)",
        "solusi": "Ensure expected values match actual values in assertions."
      }
    ]
  }
]
