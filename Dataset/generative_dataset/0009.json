[
    {
        "sumber": "PythonUntukPemula.id",
        "penulis": "Rizki Pratama",
        "tanggal": "2024-01-10",
        "judul": "Pengenalan Python untuk Pemula",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "pemula", "dasar"],
        "konten": "Artikel ini memberikan pengantar dasar tentang Python, mencakup instalasi, sintaks dasar, dan menjalankan skrip pertama.",
        "contoh": [
            {
                "tipe": "code",
                "bahasa": "python",
                "isi": "print('Halo, Dunia!')",
                "komentar": "Contoh kode untuk mencetak teks 'Halo, Dunia!' ke layar."
            }
        ],
        "topik": [
            {
                "topik": "Instalasi Python",
                "deskripsi": "Langkah-langkah instalasi Python di berbagai sistem operasi."
            },
            {
                "topik": "Sintaks Dasar",
                "deskripsi": "Penjelasan tentang sintaks dasar dalam Python."
            }
        ],
        "referensi": [
            {
                "judul": "Dokumentasi Resmi Python",
                "url": "https://docs.python.org/3/tutorial/index.html"
            }
        ],
        "highlight": ["Sintaks mudah dipahami", "Bahasa pemrograman yang populer"],
        "error": [
            {
                "error": "SyntaxError",
                "deskripsi": "Kesalahan sintaks yang terjadi saat kode tidak ditulis sesuai aturan bahasa Python.",
                "contoh": "print 'Halo, Dunia!'",
                "solusi": "Gunakan tanda kurung: print('Halo, Dunia!')"
            }
        ]
    },
    {
        "sumber": "KodePython.com",
        "penulis": "Dewi Lestari",
        "tanggal": "2024-02-15",
        "judul": "Pemrograman Berorientasi Objek di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "OOP", "kelas"],
        "konten": "Artikel ini menjelaskan konsep dasar Pemrograman Berorientasi Objek (OOP) di Python, termasuk kelas, objek, pewarisan, dan enkapsulasi.",
        "contoh": [
            {
                "tipe": "code",
                "bahasa": "python",
                "isi": "class Hewan:\n    def __init__(self, nama):\n        self.nama = nama\n\n    def suara(self):\n        pass\n\nclass Kucing(Hewan):\n    def suara(self):\n        return 'Meow'",
                "komentar": "Contoh kelas dan pewarisan dalam Python."
            }
        ],
        "topik": [
            {
                "topik": "Kelas dan Objek",
                "deskripsi": "Cara membuat dan menggunakan kelas dan objek di Python."
            },
            {
                "topik": "Pewarisan",
                "deskripsi": "Cara mewariskan sifat dari satu kelas ke kelas lain."
            }
        ],
        "referensi": [
            {
                "judul": "OOP di Python",
                "url": "https://realpython.com/python3-object-oriented-programming/"
            }
        ],
        "highlight": ["Struktur kode yang rapi", "Mendukung pemrograman skala besar"],
        "error": [
            {
                "error": "AttributeError",
                "deskripsi": "Kesalahan saat mencoba mengakses atribut yang tidak ada pada objek.",
                "contoh": "hewan = Hewan('Anjing')\nprint(hewan.umur)",
                "solusi": "Pastikan atribut yang diakses sudah didefinisikan di dalam kelas."
            }
        ]
    },
    {
        "sumber": "BelajarPython.id",
        "penulis": "Andi Wijaya",
        "tanggal": "2024-03-20",
        "judul": "Fungsi di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "fungsi", "menengah"],
        "konten": "Artikel ini membahas tentang fungsi di Python, termasuk definisi, parameter, nilai kembalian, dan fungsi lambda.",
        "contoh": [
            {
                "tipe": "code",
                "bahasa": "python",
                "isi": "def tambah(a, b):\n    return a + b\n\nhasil = tambah(3, 4)\nprint(hasil)",
                "komentar": "Contoh fungsi sederhana untuk menambahkan dua angka."
            }
        ],
        "topik": [
            {
                "topik": "Definisi Fungsi",
                "deskripsi": "Cara mendefinisikan dan memanggil fungsi di Python."
            },
            {
                "topik": "Fungsi Lambda",
                "deskripsi": "Cara menggunakan fungsi lambda untuk operasi sederhana."
            }
        ],
        "referensi": [
            {
                "judul": "Fungsi di Python",
                "url": "https://www.learnpython.org/en/Functions"
            }
        ],
        "highlight": ["Kode yang reusable", "Struktur program lebih modular"],
        "error": [
            {
                "error": "TypeError",
                "deskripsi": "Kesalahan ketika argumen yang diberikan tidak sesuai dengan parameter fungsi.",
                "contoh": "tambah(3)",
                "solusi": "Pastikan semua parameter yang diperlukan diberikan nilai: tambah(3, 4)"
            }
        ]
    },
    {
        "sumber": "PyTech.com",
        "penulis": "Putri Hasanah",
        "tanggal": "2024-04-25",
        "judul": "Menggunakan Modul dan Pustaka Eksternal di Python",
        "tingkat_kesulitan": "Lanjutan",
        "tag": ["python", "modul", "lanjutan"],
        "konten": "Artikel ini menjelaskan cara menggunakan modul dan pustaka eksternal di Python, termasuk cara instalasi dan impor modul.",
        "contoh": [
            {
                "tipe": "code",
                "bahasa": "python",
                "isi": "import requests\n\nresponse = requests.get('https://api.example.com/data')\nprint(response.json())",
                "komentar": "Contoh penggunaan pustaka requests untuk melakukan permintaan HTTP."
            }
        ],
        "topik": [
            {
                "topik": "Modul Bawaan",
                "deskripsi": "Cara menggunakan modul-modul bawaan yang tersedia di Python."
            },
            {
                "topik": "Instalasi Pustaka",
                "deskripsi": "Cara menginstal pustaka eksternal menggunakan pip."
            }
        ],
        "referensi": [
            {
                "judul": "Daftar Modul Python",
                "url": "https://docs.python.org/3/py-modindex.html"
            }
        ],
        "highlight": ["Menggunakan pustaka pihak ketiga", "Memperluas fungsionalitas Python"],
        "error": [
            {
                "error": "ModuleNotFoundError",
                "deskripsi": "Kesalahan saat modul yang diimpor tidak ditemukan.",
                "contoh": "import modul_tidak_ada",
                "solusi": "Pastikan modul sudah diinstal dan nama modul benar."
            }
        ]
    },
    {
        "sumber": "PythonAsinkron.com",
        "penulis": "Ahmad Fauzi",
        "tanggal": "2024-05-30",
        "judul": "Pemrograman Asinkron dengan Python",
        "tingkat_kesulitan": "Lanjutan",
        "tag": ["python", "asinkron", "lanjutan"],
        "konten": "Artikel ini menjelaskan pemrograman asinkron di Python menggunakan async dan await, serta contoh penggunaannya.",
        "contoh": [
            {
                "tipe": "code",
                "bahasa": "python",
                "isi": "import asyncio\n\nasync def salam():\n    print('Selamat Pagi')\n    await asyncio.sleep(1)\n    print('Selamat Siang')\n\nasyncio.run(salam())",
                "komentar": "Contoh fungsi asinkron sederhana dengan async dan await."
            }
        ],
        "topik": [
            {
                "topik": "Async dan Await",
                "deskripsi": "Konsep dasar dan penggunaan async dan await di Python."
            },
            {
                "topik": "Event Loop",
                "deskripsi": "Cara kerja event loop dalam pemrograman asinkron."
            }
        ],
        "referensi": [
            {
                "judul": "Pemrograman Asinkron di Python",
                "url": "https://realpython.com/async-io-python/"
            }
        ],
        "highlight": ["Mengoptimalkan performa I/O", "Cocok untuk aplikasi jaringan"],
        "error": [
            {
                "error": "RuntimeError",
                "deskripsi": "Kesalahan saat loop event sedang berjalan dan ada usaha untuk menjalankan loop lain.",
                "contoh": "asyncio.run(salam()) dalam fungsi lain yang sudah menjalankan event loop.",
                "solusi": "Gunakan asyncio.create_task() atau pastikan tidak ada event loop lain yang berjalan."
            }
        ]
    }
]
