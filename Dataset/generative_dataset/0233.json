[
  {
    "sumber": "realpython.com",
    "penulis": "Ethan Garcia",
    "tanggal": "2026-11-05",
    "judul": "Python Decorators: Understanding and Using Decorators in Python",
    "tingkat_kesulitan": "Menengah",
    "tag": ["Python", "Decorators", "Intermediate"],
    "konten": "Decorators in Python allow you to modify or enhance functions or methods without changing their definition...",
    "contoh": [
      {
        "tipe": "Code Example",
        "bahasa": "Python",
        "isi": "# Example of defining and using a decorator\nimport functools\n\ndef my_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print('Before function execution')\n        result = func(*args, **kwargs)\n        print('After function execution')\n        return result\n    return wrapper\n\n@my_decorator\ndef example_function():\n    print('Executing example function')\n\nexample_function()",
        "komentar": "Defines and uses a decorator to modify the behavior of a function."
      }
    ],
    "topik": [
      {
        "topik": "Decorators dalam Python",
        "deskripsi": "Menggunakan decorators untuk memodifikasi atau meningkatkan fungsi atau metode tanpa mengubah definisi mereka."
      }
    ],
    "referensi": [
      {
        "judul": "Python Decorators Documentation",
        "url": "https://docs.python.org/3/glossary.html#term-decorator"
      }
    ],
    "highlight": ["modify or enhance functions or methods", "Python decorators"],
    "error": [
      {
        "error": "TypeError",
        "deskripsi": "TypeError occurred due to applying a decorator to a non-function object.",
        "contoh": "@my_decorator\nx = 10",
        "solusi": "Ensure decorators are applied only to functions or methods."
      }
    ]
  },
  {
    "sumber": "towardsdatascience.com",
    "penulis": "Oscar Evans",
    "tanggal": "2026-11-20",
    "judul": "Python Pandas: Advanced Data Analysis Techniques with Pandas",
    "tingkat_kesulitan": "Lanjutan",
    "tag": ["Python", "Pandas", "Data Analysis", "Advanced"],
    "konten": "Pandas offers advanced data analysis capabilities including handling missing data, merging datasets, and more...",
    "contoh": [
      {
        "tipe": "Code Example",
        "bahasa": "Python",
        "isi": "import pandas as pd\n\n# Example of handling missing data\ndata = {'A': [1, 2, None], 'B': [None, 4, 5]}\ndf = pd.DataFrame(data)\nfilled_df = df.fillna(0)\nprint(filled_df)",
        "komentar": "Handles missing data by filling NaN values with zeros."
      }
    ],
    "topik": [
      {
        "topik": "Teknik Analisis Data Lanjutan dengan Pandas dalam Python",
        "deskripsi": "Menggunakan Pandas untuk analisis data lanjutan termasuk penanganan data yang hilang, penggabungan dataset, dan lainnya."
      }
    ],
    "referensi": [
      {
        "judul": "Pandas Documentation",
        "url": "https://pandas.pydata.org/pandas-docs/stable/index.html"
      }
    ],
    "highlight": ["advanced data analysis capabilities", "Pandas handling missing data"],
    "error": [
      {
        "error": "KeyError",
        "deskripsi": "KeyError occurred due to accessing non-existent column in DataFrame.",
        "contoh": "print(df['C'])",
        "solusi": "Ensure the column 'C' exists in the DataFrame before accessing it."
      }
    ]
  }
]
