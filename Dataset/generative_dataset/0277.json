[
  {
    "sumber": "Real Python",
    "penulis": "Sari Wijaya",
    "tanggal": "2023-01-15",
    "judul": "Menggunakan asyncio untuk Pemrograman Berbasis Kejadian di Python",
    "tingkat_kesulitan": "Mahir",
    "tag": ["Python", "Asyncio", "Concurrency"],
    "konten": "Asyncio adalah library Python yang digunakan untuk pemrograman berbasis kejadian dan asynchronous. Artikel ini membahas penggunaan coroutine dan event loop dalam asyncio.",
    "contoh": [
      {
        "tipe": "Contoh Kode",
        "bahasa": "Python",
        "isi": "import asyncio\n# Membuat coroutine\nasync def main():\n    print('Hello')\n# Menjalankan event loop\nasyncio.run(main())",
        "komentar": "Contoh penggunaan asyncio untuk pemrograman asynchronous dalam Python."
      }
    ],
    "topik": [
      {
        "topik": "Asyncio",
        "deskripsi": "Penggunaan asyncio untuk pemrograman asynchronous dan concurrency dalam Python."
      },
      {
        "topik": "Concurrency",
        "deskripsi": "Teknik-teknik concurrency dan pemrograman berbasis kejadian dalam Python."
      }
    ],
    "referensi": [
      {
        "judul": "Asyncio Documentation",
        "url": "https://docs.python.org/id/3/library/asyncio.html"
      }
    ],
    "highlight": ["Asyncio", "Concurrency", "Coroutine"],
    "error": []
  },
  {
    "sumber": "Stack Abuse",
    "penulis": "Budi Susanto",
    "tanggal": "2022-12-20",
    "judul": "Menggunakan Flask-SQLAlchemy untuk Interaksi Database di Flask",
    "tingkat_kesulitan": "Menengah",
    "tag": ["Python", "Flask", "SQLAlchemy", "Database"],
    "konten": "Flask-SQLAlchemy adalah ekstensi Flask yang menyediakan integrasi mudah antara Flask dan SQLAlchemy untuk interaksi dengan database. Artikel ini membahas cara membuat model, melakukan query, dan migrasi database.",
    "contoh": [
      {
        "tipe": "Contoh Kode",
        "bahasa": "Python",
        "isi": "from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///example.db'\ndb = SQLAlchemy(app)\n\n# Model data\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n\n    def __repr__(self):\n        return '<User %r>' % self.username",
        "komentar": "Contoh penggunaan Flask-SQLAlchemy untuk interaksi dengan database dalam Flask."
      }
    ],
    "topik": [
      {
        "topik": "Flask-SQLAlchemy",
        "deskripsi": "Penggunaan Flask-SQLAlchemy untuk integrasi Flask dengan SQLAlchemy dalam aplikasi web Python."
      },
      {
        "topik": "Database",
        "deskripsi": "Interaksi dengan database menggunakan Flask dan SQLAlchemy dalam aplikasi Python."
      }
    ],
    "referensi": [
      {
        "judul": "Flask-SQLAlchemy Documentation",
        "url": "https://flask-sqlalchemy.palletsprojects.com/en/3.x/"
      }
    ],
    "highlight": ["Flask-SQLAlchemy", "Database", "ORM"],
    "error": []
  }
]
