{
    "sumber": "pythonexpert.com",
    "penulis": "Andi Firmansyah",
    "tanggal": "2024-04-22",
    "judul": "Pemrograman OOP di Python: Class dan Inheritance",
    "tingkat_kesulitan": "Lanjutan",
    "tag": ["Python", "OOP", "Class", "Inheritance", "Lanjutan"],
    "konten": "Artikel ini membahas konsep Pemrograman Berorientasi Objek (OOP) di Python, termasuk cara membuat class, mengimplementasikan inheritance, dan memanfaatkan polymorphism.",
    "contoh": [
        {
            "tipe": "Kode",
            "bahasa": "Python",
            "isi": "class Hewan:\n    def __init__(self, nama):\n        self.nama = nama\n\n    def bersuara(self):\n        pass\n\nclass Anjing(Hewan):\n    def bersuara(self):\n        return 'Guk guk'\n\nclass Kucing(Hewan):\n    def bersuara(self):\n        return 'Meong'\n\nhewan1 = Anjing('Buddy')\nhewan2 = Kucing('Mimi')\n\nprint(hewan1.nama + ' berbunyi: ' + hewan1.bersuara())\nprint(hewan2.nama + ' berbunyi: ' + hewan2.bersuara())",
            "komentar": "Contoh penggunaan inheritance dan polymorphism pada class Hewan."
        },
        {
            "tipe": "Kode",
            "bahasa": "Python",
            "isi": "class Kendaraan:\n    def __init__(self, merk, model):\n        self.merk = merk\n        self.model = model\n\n    def info(self):\n        return f'{self.merk} {self.model}'\n\nclass Mobil(Kendaraan):\n    def __init__(self, merk, model, pintu):\n        super().__init__(merk, model)\n        self.pintu = pintu\n\n    def info(self):\n        return f'{self.merk} {self.model} dengan {self.pintu} pintu'\n\nmobil1 = Mobil('Toyota', 'Camry', 4)\nprint(mobil1.info())",
            "komentar": "Penggunaan super() untuk mewarisi atribut dari superclass Kendaraan."
        }
    ],
    "topik": [
        {
            "topik": "Class",
            "deskripsi": "Cara mendefinisikan class dan membuat instance dari class tersebut."
        },
        {
            "topik": "Inheritance",
            "deskripsi": "Cara menggunakan inheritance untuk mewarisi sifat dari class lain."
        },
        {
            "topik": "Polymorphism",
            "deskripsi": "Cara memanfaatkan polymorphism untuk menggunakan metode yang sama pada class yang berbeda."
        }
    ],
    "referensi": [
        {
            "judul": "Object-Oriented Programming di Python",
            "url": "https://realpython.com/python3-object-oriented-programming/"
        },
        {
            "judul": "Inheritance dan Polymorphism di Python",
            "url": "https://docs.python.org/3/tutorial/classes.html"
        }
    ],
    "highlight": ["Pembuatan class", "Penerapan inheritance", "Penggunaan polymorphism"],
    "error": [
        {
            "error": "AttributeError",
            "deskripsi": "Kesalahan saat mengakses atribut yang tidak ada pada class.",
            "contoh": "hewan1.umur",
            "solusi": "Pastikan atribut yang diakses sudah didefinisikan dalam class."
        },
        {
            "error": "TypeError",
            "deskripsi": "Kesalahan saat memanggil superclass tanpa parameter yang diperlukan.",
            "contoh": "super().__init__()",
            "solusi": "Pastikan semua parameter yang diperlukan oleh superclass disertakan dalam pemanggilan super()."
        }
    ]
}
