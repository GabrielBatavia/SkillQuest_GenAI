{
    "sumber": "PythonID.org",
    "penulis": "Rina Anggraini",
    "tanggal": "2021-06-15",
    "judul": "Mengoptimalkan Kinerja dengan Pemahaman tentang Decorators di Python",
    "tingkat_kesulitan": "Lanjut",
    "tag": ["decorator", "fungsi", "lanjut"],
    "konten": "Artikel ini mengulas tentang penggunaan decorators di Python untuk meningkatkan kinerja dan fungsionalitas kode. Decorators memungkinkan modifikasi fungsi atau metode kelas tanpa mengubah definisi aslinya.",
    "contoh": [
        {
            "tipe": "kode",
            "bahasa": "python",
            "isi": "def my_decorator(func):\n    def wrapper(*args, **kwargs):\n        print('Something is happening before the function is called.')\n        result = func(*args, **kwargs)\n        print('Something is happening after the function is called.')\n        return result\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print('Hello!')\n\nsay_hello()",
            "komentar": "Contoh penggunaan decorator sederhana yang menambahkan perilaku sebelum dan sesudah fungsi asli dipanggil"
        },
        {
            "tipe": "kode",
            "bahasa": "python",
            "isi": "def repeat(num_times):\n    def decorator_repeat(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(num_times):\n                result = func(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator_repeat\n\n@repeat(num_times=3)\ndef greet(name):\n    print(f'Hello {name}')\n\ngreet('World')",
            "komentar": "Contoh decorator yang memungkinkan fungsi untuk dipanggil beberapa kali"
        },
        {
            "tipe": "kode",
            "bahasa": "python",
            "isi": "from time import time\n\ndef timer(func):\n    def wrapper(*args, **kwargs):\n        start_time = time()\n        result = func(*args, **kwargs)\n        end_time = time()\n        print(f'Function {func.__name__} took {end_time - start_time} seconds to complete')\n        return result\n    return wrapper\n\n@timer\ndef compute_square_sum(limit):\n    return sum([i**2 for i in range(limit)])\n\nprint(compute_square_sum(1000000))",
            "komentar": "Contoh penggunaan decorator untuk menghitung waktu eksekusi fungsi"
        }
    ],
    "topik": [
        {
            "topik": "Decorators",
            "deskripsi": "Fungsi yang mengubah fungsi atau metode lain, menambahkan fungsionalitas tambahan tanpa mengubah definisi asli."
        },
        {
            "topik": "Wrapper",
            "deskripsi": "Fungsi dalam decorator yang memanggil fungsi asli dan menambahkan kode sebelum atau sesudahnya."
        },
        {
            "topik": "Penggunaan Praktis",
            "deskripsi": "Contoh-contoh praktis penggunaan decorators untuk pengulangan fungsi, pengukuran waktu, dan logging."
        }
    ],
    "referensi": [
        {
            "judul": "Understanding Python Decorators - Real Python",
            "url": "https://realpython.com/primer-on-python-decorators/"
        },
        {
            "judul": "Python Decorators - W3Schools",
            "url": "https://www.w3schools.com/python/python_decorators.asp"
        }
    ],
    "highlight": [
        "Memperjelas penggunaan decorators",
        "Contoh-contoh praktis dan aplikatif"
    ],
    "error": [
        {
            "error": "TypeError",
            "deskripsi": "Kesalahan yang terjadi saat decorator tidak diaplikasikan dengan benar.",
            "contoh": "@my_decorator\nsay_hello()",
            "solusi": "Pastikan decorator didefinisikan dan digunakan dengan benar."
        },
        {
            "error": "AttributeError",
            "deskripsi": "Kesalahan yang terjadi saat mencoba mengakses atribut yang tidak ada dalam fungsi asli.",
            "contoh": "print(wrapper.__name__)",
            "solusi": "Gunakan functools.wraps untuk menjaga metadata fungsi asli dalam wrapper."
        }
    ]
}
