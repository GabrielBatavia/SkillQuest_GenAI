[
    {
        "sumber": "BelajarPython.com",
        "penulis": "Andi Kurniawan",
        "tanggal": "2024-07-01",
        "judul": "Dasar-dasar Python untuk Pemula",
        "tingkat_kesulitan": "Pemula",
        "tag": ["python", "pemula", "dasar"],
        "konten": "Artikel ini membahas dasar-dasar bahasa pemrograman Python, termasuk sintaks dasar, variabel, dan tipe data.",
        "contoh": [
            {
                "tipe": "code",
                "bahasa": "python",
                "isi": "print('Halo, Dunia!')",
                "komentar": "Contoh kode untuk mencetak teks ke layar."
            }
        ],
        "topik": [
            {
                "topik": "Variabel",
                "deskripsi": "Cara mendeklarasikan dan menggunakan variabel di Python."
            },
            {
                "topik": "Tipe Data",
                "deskripsi": "Jenis-jenis tipe data yang tersedia di Python."
            }
        ],
        "referensi": [
            {
                "judul": "Dokumentasi Resmi Python",
                "url": "https://docs.python.org/3/tutorial/index.html"
            }
        ],
        "highlight": ["Sintaks sederhana", "Bahasa pemrograman yang populer"],
        "error": [
            {
                "error": "SyntaxError",
                "deskripsi": "Terjadi ketika kode tidak sesuai dengan aturan sintaks Python.",
                "contoh": "print 'Halo, Dunia!'",
                "solusi": "Pastikan menggunakan tanda kurung: print('Halo, Dunia!')"
            }
        ]
    },
    {
        "sumber": "PythonKu.net",
        "penulis": "Budi Santoso",
        "tanggal": "2024-07-05",
        "judul": "Pemrograman Berorientasi Objek dengan Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "OOP", "menengah"],
        "konten": "Artikel ini menjelaskan konsep dasar Pemrograman Berorientasi Objek (OOP) di Python, seperti kelas dan objek.",
        "contoh": [
            {
                "tipe": "code",
                "bahasa": "python",
                "isi": "class Mobil:\n    def __init__(self, merk, model):\n        self.merk = merk\n        self.model = model\n\n    def info(self):\n        return f'{self.merk} {self.model}'",
                "komentar": "Contoh kelas sederhana dengan konstruktor dan metode."
            }
        ],
        "topik": [
            {
                "topik": "Kelas dan Objek",
                "deskripsi": "Cara membuat dan menggunakan kelas dan objek di Python."
            },
            {
                "topik": "Metode",
                "deskripsi": "Fungsi-fungsi yang didefinisikan di dalam kelas."
            }
        ],
        "referensi": [
            {
                "judul": "Belajar OOP di Python",
                "url": "https://realpython.com/python3-object-oriented-programming/"
            }
        ],
        "highlight": ["Mendukung OOP", "Memudahkan pengelompokan kode"],
        "error": [
            {
                "error": "AttributeError",
                "deskripsi": "Terjadi ketika mencoba mengakses atribut yang tidak ada pada objek.",
                "contoh": "mobil = Mobil('Toyota', 'Avanza')\nprint(mobil.warna)",
                "solusi": "Pastikan atribut yang diakses sudah didefinisikan di dalam kelas."
            }
        ]
    },
    {
        "sumber": "CodePython.id",
        "penulis": "Citra Dewi",
        "tanggal": "2024-07-10",
        "judul": "Pemahaman Fungsi di Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["python", "fungsi", "menengah"],
        "konten": "Artikel ini menjelaskan cara mendefinisikan dan menggunakan fungsi di Python, termasuk parameter dan nilai kembalian.",
        "contoh": [
            {
                "tipe": "code",
                "bahasa": "python",
                "isi": "def luas_persegi(sisi):\n    return sisi * sisi",
                "komentar": "Contoh fungsi sederhana untuk menghitung luas persegi."
            }
        ],
        "topik": [
            {
                "topik": "Fungsi",
                "deskripsi": "Cara mendefinisikan dan memanggil fungsi di Python."
            },
            {
                "topik": "Parameter dan Argumen",
                "deskripsi": "Cara menggunakan parameter dan mengirim argumen ke fungsi."
            }
        ],
        "referensi": [
            {
                "judul": "Panduan Lengkap Fungsi di Python",
                "url": "https://www.w3schools.com/python/python_functions.asp"
            }
        ],
        "highlight": ["Reusable code", "Struktur kode yang lebih rapi"],
        "error": [
            {
                "error": "TypeError",
                "deskripsi": "Terjadi ketika jumlah atau tipe argumen yang diberikan tidak sesuai dengan definisi fungsi.",
                "contoh": "luas_persegi()",
                "solusi": "Pastikan memberikan argumen yang sesuai: luas_persegi(4)"
            }
        ]
    },
    {
        "sumber": "PythonLovers.com",
        "penulis": "Dewi Anggraini",
        "tanggal": "2024-07-15",
        "judul": "Menggunakan Modul dan Pustaka di Python",
        "tingkat_kesulitan": "Lanjutan",
        "tag": ["python", "modul", "pustaka", "lanjutan"],
        "konten": "Artikel ini menjelaskan cara menggunakan modul dan pustaka eksternal di Python, termasuk instalasi dan import modul.",
        "contoh": [
            {
                "tipe": "code",
                "bahasa": "python",
                "isi": "import math\nprint(math.sqrt(16))",
                "komentar": "Contoh penggunaan modul math untuk menghitung akar kuadrat."
            }
        ],
        "topik": [
            {
                "topik": "Modul Bawaan",
                "deskripsi": "Cara menggunakan modul-modul yang sudah tersedia di Python."
            },
            {
                "topik": "Instalasi Pustaka",
                "deskripsi": "Cara menginstal pustaka eksternal menggunakan pip."
            }
        ],
        "referensi": [
            {
                "judul": "Daftar Modul Bawaan Python",
                "url": "https://docs.python.org/3/py-modindex.html"
            }
        ],
        "highlight": ["Memperluas fungsi Python", "Banyak pustaka tersedia"],
        "error": [
            {
                "error": "ModuleNotFoundError",
                "deskripsi": "Terjadi ketika modul yang diimport tidak ditemukan.",
                "contoh": "import tidak_ada",
                "solusi": "Pastikan modul sudah terinstal dan nama modul benar."
            }
        ]
    },
    {
        "sumber": "PythonExpert.com",
        "penulis": "Eko Prasetyo",
        "tanggal": "2024-07-20",
        "judul": "Pemrograman Asinkron di Python",
        "tingkat_kesulitan": "Lanjutan",
        "tag": ["python", "asinkron", "lanjutan"],
        "konten": "Artikel ini membahas pemrograman asinkron di Python menggunakan async dan await, serta contoh penggunaannya.",
        "contoh": [
            {
                "tipe": "code",
                "bahasa": "python",
                "isi": "import asyncio\n\nasync def hello():\n    print('Hello ...')\n    await asyncio.sleep(1)\n    print('... World!')\n\nasyncio.run(hello())",
                "komentar": "Contoh fungsi asinkron sederhana dengan async dan await."
            }
        ],
        "topik": [
            {
                "topik": "Async dan Await",
                "deskripsi": "Konsep dasar dan penggunaan async dan await di Python."
            },
            {
                "topik": "Event Loop",
                "deskripsi": "Cara kerja event loop dalam pemrograman asinkron."
            }
        ],
        "referensi": [
            {
                "judul": "Pemrograman Asinkron di Python",
                "url": "https://realpython.com/async-io-python/"
            }
        ],
        "highlight": ["Mengoptimalkan performa", "Menangani I/O secara efisien"],
        "error": [
            {
                "error": "RuntimeError",
                "deskripsi": "Terjadi ketika loop event sedang berjalan dan ada usaha untuk menjalankan loop lain.",
                "contoh": "asyncio.run(hello()) dalam fungsi lain yang sudah berjalan event loop.",
                "solusi": "Gunakan asyncio.create_task() atau pastikan tidak ada event loop lain yang berjalan."
            }
        ]
    }
]
