{
    "sumber": "Real Python",
    "penulis": "Sally Programmer",
    "tanggal": "2023-05-10",
    "judul": "Understanding Python Decorators",
    "tingkat_kesulitan": "Menengah",
    "tag": ["Python", "Decorator", "Fungsi"],
    "konten": "Decorators adalah fitur yang kuat dalam Python yang memungkinkan kita untuk mengubah atau memperluas perilaku fungsi atau metode tanpa mengubah kode mereka secara langsung.",
    "contoh": [
        {
            "tipe": "Decorator",
            "bahasa": "Python",
            "isi": "@my_decorator\n    def my_function():\n    print('Hello')",
            "komentar": "Contoh penggunaan decorator dalam Python"
        }
    ],
    "topik": [
        {
            "topik": "Decorators",
            "deskripsi": "Decorators adalah fungsi Python yang mengubah fungsi lain atau method."
        }
    ],
    "referensi": [
        {
            "judul": "Python Decorators",
            "url": "https://realpython.com/primer-on-python-decorators/"
        }
    ],
    "highlight": ["Decorators", "Memperluas perilaku fungsi"],
    "error": [
        {
            "error": "TypeError",
            "deskripsi": "Kesalahan yang terjadi ketika jenis argumen yang diberikan kepada fungsi tidak sesuai dengan yang diharapkan.",
            "contoh": "def add_numbers(a, b):\n    return a + b\nadd_numbers('1', 2)",
            "solusi": "Pastikan argumen yang diberikan sesuai dengan tipe yang diharapkan oleh fungsi."
        }
    ]
}