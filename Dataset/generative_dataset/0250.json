[
  {
    "sumber": "towardsdatascience.com",
    "penulis": "Reagan Mills",
    "tanggal": "2028-03-20",
    "judul": "Python Web Development: Introduction to Flask",
    "tingkat_kesulitan": "Menengah",
    "tag": ["Python", "Web Development", "Flask", "Intermediate"],
    "konten": "Flask is a lightweight and versatile web framework for Python. It allows you to build web applications quickly and efficiently...",
    "contoh": [
      {
        "tipe": "Code Example",
        "bahasa": "Python",
        "isi": "# Example of creating a simple Flask web application\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run(debug=True)",
        "komentar": "Creates a simple web application using Flask."
      }
    ],
    "topik": [
      {
        "topik": "Pengantar Flask dalam Pengembangan Web Python",
        "deskripsi": "Menggunakan Flask untuk membangun aplikasi web dengan cepat dan efisien."
      }
    ],
    "referensi": [
      {
        "judul": "Flask Documentation",
        "url": "https://flask.palletsprojects.com/en/2.0.x/"
      }
    ],
    "highlight": ["lightweight and versatile web framework", "Flask for web application development in Python"],
    "error": [
      {
        "error": "RuntimeError",
        "deskripsi": "RuntimeError occurred due to modifying Flask objects in an active request.",
        "contoh": "app.route('/modify')\ndef modify_data():\n    # Modifies Flask objects during an active request",
        "solusi": "Avoid modifying Flask objects during active requests to prevent runtime errors."
      }
    ]
  },
  {
    "sumber": "realpython.com",
    "penulis": "Skyler Clarke",
    "tanggal": "2028-04-05",
    "judul": "Python Decorators: Introduction to Function Decorators in Python",
    "tingkat_kesulitan": "Menengah",
    "tag": ["Python", "Decorators", "Function Decorators", "Intermediate"],
    "konten": "Decorators in Python allow you to extend and modify the behavior of functions or methods without permanently modifying the function itself...",
    "contoh": [
      {
        "tipe": "Code Example",
        "bahasa": "Python",
        "isi": "# Example of defining and using a function decorator\ndef uppercase_decorator(function):\n    def wrapper():\n        result = function().upper()\n        return result\n    return wrapper\n\n@uppercase_decorator\n\ndef greet():\n    return 'hello'\n\nprint(greet())",
        "komentar": "Defines and uses a function decorator in Python."
      }
    ],
    "topik": [
      {
        "topik": "Pengantar Decorators dalam Python",
        "deskripsi": "Menggunakan decorators untuk memperluas dan memodifikasi perilaku fungsi atau metode tanpa memodifikasi fungsi itu sendiri secara permanen."
      }
    ],
    "referensi": [
      {
        "judul": "Python Decorators Documentation",
        "url": "https://docs.python.org/3/glossary.html#term-decorator"
      }
    ],
    "highlight": ["extend and modify function behavior", "Python function decorators"],
    "error": [
      {
        "error": "TypeError",
        "deskripsi": "TypeError occurred due to using decorators with incompatible types.",
        "contoh": "@uppercase_decorator\n42",
        "solusi": "Ensure decorators are applied to functions or methods with compatible types."
      }
    ]
  }
]
