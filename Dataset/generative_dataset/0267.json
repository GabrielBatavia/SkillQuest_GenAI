[
  {
    "sumber": "realpython.com",
    "penulis": "Alden Holder",
    "tanggal": "2029-01-20",
    "judul": "Python Decorators: Simplifying Code with Function Decorators",
    "tingkat_kesulitan": "Menengah",
    "tag": ["Python", "Decorators", "Functions", "Intermediate"],
    "konten": "Decorators in Python are a powerful and flexible tool to modify the behavior of functions or methods without...",
    "contoh": [
      {
        "tipe": "Code Example",
        "bahasa": "Python",
        "isi": "# Example of using decorators in Python\ndef my_decorator(func):\n    def wrapper():\n        print('Something is happening before the function is called.')\n        func()\n        print('Something is happening after the function is called.')\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print('Hello!')\n\n# Call decorated function\nsay_hello()",
        "komentar": "Illustrates using decorators to modify function behavior in Python."
      }
    ],
    "topik": [
      {
        "topik": "Penggunaan Decorators untuk Memodifikasi Fungsi dalam Python",
        "deskripsi": "Menggunakan decorators untuk mengubah perilaku fungsi atau metode dalam Python."
      }
    ],
    "referensi": [
      {
        "judul": "Python Decorators Documentation",
        "url": "https://docs.python.org/3/glossary.html#term-decorator"
      }
    ],
    "highlight": ["powerful and flexible tool to modify the behavior of functions or methods", "Python decorators"],
    "error": [
      {
        "error": "SyntaxError",
        "deskripsi": "SyntaxError occurred due to incorrect syntax used in decorator function.",
        "contoh": "@my_decorator\ndef say_hello():\n    print('Hello!')",
        "solusi": "Ensure correct syntax is used when defining and applying decorators in Python."
      }
    ]
  },
  {
    "sumber": "medium.com",
    "penulis": "Brayden Lam",
    "tanggal": "2029-02-05",
    "judul": "Python Unit Testing: Best Practices with pytest",
    "tingkat_kesulitan": "Menengah",
    "tag": ["Python", "Unit Testing", "pytest", "Best Practices", "Intermediate"],
    "konten": "Unit testing is a fundamental part of software development that ensures individual units of code work as expected...",
    "contoh": [
      {
        "tipe": "Code Example",
        "bahasa": "Python",
        "isi": "# Example of unit testing with pytest\nimport pytest\n\ndef add(a, b):\n    return a + b\n\n# Test case\ndef test_add():\n    assert add(2, 3) == 5\n    assert add(-1, 1) == 0\n\nif __name__ == '__main__':\n    pytest.main()",
        "komentar": "Demonstrates best practices for unit testing with pytest in Python."
      }
    ],
    "topik": [
      {
        "topik": "Praktik Terbaik Unit Testing dengan pytest dalam Python",
        "deskripsi": "Menerapkan unit testing untuk memastikan fungsi-fungsi individu dalam kode bekerja sesuai harapan dalam Python."
      }
    ],
    "referensi": [
      {
        "judul": "pytest Documentation",
        "url": "https://docs.pytest.org/en/stable/"
      }
    ],
    "highlight": ["fundamental part of software development", "Unit testing with pytest"],
    "error": [
      {
        "error": "AssertionError",
        "deskripsi": "AssertionError occurred due to failed assertion in pytest unit test.",
        "contoh": "assert add(2, 3) == 5",
        "solusi": "Check and fix logic or values used in assertions for pytest unit tests."
      }
    ]
  }
]
