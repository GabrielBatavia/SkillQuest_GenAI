[
  {
    "sumber": "towardsdatascience.com",
    "penulis": "Harper Brooks",
    "tanggal": "2026-02-20",
    "judul": "Python Matplotlib: Introduction to Data Visualization with Matplotlib",
    "tingkat_kesulitan": "Menengah",
    "tag": ["Python", "Matplotlib", "Data Visualization", "Intermediate"],
    "konten": "Matplotlib is a popular library for creating static, animated, and interactive visualizations...",
    "contoh": [
      {
        "tipe": "Code Example",
        "bahasa": "Python",
        "isi": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Example of a simple plot\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('sin(x)')\nplt.title('Simple Plot')\nplt.show()",
        "komentar": "Creates a simple plot using Matplotlib."
      }
    ],
    "topik": [
      {
        "topik": "Visualisasi Data dengan Matplotlib dalam Python",
        "deskripsi": "Menggunakan Matplotlib untuk membuat visualisasi data statis, animasi, dan interaktif dalam Python."
      }
    ],
    "referensi": [
      {
        "judul": "Matplotlib Documentation",
        "url": "https://matplotlib.org/stable/contents.html"
      }
    ],
    "highlight": ["popular library for creating visualizations", "Matplotlib simple plot"],
    "error": [
      {
        "error": "TypeError",
        "deskripsi": "TypeError occurred due to incorrect argument type in plot function.",
        "contoh": "plt.plot('x', 'y')",
        "solusi": "Ensure correct argument types (arrays or lists) are passed to the plot function."
      }
    ]
  },
  {
    "sumber": "realpython.com",
    "penulis": "Sophia Green",
    "tanggal": "2026-03-05",
    "judul": "Python Decorators: Simplifying Code with Decorators",
    "tingkat_kesulitan": "Menengah",
    "tag": ["Python", "Decorators", "Intermediate"],
    "konten": "Decorators in Python allow you to modify the behavior of a function or class...",
    "contoh": [
      {
        "tipe": "Code Example",
        "bahasa": "Python",
        "isi": "# Example of a decorator\ndef my_decorator(func):\n    def wrapper():\n        print('Something is happening before the function is called.')\n        func()\n        print('Something is happening after the function is called.')\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print('Hello!')\n\nsay_hello()",
        "komentar": "Defines and applies a decorator to modify the behavior of 'say_hello' function."
      }
    ],
    "topik": [
      {
        "topik": "Decorators dalam Python",
        "deskripsi": "Menggunakan decorators untuk memodifikasi perilaku fungsi atau kelas dalam Python."
      }
    ],
    "referensi": [
      {
        "judul": "Python Decorators Documentation",
        "url": "https://docs.python.org/3/glossary.html#term-decorator"
      }
    ],
    "highlight": ["modify the behavior of a function or class", "Python decorators"],
    "error": [
      {
        "error": "NameError",
        "deskripsi": "NameError occurred due to using undefined variable.",
        "contoh": "print(undefined_var)",
        "solusi": "Define variable 'undefined_var' before using it."
      }
    ]
  }
]
