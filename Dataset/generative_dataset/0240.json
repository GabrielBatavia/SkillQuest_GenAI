[
  {
    "sumber": "realpython.com",
    "penulis": "Finley Jordan",
    "tanggal": "2027-06-05",
    "judul": "Python Closures: Understanding Closures in Python",
    "tingkat_kesulitan": "Menengah",
    "tag": ["Python", "Closures", "Intermediate"],
    "konten": "Closures in Python allow functions to retain references to variables from enclosing scopes...",
    "contoh": [
      {
        "tipe": "Code Example",
        "bahasa": "Python",
        "isi": "# Example of defining and using a closure\n\ndef outer_function(x):\n    def inner_function(y):\n        return x + y\n    return inner_function\n\nadd_five = outer_function(5)\nprint(add_five(3))  # Output: 8",
        "komentar": "Defines and uses a closure to add a constant value."
      }
    ],
    "topik": [
      {
        "topik": "Pemahaman Closures dalam Python",
        "deskripsi": "Menggunakan closures untuk memungkinkan fungsi mempertahankan referensi ke variabel dari cakupan penutup."
      }
    ],
    "referensi": [
      {
        "judul": "Python Closures Documentation",
        "url": "https://docs.python.org/3/tutorial/classes.html#python-closures"
      }
    ],
    "highlight": ["functions retain references to variables", "Python closures"],
    "error": [
      {
        "error": "NameError",
        "deskripsi": "NameError occurred due to accessing undefined variable in closure.",
        "contoh": "return x + z",
        "solusi": "Ensure all variables used in closures are properly defined and accessible."
      }
    ]
  },
  {
    "sumber": "towardsdatascience.com",
    "penulis": "River Cooper",
    "tanggal": "2027-06-20",
    "judul": "Python Decorators: Using Decorators in Python Functions",
    "tingkat_kesulitan": "Menengah",
    "tag": ["Python", "Decorators", "Intermediate"],
    "konten": "Decorators in Python allow you to modify the behavior of functions or methods without changing their code...",
    "contoh": [
      {
        "tipe": "Code Example",
        "bahasa": "Python",
        "isi": "# Example of defining and using a decorator\n\ndef decorator_function(func):\n    def wrapper():\n        print('Before function execution')\n        func()\n        print('After function execution')\n    return wrapper\n\n@decorator_function\ndef say_hello():\n    print('Hello, World!')\n\nsay_hello()",
        "komentar": "Defines and uses a decorator to modify function behavior."
      }
    ],
    "topik": [
      {
        "topik": "Penggunaan Decorators dalam Fungsi Python",
        "deskripsi": "Menggunakan decorators untuk memodifikasi perilaku fungsi atau metode tanpa mengubah kode mereka."
      }
    ],
    "referensi": [
      {
        "judul": "Python Decorators Documentation",
        "url": "https://docs.python.org/3/tutorial/controlflow.html#decorator"
      }
    ],
    "highlight": ["modify the behavior of functions", "Python decorators"],
    "error": [
      {
        "error": "TypeError",
        "deskripsi": "TypeError occurred due to incorrect usage of decorators with arguments.",
        "contoh": "@decorator_function(arg)",
        "solusi": "Ensure decorators are used correctly without passing arguments directly to them."
      }
    ]
  }
]
