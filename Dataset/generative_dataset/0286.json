[
  {
    "sumber": "Codecademy",
    "penulis": "Codecademy Team",
    "tanggal": "2024-07-13",
    "judul": "Penggunaan Virtual Environment dalam Python",
    "tingkat_kesulitan": "Pemula",
    "tag": ["Python", "Virtual Environment", "Development Environment"],
    "konten": "Artikel ini menjelaskan kegunaan dan cara menggunakan virtual environment dalam Python untuk mengisolasi proyek-proyek dan manajemen dependensi.",
    "contoh": [
      {
        "tipe": "Contoh Virtual Environment",
        "bahasa": "Python",
        "isi": "# Membuat virtual environment\npython -m venv myenv\n\n# Aktivasi virtual environment (Windows)\nmyenvScriptsactivate\n\n# Aktivasi virtual environment (Mac/Linux)\nsource myenv/bin/activate",
        "komentar": "Contoh pembuatan dan aktivasi virtual environment."
      }
    ],
    "topik": [
      {
        "topik": "Virtual Environment dalam Python",
        "deskripsi": "Memperkenalkan penggunaan virtual environment untuk manajemen proyek dalam Python."
      }
    ],
    "referensi": [
      {
        "judul": "Python Virtual Environment Documentation",
        "url": "https://docs.python.org/id/3/tutorial/venv.html"
      }
    ],
    "highlight": ["Virtual Environment", "Isolasi Proyek", "Manajemen Dependensi"],
    "error": [
      {
        "error": "ModuleNotFoundError",
        "deskripsi": "Kesalahan yang muncul saat mencoba mengimpor modul yang tidak ada dalam lingkungan virtual environment.",
        "contoh": "import tensorflow",
        "solusi": "Pastikan modul yang ingin digunakan sudah diinstal dalam virtual environment yang aktif."
      }
    ]
  },
  {
    "sumber": "Real Python",
    "penulis": "Real Python Team",
    "tanggal": "2024-07-13",
    "judul": "Pengenalan Decorator dalam Python",
    "tingkat_kesulitan": "Menengah",
    "tag": ["Python", "Decorator", "Advanced"],
    "konten": "Decorator adalah fitur yang powerful dalam Python untuk mengubah atau memodifikasi fungsi atau class. Artikel ini menjelaskan cara membuat dan menggunakan decorator dalam Python.",
    "contoh": [
      {
        "tipe": "Contoh Decorator",
        "bahasa": "Python",
        "isi": "def decorator_function(original_function):\n    def wrapper_function(*args, **kwargs):\n        print(f'Wrapper dijalankan sebelum {original_function.__name__}()')\n        return original_function(*args, **kwargs)\n    return wrapper_function\n\n@decorator_function\n    def display():\n        print('Display function dijalankan')",
        "komentar": "Contoh pembuatan dan penggunaan decorator dalam Python."
      }
    ],
    "topik": [
      {
        "topik": "Decorator dalam Python",
        "deskripsi": "Memperkenalkan konsep decorator untuk modifikasi fungsi atau class dalam bahasa pemrograman Python."
      }
    ],
    "referensi": [
      {
        "judul": "Python Decorators Documentation",
        "url": "https://docs.python.org/id/3/glossary.html#term-decorator"
      }
    ],
    "highlight": ["Decorator", "Fungsi Tingkat Tinggi", "Metaprogramming"],
    "error": [
      {
        "error": "TypeError",
        "deskripsi": "Kesalahan yang muncul saat mencoba menerapkan decorator pada objek yang bukan fungsi atau method.",
        "contoh": "@decorator_function\nclass MyClass:",
        "solusi": "Pastikan decorator diterapkan pada fungsi atau method, bukan class atau objek lainnya."
      }
    ]
  }
]
