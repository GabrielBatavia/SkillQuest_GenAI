{
    "sumber": "panduancode.com",
    "penulis": "Rahmat Hidayat",
    "tanggal": "2024-06-10",
    "judul": "Memahami Decorator dan Generator di Python",
    "tingkat_kesulitan": "Lanjutan",
    "tag": ["Python", "Decorator", "Generator", "Lanjutan"],
    "konten": "Artikel ini memberikan pemahaman mendalam tentang penggunaan decorator dan generator di Python, serta cara mengimplementasikannya dalam berbagai kasus.",
    "contoh": [
        {
            "tipe": "Kode",
            "bahasa": "Python",
            "isi": "def pengukur_waktu(func):\n    import time\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f'Waktu eksekusi: {end_time - start_time} detik')\n        return result\n    return wrapper\n\n@pengukur_waktu\ndef hitung_faktorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * hitung_faktorial(n-1)\n\nprint(hitung_faktorial(5))",
            "komentar": "Decorator pengukur waktu untuk menghitung lama eksekusi fungsi hitung_faktorial."
        },
        {
            "tipe": "Kode",
            "bahasa": "Python",
            "isi": "def penghasil_angka(max):\n    n = 0\n    while n < max:\n        yield n\n        n += 1\n\nfor angka in penghasil_angka(5):\n    print(angka)",
            "komentar": "Generator untuk menghasilkan angka dari 0 hingga max-1."
        }
    ],
    "topik": [
        {
            "topik": "Decorator",
            "deskripsi": "Cara membuat dan menggunakan decorator untuk memperluas fungsi."
        },
        {
            "topik": "Generator",
            "deskripsi": "Cara membuat dan menggunakan generator untuk menghasilkan nilai secara lazy."
        }
    ],
    "referensi": [
        {
            "judul": "Decorator di Python",
            "url": "https://realpython.com/primer-on-python-decorators/"
        },
        {
            "judul": "Generator di Python",
            "url": "https://realpython.com/introduction-to-python-generators/"
        }
    ],
    "highlight": ["Implementasi decorator", "Penggunaan generator", "Penghematan memori dengan generator"],
    "error": [
        {
            "error": "TypeError",
            "deskripsi": "Kesalahan saat decorator tidak diterapkan dengan benar.",
            "contoh": "@pengukur_waktu\ndef contoh_fungsi():\n    pass",
            "solusi": "Pastikan decorator diimplementasikan dengan benar dan fungsi yang didekorasi memiliki parameter yang sesuai."
        },
        {
            "error": "SyntaxError",
            "deskripsi": "Kesalahan dalam penulisan sintaks generator.",
            "contoh": "def salah_generator(n)\n    while n > 0:\n        yield n\n        n -= 1",
            "solusi": "Pastikan penggunaan titik dua (:) setelah deklarasi fungsi dan indentasi yang benar."
        }
    ]
}
