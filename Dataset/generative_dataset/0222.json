[
  {
    "sumber": "towardsdatascience.com",
    "penulis": "Nathan Powell",
    "tanggal": "2026-07-05",
    "judul": "Python Regular Expressions: Understanding Pattern Matching with re",
    "tingkat_kesulitan": "Menengah",
    "tag": ["Python", "Regular Expressions", "Regex", "Pattern Matching", "Intermediate"],
    "konten": "Regular expressions (regex) in Python provide a powerful way to search, match, and manipulate strings...",
    "contoh": [
      {
        "tipe": "Code Example",
        "bahasa": "Python",
        "isi": "import re\n\n# Example of matching a pattern\npattern = r'([a-zA-Z]+)'\nstring = 'Hello123World'\nmatches = re.findall(pattern, string)\nprint(matches)",
        "komentar": "Finds all sequences of alphabetical characters in a string using regex."
      }
    ],
    "topik": [
      {
        "topik": "Ekspresi Reguler (Regular Expressions) dalam Python",
        "deskripsi": "Menggunakan ekspresi reguler untuk pencarian pola, pencocokan, dan manipulasi string dalam Python."
      }
    ],
    "referensi": [
      {
        "judul": "Python Regular Expressions Documentation",
        "url": "https://docs.python.org/3/library/re.html"
      }
    ],
    "highlight": ["powerful way to search, match, and manipulate strings", "Python regex pattern matching"],
    "error": [
      {
        "error": "SyntaxError",
        "deskripsi": "SyntaxError occurred due to incorrect regex pattern syntax.",
        "contoh": "pattern = r'([a-zA-Z'",
        "solusi": "Ensure regex pattern syntax is correct and complete."
      }
    ]
  },
  {
    "sumber": "realpython.com",
    "penulis": "Aiden Phillips",
    "tanggal": "2026-07-20",
    "judul": "Python Error Handling: Managing Exceptions in Python",
    "tingkat_kesulitan": "Pemula",
    "tag": ["Python", "Error Handling", "Exceptions", "Pemula"],
    "konten": "Error handling in Python allows you to gracefully manage and handle runtime errors...",
    "contoh": [
      {
        "tipe": "Code Example",
        "bahasa": "Python",
        "isi": "# Example of handling division by zero error\ndef divide(x, y):\n    try:\n        result = x / y\n        print('Result:', result)\n    except ZeroDivisionError as e:\n        print('Error:', e)\n\ndivide(10, 0)",
        "komentar": "Handles division by zero error using try-except block."
      }
    ],
    "topik": [
      {
        "topik": "Penanganan Error (Error Handling) dalam Python",
        "deskripsi": "Menggunakan mekanisme penanganan error untuk mengelola dan menangani kesalahan saat runtime dalam Python."
      }
    ],
    "referensi": [
      {
        "judul": "Python Errors and Exceptions Documentation",
        "url": "https://docs.python.org/3/tutorial/errors.html"
      }
    ],
    "highlight": ["gracefully manage and handle runtime errors", "Python try-except block"],
    "error": [
      {
        "error": "TypeError",
        "deskripsi": "TypeError occurred due to passing incorrect data type to function.",
        "contoh": "divide(10, '2')",
        "solusi": "Ensure correct data types are passed to functions to avoid TypeError."
      }
    ]
  }
]
