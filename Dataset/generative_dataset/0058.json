{
    "sumber": "KodePython.net",
    "penulis": "Ahmad Maulana",
    "tanggal": "2022-03-18",
    "judul": "Menggunakan dan Memahami Context Managers di Python",
    "tingkat_kesulitan": "Lanjut",
    "tag": ["context manager", "with statement", "lanjut"],
    "konten": "Artikel ini menjelaskan konsep dan penggunaan context managers di Python, termasuk cara menggunakan 'with' statement dan membuat custom context manager dengan metode __enter__ dan __exit__.",
    "contoh": [
        {
            "tipe": "kode",
            "bahasa": "python",
            "isi": "with open('example.txt', 'w') as file:\n    file.write('Hello, world!')",
            "komentar": "Contoh dasar penggunaan 'with' statement untuk membuka dan menulis ke file"
        },
        {
            "tipe": "kode",
            "bahasa": "python",
            "isi": "class FileOpener:\n    def __init__(self, filename, mode):\n        self.filename = filename\n        self.mode = mode\n    def __enter__(self):\n        self.file = open(self.filename, self.mode)\n        return self.file\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.file.close()\n\nwith FileOpener('example.txt', 'w') as file:\n    file.write('Hello, custom context manager!')",
            "komentar": "Contoh pembuatan custom context manager untuk membuka file"
        },
        {
            "tipe": "kode",
            "bahasa": "python",
            "isi": "from contextlib import contextmanager\n\n@contextmanager\ndef managed_file(name):\n    try:\n        f = open(name, 'w')\n        yield f\n    finally:\n        f.close()\n\nwith managed_file('example.txt') as f:\n    f.write('Hello, contextlib!')",
            "komentar": "Contoh penggunaan contextlib untuk membuat context manager"
        }
    ],
    "topik": [
        {
            "topik": "Context Managers",
            "deskripsi": "Objek yang mengatur sumber daya yang perlu diinisialisasi dan dibersihkan."
        },
        {
            "topik": "With Statement",
            "deskripsi": "Sintaks yang digunakan untuk membungkus eksekusi blok kode dengan metode context manager."
        },
        {
            "topik": "Custom Context Managers",
            "deskripsi": "Membuat context manager sendiri dengan mendefinisikan metode __enter__ dan __exit__."
        }
    ],
    "referensi": [
        {
            "judul": "Context Managers and Python's With Statement - Real Python",
            "url": "https://realpython.com/python-with-statement/"
        },
        {
            "judul": "Python Context Managers - W3Schools",
            "url": "https://www.w3schools.com/python/python_with.asp"
        }
    ],
    "highlight": [
        "Penjelasan lengkap tentang context managers",
        "Contoh penggunaan praktis dan custom context manager"
    ],
    "error": [
        {
            "error": "FileNotFoundError",
            "deskripsi": "Kesalahan yang terjadi saat mencoba membuka file yang tidak ada.",
            "contoh": "with open('non_existent_file.txt', 'r') as file:\n    content = file.read()",
            "solusi": "Pastikan file yang akan dibuka benar-benar ada di lokasi yang ditentukan."
        },
        {
            "error": "AttributeError",
            "deskripsi": "Kesalahan saat mencoba mengakses atribut yang tidak ada dalam context manager.",
            "contoh": "with managed_file('example.txt') as f:\n    print(f.non_existent_attribute)",
            "solusi": "Pastikan atribut yang diakses ada dalam objek context manager."
        }
    ]
}
