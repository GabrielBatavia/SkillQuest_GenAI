[
    {
        "sumber": "PythonIndo",
        "penulis": "Adi Cahyo",
        "tanggal": "2024-07-13",
        "judul": "Memulai Pemrograman dengan Python",
        "tingkat_kesulitan": "Pemula",
        "tag": ["pemula", "dasar", "python"],
        "konten": "Artikel ini membahas langkah-langkah dasar untuk memulai pemrograman dengan Python, termasuk instalasi Python, penggunaan interpreter, dan pengenalan dasar bahasa.",
        "contoh": [
            {
                "tipe": "kode",
                "bahasa": "python",
                "isi": "print('Halo, dunia!')",
                "komentar": "Contoh penggunaan statement print untuk mencetak teks ke layar."
            },
            {
                "tipe": "kode",
                "bahasa": "python",
                "isi": "angka = 10\nif angka > 0:\n    print('Angka positif')\nelse:\n    print('Angka non-positif atau nol')",
                "komentar": "Contoh penggunaan struktur kontrol if-else untuk pengambilan keputusan."
            }
        ],
        "topik": [
            {
                "topik": "Instalasi Python",
                "deskripsi": "Cara menginstal Python di berbagai sistem operasi."
            },
            {
                "topik": "Penggunaan Interpreter",
                "deskripsi": "Pengenalan tentang bagaimana menggunakan interpreter Python untuk mengeksekusi kode."
            }
        ],
        "referensi": [
            {
                "judul": "Python Official Documentation",
                "url": "https://docs.python.org/3/"
            }
        ],
        "highlight": ["Mudah dipahami", "Langkah awal yang penting"],
        "error": [
            {
                "error": "SyntaxError",
                "deskripsi": "Kesalahan ini terjadi ketika ada kesalahan sintaks dalam kode Python.",
                "contoh": "print('Halo, dunia!')",
                "solusi": "Periksa kembali sintaks kode Python untuk memastikan tidak ada kesalahan."
            }
        ]
    },
    {
        "sumber": "PythonMudah",
        "penulis": "Bambang Susilo",
        "tanggal": "2024-08-05",
        "judul": "Struktur Data dalam Python",
        "tingkat_kesulitan": "Pemula hingga Menengah",
        "tag": ["struktur data", "python"],
        "konten": "Artikel ini membahas berbagai struktur data yang tersedia di Python seperti list, tuple, set, dan dictionary, beserta cara penggunaannya.",
        "contoh": [
            {
                "tipe": "kode",
                "bahasa": "python",
                "isi": "buah = ['apel', 'pisang', 'jeruk']\nprint(buah[0])",
                "komentar": "Contoh penggunaan list untuk menyimpan dan mengakses data."
            },
            {
                "tipe": "kode",
                "bahasa": "python",
                "isi": "siswa = {'nama': 'Budi', 'kelas': 10, 'nilai': 85}\nprint(siswa['nama'])",
                "komentar": "Contoh penggunaan dictionary untuk menyimpan data dalam bentuk pasangan kunci-nilai."
            }
        ],
        "topik": [
            {
                "topik": "List",
                "deskripsi": "Penggunaan list untuk menyimpan kumpulan data yang dapat diubah."
            },
            {
                "topik": "Dictionary",
                "deskripsi": "Penggunaan dictionary untuk menyimpan data dalam bentuk pasangan kunci-nilai."
            }
        ],
        "referensi": [
            {
                "judul": "Python Data Structures Documentation",
                "url": "https://docs.python.org/3/tutorial/datastructures.html"
            }
        ],
        "highlight": ["Penting untuk manipulasi data", "Dasar dalam pemrograman Python"],
        "error": [
            {
                "error": "KeyError",
                "deskripsi": "Kesalahan ini terjadi ketika mencoba mengakses kunci yang tidak ada dalam dictionary.",
                "contoh": "print(siswa['umur'])",
                "solusi": "Pastikan kunci yang diakses tersedia dalam dictionary sebelum mengaksesnya."
            }
        ]
    },
    {
        "sumber": "PythonMaster",
        "penulis": "Citra Wulandari",
        "tanggal": "2024-09-15",
        "judul": "Pemrograman Fungsional dengan Python",
        "tingkat_kesulitan": "Menengah",
        "tag": ["pemrograman fungsional", "python"],
        "konten": "Artikel ini mengenalkan konsep pemrograman fungsional di Python, termasuk fungsi lambda, map, filter, dan reduce.",
        "contoh": [
            {
                "tipe": "kode",
                "bahasa": "python",
                "isi": "bilangan = [1, 2, 3, 4, 5]\nkali_dua = list(map(lambda x: x * 2, bilangan))\nprint(kali_dua)",
                "komentar": "Contoh penggunaan fungsi map untuk mengaplikasikan fungsi lambda ke setiap elemen list."
            },
            {
                "tipe": "kode",
                "bahasa": "python",
                "isi": "genap = list(filter(lambda x: x % 2 == 0, bilangan))\nprint(genap)",
                "komentar": "Contoh penggunaan fungsi filter untuk memfilter elemen list berdasarkan kondisi tertentu."
            }
        ],
        "topik": [
            {
                "topik": "Fungsi Lambda",
                "deskripsi": "Penggunaan fungsi lambda untuk membuat fungsi anonim dalam satu baris kode."
            },
            {
                "topik": "Map dan Filter",
                "deskripsi": "Penggunaan fungsi map dan filter untuk memanipulasi dan memfilter data."
            }
        ],
        "referensi": [
            {
                "judul": "Python Functional Programming Documentation",
                "url": "https://docs.python.org/3/howto/functional.html"
            }
        ],
        "highlight": ["Penting dalam pengolahan data", "Mempermudah pemrograman kompleks"],
        "error": [
            {
                "error": "TypeError",
                "deskripsi": "Kesalahan ini terjadi ketika tipe data yang diberikan tidak sesuai dengan yang diharapkan oleh fungsi.",
                "contoh": "bilangan = [1, 2, '3', 4, 5]\nkali_dua = list(map(lambda x: x * 2, bilangan))",
                "solusi": "Pastikan tipe data yang digunakan sesuai dengan yang diharapkan oleh fungsi."
            }
        ]
    },
    {
        "sumber": "PythonPlus",
        "penulis": "Diana Permata",
        "tanggal": "2024-10-10",
        "judul": "Concurrency dengan Threading dan Multiprocessing di Python",
        "tingkat_kesulitan": "Menengah hingga Lanjutan",
        "tag": ["concurrency", "threading", "multiprocessing", "python"],
        "konten": "Artikel ini membahas tentang penggunaan threading dan multiprocessing di Python untuk mencapai concurrency dan meningkatkan kinerja aplikasi.",
        "contoh": [
            {
                "tipe": "kode",
                "bahasa": "python",
                "isi": "import threading\n\ndef print_numbers():\n    for i in range(1, 6):\n        print('Nomor:', i)\n\nthread1 = threading.Thread(target=print_numbers)\nthread2 = threading.Thread(target=print_numbers)\n\nthread1.start()\nthread2.start()\n\nthread1.join()\nthread2.join()",
                "komentar": "Contoh penggunaan threading untuk menjalankan dua fungsi secara bersamaan."
            },
            {
                "tipe": "kode",
                "bahasa": "python",
                "isi": "from multiprocessing import Process\n\ndef print_numbers():\n    for i in range(1, 6):\n        print('Nomor:', i)\n\nprocess1 = Process(target=print_numbers)\nprocess2 = Process(target=print_numbers)\n\nprocess1.start()\nprocess2.start()\n\nprocess1.join()\nprocess2.join()",
                "komentar": "Contoh penggunaan multiprocessing untuk menjalankan dua proses secara bersamaan."
            }
        ],
        "topik": [
            {
                "topik": "Threading",
                "deskripsi": "Penggunaan threading untuk menciptakan multiple thread dalam satu proses."
            },
            {
                "topik": "Multiprocessing",
                "deskripsi": "Penggunaan multiprocessing untuk menciptakan multiple process yang berjalan secara paralel."
            }
        ],
        "referensi": [
            {
                "judul": "Python Threading Documentation",
                "url": "https://docs.python.org/3/library/threading.html"
            },
            {
                "judul": "Python Multiprocessing Documentation",
                "url": "https://docs.python.org/3/library/multiprocessing.html"
            }
        ],
        "highlight": ["Meningkatkan kinerja aplikasi", "Relevan dalam pengembangan web modern"],
        "error": [
            {
                "error": "RuntimeError",
                "deskripsi": "Kesalahan ini terjadi ketika mencoba menjalankan thread lebih dari sekali dalam satu proses.",
                "contoh": "thread1.start()\nthread2.start()",
                "solusi": "Pastikan thread hanya dijalankan sekali dalam satu proses untuk menghindari kesalahan ini."
            }
        ]
    },
    {
        "sumber": "PythonPro",
        "penulis": "Eko Prasetyo",
        "tanggal": "2024-11-20",
        "judul": "Pemrograman Asinkron dengan Asyncio di Python",
        "tingkat_kesulitan": "Lanjutan",
        "tag": ["asyncio", "python"],
        "konten": "Artikel ini mengenalkan konsep pemrograman asinkron dengan asyncio di Python, termasuk penggunaan coroutine, event loop, dan await.",
        "contoh": [
            {
                "tipe": "kode",
                "bahasa": "python",
                "isi": "import asyncio\n\nasync def main():\n    print('Memulai')\n    await asyncio.sleep(1)\n    print('Selesai')\n\nasyncio.run(main())",
                "komentar": "Contoh penggunaan asyncio untuk menunda eksekusi di lingkungan asinkron."
            },
            {
                "tipe": "kode",
                "bahasa": "python",
                "isi": "import aiohttp\n\nasync def fetch_data(url):\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url) as response:\n            return await response.text()",
                "komentar": "Contoh penggunaan asyncio dengan aiohttp untuk melakukan permintaan HTTP secara asinkron."
            }
        ],
        "topik": [
            {
                "topik": "Coroutine",
                "deskripsi": "Penjelasan tentang coroutine dan cara menggunakan asyncio."
            },
            {
                "topik": "Event Loop",
                "deskripsi": "Cara menggunakan event loop untuk menjalankan coroutine secara asinkron."
            }
        ],
        "referensi": [
            {
                "judul": "Asyncio Documentation",
                "url": "https://docs.python.org/3/library/asyncio.html"
            },
            {
                "judul": "Aiohttp Documentation",
                "url": "https://docs.aiohttp.org/en/stable/"
            }
        ],
        "highlight": ["Pengoptimalan kinerja", "Penting dalam pengembangan web modern"],
        "error": [
            {
                "error": "RuntimeError",
                "deskripsi": "Kesalahan ini terjadi ketika asyncio.run dipanggil lebih dari satu kali dalam satu proses.",
                "contoh": "asyncio.run(main())\nasyncio.run(main())",
                "solusi": "Pastikan asyncio.run hanya dipanggil sekali per proses."
            }
        ]
    }
]
