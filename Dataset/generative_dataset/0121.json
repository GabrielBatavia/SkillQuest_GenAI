{
    "sumber": "PythonPemula.com",
    "penulis": "Nina Susanti",
    "tanggal": "2024-04-20",
    "judul": "Memahami dan Menggunakan Variabel Mutable dan Immutable di Python",
    "tingkat_kesulitan": "Pemula",
    "tag": ["variable", "mutable", "immutable", "pemula"],
    "konten": "Artikel ini menjelaskan tentang variabel mutable dan immutable di Python. Mutable berarti nilai objek dapat diubah setelah objek tersebut dibuat, sementara immutable berarti nilai objek tidak dapat diubah setelah objek tersebut dibuat.",
    "contoh": [
        {
            "tipe": "kode",
            "bahasa": "python",
            "isi": "my_list = [1, 2, 3]\nprint('Sebelum:', my_list)\nmy_list.append(4)\nprint('Sesudah:', my_list)",
            "komentar": "Contoh mendefinisikan list yang mutable, kemudian menambahkan elemen baru ke dalam list"
        },
        {
            "tipe": "kode",
            "bahasa": "python",
            "isi": "my_tuple = (1, 2, 3)\nprint('Tuple:', my_tuple)\n# my_tuple[0] = 4  # Ini akan menyebabkan TypeError karena tuple adalah immutable",
            "komentar": "Contoh mendefinisikan tuple yang immutable dan mencoba mengubah nilai yang menyebabkan TypeError"
        },
        {
            "tipe": "kode",
            "bahasa": "python",
            "isi": "my_string = 'hello'\nprint('Sebelum:', my_string)\nmy_string = my_string + ' world'\nprint('Sesudah:', my_string)",
            "komentar": "Contoh mendefinisikan string yang immutable, dan mengubah nilai string dengan membuat string baru"
        },
        {
            "tipe": "kode",
            "bahasa": "python",
            "isi": "my_dict = {'name': 'Alice', 'age': 25}\nprint('Sebelum:', my_dict)\nmy_dict['age'] = 26\nprint('Sesudah:', my_dict)",
            "komentar": "Contoh mendefinisikan dictionary yang mutable dan mengubah nilai dari salah satu kunci"
        },
        {
            "tipe": "kode",
            "bahasa": "python",
            "isi": "my_set = {1, 2, 3}\nprint('Sebelum:', my_set)\nmy_set.add(4)\nprint('Sesudah:', my_set)",
            "komentar": "Contoh mendefinisikan set yang mutable dan menambahkan elemen baru ke dalam set"
        },
        {
            "tipe": "kode",
            "bahasa": "python",
            "isi": "my_int = 10\nprint('Sebelum:', my_int)\nmy_int = 20\nprint('Sesudah:', my_int)",
            "komentar": "Contoh mendefinisikan integer yang immutable, dan mengubah nilai integer dengan membuat variabel baru"
        }
    ],
    "topik": [
        {
            "topik": "Variabel Mutable",
            "deskripsi": "Penjelasan tentang variabel mutable di Python yang nilainya dapat diubah setelah didefinisikan. Contoh variabel mutable termasuk list, dictionary, dan set."
        },
        {
            "topik": "Variabel Immutable",
            "deskripsi": "Penjelasan tentang variabel immutable di Python yang nilainya tidak dapat diubah setelah didefinisikan. Contoh variabel immutable termasuk string, tuple, dan integer."
        },
        {
            "topik": "Mengubah Nilai Variabel Mutable",
            "deskripsi": "Cara mengubah nilai variabel mutable di Python dengan menggunakan metode atau operasi yang relevan."
        },
        {
            "topik": "Mengubah Nilai Variabel Immutable",
            "deskripsi": "Cara mengubah nilai variabel immutable di Python dengan membuat variabel baru dengan nilai yang berbeda."
        },
        {
            "topik": "Perbedaan Antara Mutable dan Immutable",
            "deskripsi": "Penjelasan tentang perbedaan mendasar antara variabel mutable dan immutable, dan bagaimana hal ini mempengaruhi cara kita memanipulasi data di Python."
        }
    ],
    "referensi": [
        {
            "judul": "Python Data Types - W3Schools",
            "url": "https://www.w3schools.com/python/python_datatypes.asp"
        },
        {
            "judul": "Mutable vs Immutable in Python - Real Python",
            "url": "https://realpython.com/python-mutable-and-immutable-types/"
        }
    ],
    "highlight": [
        "Penjelasan dasar tentang variabel mutable dan immutable di Python",
        "Contoh-contoh praktis yang mudah dipahami dengan penjelasan konteks yang lebih lengkap"
    ],
    "error": [
        {
            "error": "TypeError",
            "deskripsi": "Kesalahan yang terjadi saat mencoba mengubah elemen dalam objek yang bersifat immutable.",
            "contoh": "my_tuple = (1, 2, 3)\nmy_tuple[0] = 4",
            "solusi": "Pastikan untuk tidak mencoba mengubah elemen dalam objek immutable. Gunakan objek mutable jika membutuhkan struktur data yang dapat diubah."
        },
        {
            "error": "AttributeError",
            "deskripsi": "Kesalahan yang terjadi saat mencoba menggunakan metode yang tidak tersedia untuk tipe data tertentu.",
            "contoh": "my_string = 'hello'\nmy_string.append(' world')",
            "solusi": "Pastikan metode yang digunakan sesuai dengan tipe data objek. Misalnya, gunakan operator + untuk menggabungkan string."
        }
    ]
}
