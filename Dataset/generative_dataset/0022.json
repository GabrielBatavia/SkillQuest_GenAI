[
    {
        "sumber": "Python.org",
        "penulis": "David Beazley",
        "tanggal": "2022-12-04",
        "judul": "Penanganan Eksepsi di Python",
        "tingkat_kesulitan": "Lanjutan",
        "tag": [
            "python",
            "eksepsi",
            "pemrograman"
        ],
        "konten": "Artikel ini membahas cara menangani eksepsi di Python, termasuk penggunaan try, except, dan finally.",
        "contoh": [
            {
                "tipe": "kode",
                "bahasa": "python",
                "isi": "try:\n    x = 1 / 0\nexcept ZeroDivisionError:\n    print('Tidak bisa membagi dengan nol!')",
                "komentar": "Contoh penanganan eksepsi ZeroDivisionError."
            }
        ],
        "topik": [
            {
                "topik": "Try-Except",
                "deskripsi": "Blok try-except digunakan untuk menangani eksepsi."
            },
            {
                "topik": "Finally",
                "deskripsi": "Blok finally dieksekusi setelah blok try dan except, tidak peduli apakah ada eksepsi atau tidak."
            }
        ],
        "referensi": [
            {
                "judul": "Handling Exceptions",
                "url": "https://docs.python.org/3/tutorial/errors.html"
            }
        ],
        "highlight": [
            "Penanganan Eksepsi",
            "Blok try-except"
        ],
        "error": [
            {
                "error": "ZeroDivisionError",
                "deskripsi": "Terjadi saat mencoba membagi angka dengan nol.",
                "contoh": "x = 1 / 0",
                "solusi": "Gunakan blok try-except untuk menangani kesalahan ini."
            }
        ]
    },
    {
        "sumber": "Python.org",
        "penulis": "Raymond Hettinger",
        "tanggal": "2022-09-10",
        "judul": "Pemrograman Berorientasi Objek dengan Python",
        "tingkat_kesulitan": "Menengah",
        "tag": [
            "python",
            "oop",
            "pemrograman"
        ],
        "konten": "Artikel ini mencakup konsep dasar dari pemrograman berorientasi objek di Python, termasuk kelas dan objek.",
        "contoh": [
            {
                "tipe": "kode",
                "bahasa": "python",
                "isi": "class Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def bark(self):\n        print('Woof!')",
                "komentar": "Contoh sederhana dari kelas dan metode di Python."
            }
        ],
        "topik": [
            {
                "topik": "Kelas",
                "deskripsi": "Kelas adalah cetak biru untuk membuat objek."
            },
            {
                "topik": "Objek",
                "deskripsi": "Objek adalah instance dari kelas."
            }
        ],
        "referensi": [
            {
                "judul": "Python Classes and Objects",
                "url": "https://docs.python.org/3/tutorial/classes.html"
            }
        ],
        "highlight": [
            "Konsep OOP",
            "Kelas dan objek"
        ],
        "error": [
            {
                "error": "AttributeError",
                "deskripsi": "Kesalahan atribut terjadi saat mencoba mengakses atribut yang tidak ada.",
                "contoh": "dog = Dog('Buddy')\ndog.age",
                "solusi": "Pastikan atribut yang diakses ada dalam kelas."
            }
        ]
    }
]